// Made with Amplify Shader Editor v1.9.2.2
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Vegetation Engine/Geometry/Plant Standard Lit (Blanket)"
{
	Properties
	{
		[StyledCategory(Render Settings, 5, 10)]_CategoryRender("[ Category Render ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 0
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormals("Render Normals", Float) = 0
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[Enum(Off,0,On,1)]_RenderSpecular("Render Specular", Float) = 1
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Space(10)]_RenderDirect("Render Lighting", Range( 0 , 1)) = 1
		_RenderAmbient("Render Ambient", Range( 0 , 1)) = 1
		_RenderShadow("Render Shadow", Range( 0 , 1)) = 1
		[Enum(Off,0,On,1)][Space(10)]_RenderClip("Alpha Clipping", Float) = 1
		[Enum(Off,0,On,1)]_RenderCoverage("Alpha To Mask", Float) = 0
		_AlphaClipValue("Alpha Treshold", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_SpaceRenderFade("# Space Render Fade", Float) = 0
		[StyledCategory(Global Settings)]_CategoryGlobals("[ Category Globals ]", Float) = 1
		[StyledMessage(Info, Procedural Variation in use. The Variation might not work as expected when switching from one LOD to another., 0, 10)]_MessageGlobalsVariation("# Message Globals Variation", Float) = 0
		[StyledEnum(TVEColorsLayers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_LayerColorsValue("Layer Colors", Float) = 0
		[StyledEnum(TVEExtrasLayers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_LayerExtrasValue("Layer Extras", Float) = 0
		[StyledEnum(TVEMotionLayers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_LayerMotionValue("Layer Motion", Float) = 0
		[StyledEnum(TVEVertexLayers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)]_LayerVertexValue("Layer Vertex", Float) = 0
		[StyledSpace(10)]_SpaceGlobalLayers("# Space Global Layers", Float) = 0
		_GlobalColors("Global Color", Range( 0 , 1)) = 1
		_GlobalAlpha("Global Alpha", Range( 0 , 1)) = 1
		_GlobalOverlay("Global Overlay", Range( 0 , 1)) = 1
		_GlobalWetness("Global Wetness", Range( 0 , 1)) = 1
		_GlobalEmissive("Global Emissive", Range( 0 , 1)) = 1
		_GlobalSize("Global Size Fade", Range( 0 , 1)) = 1
		_GlobalOrientation("Global Orientation", Range( 0 , 1)) = 1
		_GlobalConform("Global Conform", Range( 0 , 1)) = 1
		[StyledSpace(10)]_SpaceGlobalLocals("# Space Global Locals", Float) = 0
		_ColorsIntensityValue("Color Intensity", Range( 0 , 2)) = 1
		_ColorsVariationValue("Color Variation", Range( 0 , 1)) = 0.5
		_AlphaVariationValue("Alpha Variation", Range( 0 , 1)) = 0.5
		_OverlayVariationValue("Overlay Variation", Range( 0 , 1)) = 0.5
		_OverlayProjectionValue("Overlay Projection", Range( 0 , 1)) = 0.5
		_ConformOffsetValue("Conform Offset", Range( -1 , 1)) = 0
		[Space(10)][StyledToggle]_ConformOffsetMode("Lock Position with Conform", Float) = 1
		[StyledSpace(10)]_SpaceGlobalOptions("# Space Global Options", Float) = 0
		[StyledToggle]_ColorsPositionMode("Use Pivot Position for Colors", Float) = 0
		[StyledToggle]_ExtrasPositionMode("Use Pivot Position for Extras", Float) = 0
		[StyledToggle]_VertexPositionMode("Use Pivot Position for Vertex", Float) = 1
		[StyledCategory(Main Settings)]_CategoryMain("[Category Main ]", Float) = 1
		[StyledMessage(Info, Use the Main Mask remap sliders to control the mask for Global Color__ Main Colors__ Gradient Tinting and Subsurface Scattering when available. The mask is stored in Main Mask Blue channel. , 0, 10)]_MessageMainMask("# Message Main Mask", Float) = 0
		[NoScaleOffset][StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[NoScaleOffset][StyledTextureSingleLine]_MainMaskTex("Main Mask", 2D) = "white" {}
		[Space(10)][StyledVector(9)]_MainUVs("Main UVs", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Color,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledRemapSlider(_MainMaskMinValue, _MainMaskMaxValue, 0, 1, 0, 0)]_MainMaskRemap("Main Mask Remap", Vector) = (0,0,0,0)
		[HideInInspector]_MainMaskMinValue("Main Mask Min", Range( 0 , 1)) = 0
		[HideInInspector]_MainMaskMaxValue("Main Mask Max", Range( 0 , 1)) = 0
		[StyledCategory(Detail Settings)]_CategoryDetail("[ Category Detail ]", Float) = 1
		[StyledMessage(Info, Use the Detail Mask remap sliders to control the mask for Global Color__ Detail Colors__ Gradient Tinting and Subsurface Scattering when available. The mask is stored in Detail Mask Blue channel., 0, 10)]_MessageSecondMask("# Message Second Mask", Float) = 0
		[Enum(Off,0,On,1)]_DetailMode("Detail Mode", Float) = 0
		[Enum(Overlay,0,Replace,1)]_DetailBlendMode("Detail Blend", Float) = 1
		[Enum(Overlay,0,Replace,1)]_DetailAlphaMode("Detail Alpha", Float) = 1
		[Space(10)][StyledToggle]_DetailFadeMode("Use Global Alpha and Fade", Float) = 0
		[NoScaleOffset][StyledTextureSingleLine]_SecondAlbedoTex("Detail Albedo", 2D) = "white" {}
		[NoScaleOffset][StyledTextureSingleLine]_SecondNormalTex("Detail Normal", 2D) = "bump" {}
		[NoScaleOffset][StyledTextureSingleLine]_SecondMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UVs,0,Detail UVs,1,Planar UVs,2)][Space(10)]_SecondUVsMode("Detail UVs", Float) = 0
		[StyledVector(9)]_SecondUVs("Detail UVs", Vector) = (1,1,0,0)
		[StyledToggle]_SecondUVsScaleMode("Use Inverted Tilling Mode", Float) = 0
		[Enum(Constant,0,Dual Color,1)][Space(10)]_SecondColorMode("Detail Color", Float) = 0
		[HDR]_SecondColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_SecondAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_SecondOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		_SecondSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[StyledRemapSlider(_SecondMaskMinValue, _SecondMaskMaxValue, 0, 1, 0, 0)]_SecondMaskRemap("Detail Mask Remap", Vector) = (0,0,0,0)
		[HideInInspector]_SecondMaskMinValue("Detail Mask Min", Range( 0 , 1)) = 0
		[HideInInspector]_SecondMaskMaxValue("Detail Mask Max", Range( 0 , 1)) = 0
		[Space(10)]_DetailValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_DetailNormalValue("Detail Blend Normals", Range( 0 , 1)) = 1
		[StyledRemapSlider(_DetailBlendMinValue, _DetailBlendMaxValue,0,1)]_DetailBlendRemap("Detail Blend Remap", Vector) = (0,0,0,0)
		[HideInInspector]_DetailBlendMinValue("Detail Blend Min", Range( 0 , 1)) = 0.4
		[HideInInspector]_DetailBlendMaxValue("Detail Blend Max", Range( 0 , 1)) = 0.6
		[Enum(Vertex Blue,0,Projection,1)][Space(10)]_DetailMeshMode("Detail Surface Mask", Float) = 0
		[StyledRemapSlider(_DetailMeshMinValue, _DetailMeshMaxValue,0,1)]_DetailMeshRemap("Detail Surface Remap", Vector) = (0,0,0,0)
		[Enum(Main Mask,0,Detail Mask,1)]_DetailMaskMode("Detail Texture Mask", Float) = 0
		[HideInInspector]_DetailMeshMinValue("Detail Surface Min", Range( 0 , 1)) = 0
		[HideInInspector]_DetailMeshMaxValue("Detail Surface Max", Range( 0 , 1)) = 1
		[StyledRemapSlider(_DetailMaskMinValue, _DetailMaskMaxValue,0,1)]_DetailMaskRemap("Detail Texture Remap", Vector) = (0,0,0,0)
		[HideInInspector]_DetailMaskMinValue("Detail Texture Min", Range( 0 , 1)) = 0
		[HideInInspector]_DetailMaskMaxValue("Detail Texture Max", Range( 0 , 1)) = 1
		[HideInInspector]_second_uvs_mode("_second_uvs_mode", Vector) = (0,0,0,0)
		[StyledCategory(Terrain Settings)]_CategoryTerrain("[ Category Terrain ]", Float) = 1
		[StyledMessage(Info, Use the Terrain Layer to blend the object with the terrain surface when using the Terrain Shaders Module. Drag the Terrain to the Copy Settings From Object field to copy the settings to the material., 0, 10)]_MessageTerrain("# Message Terrain", Float) = 0
		[Enum(Off,0,On,1)]_TerrainMode("Terrain Mode", Float) = 0
		[Space(10)]_TerrainBlendOffsetValue("Terrain Blend Offset", Range( 0 , 10)) = 1
		_TerrainBlendNormalValue("Terrain Blend Normals", Range( 0 , 1)) = 1
		[StyledRemapSlider(_TerrainBlendMinValue, _TerrainBlendMaxValue, 0, 1)]_TerrainBlendRemap("Terrain Blend Remap", Vector) = (0,0,0,0)
		[HideInInspector]_TerrainBlendMinValue("Terrain Blend Min", Range( 0 , 1)) = 0.4
		[HideInInspector]_TerrainBlendMaxValue("Terrain Blend Max", Range( 0 , 1)) = 0.6
		[HideInInspector]_TerrainSize("Terrain Size", Vector) = (0,0,0,0)
		[HideInInspector]_TerrainPosition("Terrain Position", Vector) = (0,0,0,0)
		[HideInInspector][Enum(4 Layers,4,8 Layers,8,12 Layers,12,16 Layers,16)]_TerrainLayersMode("Terrain Layers", Float) = 4
		[HideInInspector][Enum(Simple,0,Height,1)]_TerrainBlendMode("Terrain Blend", Float) = 1
		[HideInInspector]_TerrainColor("Terrain Color", Color) = (1,1,1,1)
		[HideInInspector][Enum(Default,0,Packed,1)]_TerrainTexMode("Terrain Maps", Float) = 0
		[HideInInspector]_TerrainNormalValue("Terrain Normal", Range( -8 , 8)) = 1
		[HideInInspector]_TerrainOcclusionValue("Terrain Occlusion", Range( 0 , 1)) = 1
		[HideInInspector]_TerrainSmoothnessValue("Terrain Smoothness", Range( 0 , 1)) = 1
		[HideInInspector]_TerrainHeightBlendValue("Terrain Height Blend", Range( 0 , 1)) = 0
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode1("Layer 01 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode2("Layer 02 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode3("Layer 03 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode4("Layer 04 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode5("Layer 05 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode6("Layer 06 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode7("Layer 07 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode8("Layer 08 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode9("Layer 09 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode10("Layer 10 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode11("Layer 11 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode12("Layer 12 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode13("Layer 13 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode14("Layer 14 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode15("Layer 15 Sample", Float) = 10
		[HideInInspector][Enum(Planar,10,Triplanar,20,Stochastic,30,Stochasitc Triplanar,40)]_LayerSampleMode16("Layer 16 Sample", Float) = 10
		[HideInInspector]_ControlTex1("Control 01", 2D) = "black" {}
		[HideInInspector]_ControlTex2("Control 02", 2D) = "black" {}
		[HideInInspector]_ControlTex3("Control 03", 2D) = "black" {}
		[HideInInspector]_ControlTex4("Control 04", 2D) = "black" {}
		[HideInInspector]_AlbedoTex1("Albedo 01", 2D) = "white" {}
		[HideInInspector]_AlbedoTex2("Albedo 02", 2D) = "white" {}
		[HideInInspector]_AlbedoTex3("Albedo 03", 2D) = "white" {}
		[HideInInspector]_AlbedoTex4("Albedo 04", 2D) = "white" {}
		[HideInInspector]_AlbedoTex5("Albedo 05", 2D) = "white" {}
		[HideInInspector]_AlbedoTex6("Albedo 06", 2D) = "white" {}
		[HideInInspector]_AlbedoTex7("Albedo 07", 2D) = "white" {}
		[HideInInspector]_AlbedoTex8("Albedo 08", 2D) = "white" {}
		[HideInInspector]_AlbedoTex9("Albedo 09", 2D) = "white" {}
		[HideInInspector]_AlbedoTex10("Albedo 10", 2D) = "white" {}
		[HideInInspector]_AlbedoTex11("Albedo 11", 2D) = "white" {}
		[HideInInspector]_AlbedoTex12("Albedo 12", 2D) = "white" {}
		[HideInInspector]_AlbedoTex13("Albedo 13", 2D) = "white" {}
		[HideInInspector]_AlbedoTex14("Albedo 14", 2D) = "white" {}
		[HideInInspector]_AlbedoTex15("Albedo 15", 2D) = "white" {}
		[HideInInspector]_AlbedoTex16("Albedo 16", 2D) = "white" {}
		[HideInInspector]_NormalTex1("Normal 01", 2D) = "gray" {}
		[HideInInspector]_NormalTex2("Normal 02", 2D) = "gray" {}
		[HideInInspector]_NormalTex3("Normal 03", 2D) = "gray" {}
		[HideInInspector]_NormalTex4("Normal 04", 2D) = "gray" {}
		[HideInInspector]_NormalTex5("Normal 05", 2D) = "gray" {}
		[HideInInspector]_NormalTex6("Normal 06", 2D) = "gray" {}
		[HideInInspector]_NormalTex7("Normal 07", 2D) = "gray" {}
		[HideInInspector]_NormalTex8("Normal 08", 2D) = "gray" {}
		[HideInInspector]_NormalTex13("Normal 13", 2D) = "gray" {}
		[HideInInspector]_NormalTex9("Normal 09", 2D) = "gray" {}
		[HideInInspector]_NormalTex10("Normal 10", 2D) = "gray" {}
		[HideInInspector]_NormalTex11("Normal 11", 2D) = "gray" {}
		[HideInInspector]_NormalTex12("Normal 12", 2D) = "gray" {}
		[HideInInspector]_NormalTex14("Normal 14", 2D) = "gray" {}
		[HideInInspector]_NormalTex15("Normal 15", 2D) = "gray" {}
		[HideInInspector]_NormalTex16("Normal 16", 2D) = "gray" {}
		[HideInInspector]_MaskTex1("Mask 01", 2D) = "white" {}
		[HideInInspector]_MaskTex2("Mask 02", 2D) = "white" {}
		[HideInInspector]_MaskTex3("Mask 03", 2D) = "white" {}
		[HideInInspector]_MaskTex4("Mask 04", 2D) = "white" {}
		[HideInInspector]_MaskTex5("Mask 05", 2D) = "white" {}
		[HideInInspector]_MaskTex6("Mask 06", 2D) = "white" {}
		[HideInInspector]_MaskTex7("Mask 07", 2D) = "white" {}
		[HideInInspector]_MaskTex8("Mask 08", 2D) = "white" {}
		[HideInInspector]_MaskTex9("Mask 09", 2D) = "white" {}
		[HideInInspector]_MaskTex10("Mask 10", 2D) = "white" {}
		[HideInInspector]_MaskTex11("Mask 11", 2D) = "white" {}
		[HideInInspector]_MaskTex12("Mask 12", 2D) = "white" {}
		[HideInInspector]_MaskTex13("Mask 13", 2D) = "white" {}
		[HideInInspector]_MaskTex14("Mask 14", 2D) = "white" {}
		[HideInInspector]_MaskTex15("Mask 15", 2D) = "white" {}
		[HideInInspector]_MaskTex16("Mask 16", 2D) = "white" {}
		[HideInInspector]_MaskMin1("Mask Min 01", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax1("Mask Max 01", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin2("Mask Min 02", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax2("Mask Max 02", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin3("Mask Min 03", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax3("Mask Max 03", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin4("Mask Min 04", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax4("Mask Max 04", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin5("Mask Min 05", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax5("Mask Max 05", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin6("Mask Min 06", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax6("Mask Max 06", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin7("Mask Min 07", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax7("Mask Max 07", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin8("Mask Min 08", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax8("Mask Max 08", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin9("Mask Min 09", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax9("Mask Max 09", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin10("Mask Min 10", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax10("Mask Max 10", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin11("Mask Min 11", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax11("Mask Max 11", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin12("Mask Min 12", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax12("Mask Max 12", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin13("Mask Min 13", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax13("Mask Max 13", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin14("Mask Min 14", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax14("Mask Max 14", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin15("Mask Min 15", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax15("Mask Max 15", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMin16("Mask Min 16", Vector) = (0,0,0,0)
		[HideInInspector]_MaskMax16("Mask Max 16", Vector) = (0,0,0,0)
		[HideInInspector]_Params1("Params 01", Vector) = (0,0,0,0)
		[HideInInspector]_Params2("Params 02", Vector) = (0,0,0,0)
		[HideInInspector]_Params3("Params 03", Vector) = (0,0,0,0)
		[HideInInspector]_Params4("Params 04", Vector) = (0,0,0,0)
		[HideInInspector]_Params5("Params 05", Vector) = (0,0,0,0)
		[HideInInspector]_Params6("Params 06", Vector) = (0,0,0,0)
		[HideInInspector]_Params7("Params 07", Vector) = (0,0,0,0)
		[HideInInspector]_Params8("Params 08", Vector) = (0,0,0,0)
		[HideInInspector]_Params9("Params 09", Vector) = (0,0,0,0)
		[HideInInspector]_Params10("Params 10", Vector) = (0,0,0,0)
		[HideInInspector]_Params11("Params 11", Vector) = (0,0,0,0)
		[HideInInspector]_Params12("Params 12", Vector) = (0,0,0,0)
		[HideInInspector]_Params13("Params 13", Vector) = (0,0,0,0)
		[HideInInspector]_Params14("Params 14", Vector) = (0,0,0,0)
		[HideInInspector]_Params15("Params 15", Vector) = (0,0,0,0)
		[HideInInspector]_Params16("Params 16", Vector) = (0,0,0,0)
		[HideInInspector]_Coords1("Coords 01", Vector) = (1,1,0,0)
		[HideInInspector]_Coords2("Coords 02", Vector) = (1,1,0,0)
		[HideInInspector]_Coords3("Coords 03", Vector) = (1,1,0,0)
		[HideInInspector]_Coords5("Coords 05", Vector) = (1,1,0,0)
		[HideInInspector]_Coords4("Coords 04", Vector) = (1,1,0,0)
		[HideInInspector]_Coords6("Coords 06", Vector) = (1,1,0,0)
		[HideInInspector]_Coords7("Coords 07", Vector) = (1,1,0,0)
		[HideInInspector]_Coords8("Coords 08", Vector) = (1,1,0,0)
		[HideInInspector]_Coords9("Coords 09", Vector) = (1,1,0,0)
		[HideInInspector]_Coords10("Coords 10", Vector) = (1,1,0,0)
		[HideInInspector]_Coords11("Coords 11", Vector) = (1,1,0,0)
		[HideInInspector]_Coords12("Coords 12", Vector) = (1,1,0,0)
		[HideInInspector]_Coords13("Coords 13", Vector) = (1,1,0,0)
		[HideInInspector]_Coords14("Coords 14", Vector) = (1,1,0,0)
		[HideInInspector]_Coords15("Coords 15", Vector) = (1,1,0,0)
		[HideInInspector]_Coords16("Coords 16", Vector) = (1,1,0,0)
		[HideInInspector]_Specular1("Specular 01", Color) = (0,0,0,0)
		[HideInInspector]_Specular2("Specular 02", Color) = (0,0,0,0)
		[HideInInspector]_Specular3("Specular 03", Color) = (0,0,0,0)
		[HideInInspector]_Specular4("Specular 04", Color) = (0,0,0,0)
		[HideInInspector]_Specular5("Specular 05", Color) = (0,0,0,0)
		[HideInInspector]_Specular6("Specular 06", Color) = (0,0,0,0)
		[HideInInspector]_Specular7("Specular 07", Color) = (0,0,0,0)
		[HideInInspector]_Specular8("Specular 08", Color) = (0,0,0,0)
		[HideInInspector]_Specular9("Specular 09", Color) = (0,0,0,0)
		[HideInInspector]_Specular10("Specular 10", Color) = (0,0,0,0)
		[HideInInspector]_Specular11("Specular 11", Color) = (0,0,0,0)
		[HideInInspector]_Specular12("Specular 12", Color) = (0,0,0,0)
		[HideInInspector]_Specular13("Specular 13", Color) = (0,0,0,0)
		[HideInInspector]_Specular14("Specular 14", Color) = (0,0,0,0)
		[HideInInspector]_Specular15("Specular 15", Color) = (0,0,0,0)
		[HideInInspector]_Specular16("Specular 16", Color) = (0,0,0,0)
		[StyledCategory(Occlusion Settings)]_CategoryOcclusion("[ Category Occlusion ]", Float) = 1
		[StyledMessage(Info, Use the Occlusion Color for tinting and the Occlusion Alpha as Global Color and Global Overlay mask control. The mask is stored in Vertex Green channel. , 0, 10)]_MessageOcclusion("# Message Occlusion", Float) = 0
		[HDR]_VertexOcclusionColor("Occlusion Color", Color) = (1,1,1,0.5019608)
		[StyledRemapSlider(_VertexOcclusionMinValue, _VertexOcclusionMaxValue, 0, 1, 0, 0)]_VertexOcclusionRemap("Occlusion Remap", Vector) = (0,0,0,0)
		[HideInInspector]_VertexOcclusionMinValue("Occlusion Min", Range( 0 , 1)) = 0
		[HideInInspector]_VertexOcclusionMaxValue("Occlusion Max", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_VertexOcclusionColorsMode("Use Inverted Mask for Colors", Float) = 0
		[StyledToggle]_VertexOcclusionOverlayMode("Use Inverted Mask for Overlay", Float) = 0
		[StyledCategory(Gradient Settings)]_CategoryGradient("[ Category Gradient ]", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,1,1,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (1,1,1,1)
		[StyledRemapSlider(_GradientMinValue, _GradientMaxValue, 0, 1)]_GradientMaskRemap("Gradient Mask Remap", Vector) = (0,0,0,0)
		[HideInInspector]_GradientMinValue("Gradient Mask Min", Range( 0 , 1)) = 0
		[HideInInspector]_GradientMaxValue("Gradient Mask Max ", Range( 0 , 1)) = 1
		[StyledCategory(Noise Settings)]_CategoryNoise("[ Category Noise ]", Float) = 1
		[StyledRemapSlider(_NoiseMinValue, _NoiseMaxValue, 0, 1)]_NoiseMaskRemap("Noise Mask Remap", Vector) = (0,0,0,0)
		[StyledCategory(Subsurface Settings)]_CategorySubsurface("[ Category Subsurface ]", Float) = 1
		[StyledMessage(Info, In HDRP__ the Subsurface Color and Power are fake effects used for artistic control. For physically correct subsurface scattering the Power slider need to be set to 0., 0, 10)]_MessageSubsurface("# Message Subsurface", Float) = 0
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SpaceSubsurface("# SpaceSubsurface", Float) = 0
		_SubsurfaceValue("Subsurface Intensity", Range( 0 , 1)) = 1
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Power", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		_SubsurfaceMaskValue("Subsurface Use Mask", Range( 0 , 1)) = 1
		[StyledCategory(Matcap Settings)]_CategoryMatcap("[ Category Matcap ]", Float) = 1
		[StyledCategory(Rim Light Settings)]_CategoryRimLight("[ Category Rim Light ]", Float) = 1
		[StyledRemapSlider(_RimLightMinValue, _RimLightMaxValue, 0, 1, 0, 0)]_RimLightRemap("Rim Light Remap", Vector) = (0,0,0,0)
		[StyledCategory(Emissive Settings)]_CategoryEmissive("[ Category Emissive]", Float) = 1
		[Enum(Off,0,On,1)]_EmissiveMode("Emissive Mode", Float) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI", Float) = 0
		[NoScaleOffset][Space(10)][StyledTextureSingleLine]_EmissiveTex("Emissive Texture", 2D) = "white" {}
		[Space(10)][StyledVector(9)]_EmissiveUVs("Emissive UVs", Vector) = (1,1,0,0)
		[HDR]_EmissiveColor("Emissive Color", Color) = (0,0,0,0)
		[Enum(Nits,0,EV100,1)]_EmissiveIntensityMode("Emissive Power", Float) = 0
		_EmissiveIntensityValue("Emissive Power", Float) = 1
		_EmissivePhaseValue("Emissive Phase", Range( 0 , 1)) = 1
		[StyledRemapSlider(_EmissiveTexMinValue, _EmissiveTexMaxValue,0,1)]_EmissiveTexRemap("Emissive Remap", Vector) = (0,0,0,0)
		[HideInInspector]_EmissiveTexMinValue("Emissive Mask Min", Range( 0 , 1)) = 0
		[HideInInspector]_EmissiveTexMaxValue("Emissive Mask Max", Range( 0 , 1)) = 1
		[HideInInspector]_emissive_intensity_value("_emissive_intensity_value", Float) = 1
		[StyledCategory(Perspective Settings)]_CategoryPerspective("[ Category Perspective ]", Float) = 1
		_PerspectivePushValue("Perspective Push", Range( 0 , 4)) = 0
		_PerspectiveNoiseValue("Perspective Noise", Range( 0 , 4)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledCategory(Size Fade Settings)]_CategorySizeFade("[ Category Size Fade ]", Float) = 1
		_SizeFadeStartValue("Size Fade Start", Range( 0 , 1000)) = 0
		_SizeFadeEndValue("Size Fade End", Range( 0 , 1000)) = 0
		[StyledCategory(Motion Settings)]_CategoryMotion("[ Category Motion ]", Float) = 1
		[StyledMessage(Info, Procedural variation in use. Use the Scale settings if the Variation is splitting the mesh., 0, 10)]_MessageMotionVariation("# Message Motion Variation", Float) = 0
		[HDR]_MotionHighlightColor("Motion Highlight Color", Color) = (0,0,0,0)
		_MotionFacingValue("Motion Direction Mask", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_SpaceMotionGlobals("# SpaceMotionGlobals", Float) = 0
		_MotionAmplitude_10("Motion Bending", Range( 0 , 2)) = 0.2
		_MotionPosition_10("Motion Rigidity", Range( 0 , 1)) = 0.5
		[IntRange]_MotionSpeed_10("Motion Speed", Range( 0 , 40)) = 2
		_MotionScale_10("Motion Scale", Range( 0 , 20)) = 1
		_MotionVariation_10("Motion Variation", Range( 0 , 20)) = 0
		[Space(10)]_MotionAmplitude_20("Motion Squash", Range( 0 , 2)) = 0.2
		_MotionAmplitude_22("Motion Rolling", Range( 0 , 2)) = 0.2
		[IntRange]_MotionSpeed_20("Motion Speed", Range( 0 , 40)) = 6
		_MotionScale_20("Motion Scale", Range( 0 , 20)) = 3
		_MotionVariation_20("Motion Variation", Range( 0 , 20)) = 0
		[Space(10)]_MotionAmplitude_32("Motion Flutter", Range( 0 , 2)) = 0.2
		[IntRange]_MotionSpeed_32("Motion Speed", Range( 0 , 40)) = 20
		_MotionScale_32("Motion Scale", Range( 0 , 20)) = 10
		_MotionVariation_32("Motion Variation", Range( 0 , 20)) = 0
		[Space(10)]_InteractionAmplitude("Interaction Amplitude", Range( 0 , 2)) = 1
		_InteractionMaskValue("Interaction Use Mask", Range( 0 , 1)) = 0
		[HideInInspector][StyledToggle]_VertexPivotMode("Enable Pre Baked Pivots", Float) = 0
		[HideInInspector][StyledToggle]_VertexDynamicMode("Enable Dynamic Support", Float) = 0
		[HideInInspector]_render_normals("_render_normals", Vector) = (1,1,1,0)
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_MotionValue_21("_MotionValue_20", Float) = 1
		[HideInInspector]_MotionValue_31("_MotionValue_30", Float) = 1
		[HideInInspector]_MaxBoundsInfo("_MaxBoundsInfo", Vector) = (1,1,1,1)
		[HideInInspector]_ColorsMaskMinValue("_ColorsMaskMinValue", Range( 0 , 1)) = 1
		[HideInInspector]_ColorsMaskMaxValue("_ColorsMaskMaxValue", Range( 0 , 1)) = 0
		[HideInInspector]_DetailTypeMode("_DetailTypeMode", Float) = 2
		[HideInInspector]_DetailCoordMode("_DetailCoordMode", Float) = 0
		[HideInInspector]_DetailOpaqueMode("_DetailOpaqueMode", Float) = 0
		[HideInInspector]_DetailMeshInvertMode("_DetailMeshInvertMode", Float) = 0
		[HideInInspector]_DetailMaskInvertMode("_DetailMaskInvertMode", Float) = 0
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_HasEmissive("_HasEmissive", Float) = 0
		[HideInInspector]_HasGradient("_HasGradient", Float) = 0
		[HideInInspector]_HasOcclusion("_HasOcclusion", Float) = 0
		[HideInInspector]_VertexVariationMode("_VertexVariationMode", Float) = 0
		[HideInInspector]_IsVersion("_IsVersion", Float) = 1230
		[HideInInspector]_IsBlanketShader("_IsBlanketShader", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 1
		[HideInInspector]_render_dst("_render_dst", Float) = 0
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsStandardShader("_IsStandardShader", Float) = 1
		[HideInInspector]_IsPlantShader("_IsPlantShader", Float) = 1

		//_TransmissionShadow( "Transmission Shadow", Range( 0, 1 ) ) = 0.5
		//_TransStrength( "Trans Strength", Range( 0, 50 ) ) = 1
		//_TransNormal( "Trans Normal Distortion", Range( 0, 1 ) ) = 0.5
		//_TransScattering( "Trans Scattering", Range( 1, 50 ) ) = 2
		//_TransDirect( "Trans Direct", Range( 0, 1 ) ) = 0.9
		//_TransAmbient( "Trans Ambient", Range( 0, 1 ) ) = 0.1
		//_TransShadow( "Trans Shadow", Range( 0, 1 ) ) = 0.5
		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25
		//[ToggleOff] _SpecularHighlights("Specular Highlights", Float) = 1.0
		//[ToggleOff] _GlossyReflections("Reflections", Float) = 1.0
	}

	SubShader
	{
		
		Tags { "RenderType"="Opaque" "Queue"="Geometry" "DisableBatching"="False" }
	LOD 0

		Cull Off
		AlphaToMask [_render_coverage]
		ZWrite [_render_zw]
		ZTest LEqual
		ColorMask RGBA
		
		Blend Off
		

		CGINCLUDE
		#pragma target 4.5

		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlane (float3 pos, float4 plane)
		{
			float d = dot (float4(pos,1.0f), plane);
			return d;
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlane(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlane(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlane(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlane(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		ENDCG

		
		Pass
		{
			
			Name "ForwardBase"
			Tags { "LightMode"="ForwardBase" }

			Blend [_render_src] [_render_dst]

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_fwdbase
			#ifndef UNITY_PASS_FORWARDBASE
				#define UNITY_PASS_FORWARDBASE
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_COLOR
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_FRAG_WORLD_VIEW_DIR
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local TVE_TERRAIN
			#pragma shader_feature_local TVE_DETAIL
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_HEIGHT_BLEND
			#pragma shader_feature_local_fragment TVE_SAMPLE_01_PLANAR_2D TVE_SAMPLE_01_PLANAR_3D TVE_SAMPLE_01_STOCHASTIC_2D TVE_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_02_PLANAR_2D TVE_SAMPLE_02_PLANAR_3D TVE_SAMPLE_02_STOCHASTIC_2D TVE_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_03_PLANAR_2D TVE_SAMPLE_03_PLANAR_3D TVE_SAMPLE_03_STOCHASTIC_2D TVE_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_04_PLANAR_2D TVE_SAMPLE_04_PLANAR_3D TVE_SAMPLE_04_STOCHASTIC_2D TVE_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_05_PLANAR_2D TVE_SAMPLE_05_PLANAR_3D TVE_SAMPLE_05_STOCHASTIC_2D TVE_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_06_PLANAR_2D TVE_SAMPLE_06_PLANAR_3D TVE_SAMPLE_06_STOCHASTIC_2D TVE_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_07_PLANAR_2D TVE_SAMPLE_07_PLANAR_3D TVE_SAMPLE_07_STOCHASTIC_2D TVE_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_08_PLANAR_2D TVE_SAMPLE_08_PLANAR_3D TVE_SAMPLE_08_STOCHASTIC_2D TVE_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_09_PLANAR_2D TVE_SAMPLE_09_PLANAR_3D TVE_SAMPLE_09_STOCHASTIC_2D TVE_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_10_PLANAR_2D TVE_SAMPLE_10_PLANAR_3D TVE_SAMPLE_10_STOCHASTIC_2D TVE_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_11_PLANAR_2D TVE_SAMPLE_11_PLANAR_3D TVE_SAMPLE_11_STOCHASTIC_2D TVE_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_12_PLANAR_2D TVE_SAMPLE_12_PLANAR_3D TVE_SAMPLE_12_STOCHASTIC_2D TVE_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_13_PLANAR_2D TVE_SAMPLE_13_PLANAR_3D TVE_SAMPLE_13_STOCHASTIC_2D TVE_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_14_PLANAR_2D TVE_SAMPLE_14_PLANAR_3D TVE_SAMPLE_14_STOCHASTIC_2D TVE_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_15_PLANAR_2D TVE_SAMPLE_15_PLANAR_3D TVE_SAMPLE_15_STOCHASTIC_2D TVE_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_16_PLANAR_2D TVE_SAMPLE_16_PLANAR_3D TVE_SAMPLE_16_STOCHASTIC_2D TVE_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_PACKED_TEX
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#define THE_VEGETATION_ENGINE
			#define TVE_IS_STANDARD_PIPELINE
			#define TVE_IS_STANDARD_SHADER
			#define TVE_IS_PLANT_SHADER
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if defined(LIGHTMAP_ON) || (!defined(LIGHTMAP_ON) && SHADER_TARGET >= 30)
					float4 lmap : TEXCOORD0;
				#endif
				#if !defined(LIGHTMAP_ON) && UNITY_SHOULD_SAMPLE_SH
					half3 sh : TEXCOORD1;
				#endif
				#if defined(UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS) && UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(2,3)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(2)
					#else
						SHADOW_COORDS(2)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(4)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_color : COLOR;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float3 ase_normal : NORMAL;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _render_cull;
			uniform half _render_coverage;
			uniform half _render_zw;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _IsStandardShader;
			uniform float _IsPlantShader;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform float _SubsurfaceDiffusion;
			uniform half _Cutoff;
			uniform float4 _MaxBoundsInfo;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderZWrite;
			uniform half _RenderClip;
			uniform half _RenderCull;
			uniform half _RenderQueue;
			uniform half _RenderPriority;
			uniform half _RenderMode;
			uniform half _CategoryRender;
			uniform half _RenderNormals;
			uniform half _MessageGlobalsVariation;
			uniform half _IsTVEShader;
			uniform half _HasOcclusion;
			uniform half _IsIdentifier;
			uniform half _IsCollected;
			uniform half _IsShared;
			uniform half _IsCustomShader;
			uniform half _HasGradient;
			uniform half _HasEmissive;
			uniform half _VertexVariationMode;
			uniform half _IsVersion;
			uniform half _RenderCoverage;
			uniform half _DetailTypeMode;
			uniform half _DetailOpaqueMode;
			uniform half _DetailCoordMode;
			uniform half _SpaceGlobalLocals;
			uniform half _SpaceSubsurface;
			uniform half _CategoryGlobals;
			uniform half _CategoryMain;
			uniform half _CategoryPerspective;
			uniform half _CategorySizeFade;
			uniform half _SpaceRenderFade;
			uniform half _RenderDirect;
			uniform half _RenderAmbient;
			uniform half _RenderShadow;
			uniform half _IsBlanketShader;
			uniform half4 _Color;
			uniform half _CategoryMotion;
			uniform half _MessageMotionVariation;
			uniform half4 _MainMaskRemap;
			uniform half4 _SecondMaskRemap;
			uniform half _CategoryDetail;
			uniform half _CategoryTerrain;
			uniform half _CategoryOcclusion;
			uniform half _CategoryGradient;
			uniform half _CategoryNoise;
			uniform half _CategoryRimLight;
			uniform half _CategoryMatcap;
			uniform half _CategorySubsurface;
			uniform half _CategoryEmissive;
			uniform half _SpaceGlobalLayers;
			uniform half _SpaceGlobalOptions;
			uniform half _SpaceMotionGlobals;
			uniform half _ColorsMaskMinValue;
			uniform half _ColorsMaskMaxValue;
			uniform half _DetailMeshInvertMode;
			uniform half _DetailMaskInvertMode;
			uniform half _MotionValue_31;
			uniform half _MotionValue_21;
			uniform half _MessageMainMask;
			uniform half _MessageSecondMask;
			uniform half4 _DetailBlendRemap;
			uniform half4 _DetailMeshRemap;
			uniform half4 _DetailMaskRemap;
			uniform half4 _VertexOcclusionRemap;
			uniform half4 _GradientMaskRemap;
			uniform half4 _NoiseMaskRemap;
			uniform half4 _RimLightRemap;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceAngleValue;
			uniform half _SubsurfaceScatteringValue;
			uniform half4 _EmissiveTexRemap;
			uniform half _EmissiveMode;
			uniform half _EmissiveIntensityValue;
			uniform half _EmissiveFlagMode;
			uniform half _EmissiveIntensityMode;
			uniform half _MessageSubsurface;
			uniform half _MessageOcclusion;
			uniform half _MessageTerrain;
			uniform half4 _TerrainBlendRemap;
			uniform half _TerrainTexMode;
			uniform half _TerrainBlendMode;
			uniform half _TerrainLayersMode;
			uniform half _LayerSampleMode1;
			uniform half _LayerSampleMode2;
			uniform half _LayerSampleMode3;
			uniform half _LayerSampleMode4;
			uniform half _LayerSampleMode5;
			uniform half _LayerSampleMode6;
			uniform half _LayerSampleMode7;
			uniform half _LayerSampleMode8;
			uniform half _LayerSampleMode9;
			uniform half _LayerSampleMode10;
			uniform half _LayerSampleMode11;
			uniform half _LayerSampleMode12;
			uniform half _LayerSampleMode13;
			uniform half _LayerSampleMode14;
			uniform half _LayerSampleMode15;
			uniform half _LayerSampleMode16;
			uniform half _VertexPivotMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(TVE_NoiseTex);
			uniform float3 TVE_WorldOrigin;
			uniform half _MotionPosition_10;
			uniform float _MotionScale_10;
			uniform half TVE_NoiseTexTilling;
			uniform half4 TVE_MotionParams;
			uniform half4 TVE_TimeParams;
			uniform float _MotionSpeed_10;
			uniform half _MotionVariation_10;
			uniform half _VertexDynamicMode;
			SamplerState sampler_Linear_Repeat;
			uniform half _LayerMotionValue;
			uniform float TVE_MotionUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_MotionTex);
			uniform half4 TVE_MotionCoords;
			SamplerState sampler_Linear_Clamp;
			uniform half4 TVE_WindEditor;
			uniform half _MotionAmplitude_10;
			uniform half TVE_MotionValue_10;
			uniform half _InteractionMaskValue;
			uniform half _InteractionAmplitude;
			uniform half _LayerVertexValue;
			uniform float TVE_VertexUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_VertexTex);
			uniform half4 TVE_VertexCoords;
			uniform half _VertexPositionMode;
			uniform half4 TVE_VertexParams;
			uniform half _GlobalOrientation;
			uniform half _MotionScale_20;
			uniform half _MotionVariation_20;
			uniform half _MotionSpeed_20;
			uniform half _MotionFacingValue;
			uniform half _MotionAmplitude_20;
			uniform half TVE_MotionValue_20;
			uniform half _MotionAmplitude_22;
			uniform float _MotionScale_32;
			uniform float _MotionVariation_32;
			uniform float _MotionSpeed_32;
			uniform half _MotionAmplitude_32;
			uniform half TVE_MotionFadeEnd;
			uniform half TVE_MotionFadeStart;
			uniform half TVE_MotionValue_30;
			uniform half _PerspectivePushValue;
			uniform half _PerspectiveNoiseValue;
			uniform half _PerspectiveAngleValue;
			uniform half _GlobalSize;
			uniform half TVE_DistanceFadeBias;
			uniform half _SizeFadeEndValue;
			uniform half _SizeFadeStartValue;
			uniform half _ConformOffsetMode;
			uniform half _ConformOffsetValue;
			uniform half _GlobalConform;
			uniform half TVE_IsEnabled;
			uniform half _DisableSRPBatcher;
			uniform float _TerrainBlendOffsetValue;
			uniform float _TerrainBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			uniform half4 _MainUVs;
			SamplerState sampler_MainAlbedoTex;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainMaskTex);
			uniform half _MainMaskMinValue;
			uniform half _MainMaskMaxValue;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_uvs_mode;
			uniform half4 _SecondUVs;
			uniform half _SecondUVsScaleMode;
			SamplerState sampler_SecondAlbedoTex;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half _SecondMaskMinValue;
			uniform half _SecondMaskMaxValue;
			uniform half _SecondColorMode;
			uniform half _DetailBlendMode;
			uniform half _DetailMaskMode;
			uniform half _DetailMaskMinValue;
			uniform half _DetailMaskMaxValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _DetailMeshMode;
			uniform half _DetailMeshMinValue;
			uniform half _DetailMeshMaxValue;
			uniform half _DetailBlendMinValue;
			uniform half _DetailBlendMaxValue;
			uniform half _DetailMode;
			uniform half _DetailValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMinValue;
			uniform half _GradientMaxValue;
			uniform half4 _VertexOcclusionColor;
			uniform half _VertexOcclusionMinValue;
			uniform half _VertexOcclusionMaxValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex1);
			uniform half4 _TerrainPosition;
			uniform half4 _TerrainSize;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex1);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _Coords1;
			uniform half4 _MaskMin1;
			uniform half4 _MaskMax1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex2);
			uniform half4 _Coords2;
			uniform half4 _MaskMin2;
			uniform half4 _MaskMax2;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex3);
			uniform half4 _Coords3;
			uniform half4 _MaskMin3;
			uniform half4 _MaskMax3;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex4);
			uniform half4 _Coords4;
			uniform half4 _MaskMin4;
			uniform half4 _MaskMax4;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex5);
			uniform half4 _Coords5;
			uniform half4 _MaskMin5;
			uniform half4 _MaskMax5;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex6);
			uniform half4 _Coords6;
			uniform half4 _MaskMin6;
			uniform half4 _MaskMax6;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex7);
			uniform half4 _Coords7;
			uniform half4 _MaskMin7;
			uniform half4 _MaskMax7;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex8);
			uniform half4 _Coords8;
			uniform half4 _MaskMin8;
			uniform half4 _MaskMax8;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex9);
			uniform half4 _Coords9;
			uniform half4 _MaskMin9;
			uniform half4 _MaskMax9;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex10);
			uniform half4 _Coords10;
			uniform half4 _MaskMin10;
			uniform half4 _MaskMax10;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex11);
			uniform half4 _Coords11;
			uniform half4 _MaskMin11;
			uniform half4 _MaskMax11;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex12);
			uniform half4 _Coords12;
			uniform half4 _MaskMin12;
			uniform half4 _MaskMax12;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex13);
			uniform half4 _Coords13;
			uniform half4 _MaskMin13;
			uniform half4 _MaskMax13;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex14);
			uniform half4 _Coords14;
			uniform half4 _MaskMin14;
			uniform half4 _MaskMax14;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex15);
			uniform half4 _Coords15;
			uniform half4 _MaskMin15;
			uniform half4 _MaskMax15;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex16);
			uniform half4 _Coords16;
			uniform half4 _MaskMin16;
			uniform half4 _MaskMax16;
			uniform half _TerrainHeightBlendValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex1);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex5);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex6);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex7);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex8);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex9);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex10);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex11);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex12);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex13);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex14);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex15);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex16);
			uniform half4 _TerrainColor;
			uniform half _DetailNormalValue;
			uniform half _SecondUVsMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _TerrainMode;
			uniform half _TerrainBlendMinValue;
			uniform half _TerrainBlendMaxValue;
			uniform half _LayerColorsValue;
			uniform float TVE_ColorsUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_ColorsTex);
			uniform half4 TVE_ColorsCoords;
			uniform half _ColorsPositionMode;
			uniform half4 TVE_ColorsParams;
			uniform half _ColorsIntensityValue;
			uniform half4 _Specular1;
			uniform half4 _Specular2;
			uniform half4 _Specular3;
			uniform half4 _Specular4;
			uniform half4 _Specular5;
			uniform half4 _Specular6;
			uniform half4 _Specular7;
			uniform half4 _Specular8;
			uniform half4 _Specular9;
			uniform half4 _Specular10;
			uniform half4 _Specular11;
			uniform half4 _Specular12;
			uniform half4 _Specular13;
			uniform half4 _Specular14;
			uniform half4 _Specular15;
			uniform half4 _Specular16;
			uniform half _GlobalColors;
			uniform half _ColorsVariationValue;
			uniform half _VertexOcclusionColorsMode;
			uniform half4 TVE_OverlayColor;
			uniform half _GlobalOverlay;
			uniform half _LayerExtrasValue;
			uniform float TVE_ExtrasUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_ExtrasTex);
			uniform half4 TVE_ExtrasCoords;
			uniform half _ExtrasPositionMode;
			uniform half4 TVE_ExtrasParams;
			uniform half _OverlayVariationValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex1);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex5);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex6);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex7);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex8);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex9);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex10);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex11);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex12);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex13);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex14);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex15);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex16);
			uniform half4 _Params1;
			uniform half4 _Params2;
			uniform half4 _Params3;
			uniform half4 _Params4;
			uniform half4 _Params5;
			uniform half4 _Params6;
			uniform half4 _Params7;
			uniform half4 _Params8;
			uniform half4 _Params9;
			uniform half4 _Params10;
			uniform half4 _Params11;
			uniform half4 _Params12;
			uniform half4 _Params13;
			uniform half4 _Params14;
			uniform half4 _Params15;
			uniform half4 _Params16;
			uniform half _TerrainNormalValue;
			uniform half _OverlayProjectionValue;
			uniform half _VertexOcclusionOverlayMode;
			uniform half TVE_WetnessContrast;
			uniform half _GlobalWetness;
			uniform half4 _MotionHighlightColor;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceValue;
			uniform half TVE_SubsurfaceValue;
			uniform half TVE_OverlaySubsurface;
			uniform half _SubsurfaceMaskValue;
			uniform half3 TVE_MainLightDirection;
			uniform half TVE_OverlayNormalValue;
			uniform half TVE_WetnessNormalValue;
			uniform half3 _render_normals;
			uniform half4 _EmissiveColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveTex);
			uniform half4 _EmissiveUVs;
			uniform half _EmissiveTexMinValue;
			uniform half _EmissiveTexMaxValue;
			uniform half _GlobalEmissive;
			uniform half _EmissivePhaseValue;
			uniform float _emissive_intensity_value;
			uniform half _RenderSpecular;
			uniform half _MainOcclusionValue;
			uniform half _SecondOcclusionValue;
			uniform half _TerrainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half _SecondSmoothnessValue;
			uniform half _TerrainSmoothnessValue;
			uniform half TVE_OverlaySmoothness;
			uniform half _DetailAlphaMode;
			uniform half _AlphaClipValue;
			uniform half _AlphaVariationValue;
			uniform half _DetailFadeMode;
			uniform half _GlobalAlpha;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xy + Coords.zw;
				ZY = WorldPosition.zy * Coords.xy + Coords.zw; 
				XY = WorldPosition.xy * Coords.xy + Coords.zw;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float3 VertexPosition3588_g84806 = v.vertex.xyz;
				float3 appendResult60_g84814 = (float3(v.ase_texcoord3.x , v.ase_texcoord3.z , v.ase_texcoord3.y));
				half3 Mesh_PivotsData2831_g84806 = ( appendResult60_g84814 * _VertexPivotMode );
				half3 Mesh_PivotsOS2291_g84806 = Mesh_PivotsData2831_g84806;
				float3 temp_output_2283_0_g84806 = ( VertexPosition3588_g84806 - Mesh_PivotsOS2291_g84806 );
				half3 VertexPos40_g84886 = temp_output_2283_0_g84806;
				half3 VertexPos40_g84887 = VertexPos40_g84886;
				float3 appendResult74_g84887 = (float3(VertexPos40_g84887.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g84887 = appendResult74_g84887;
				float3 break84_g84887 = VertexPos40_g84887;
				float3 appendResult81_g84887 = (float3(0.0 , break84_g84887.y , break84_g84887.z));
				half3 VertexPosOtherAxis82_g84887 = appendResult81_g84887;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag3890_g84806 = ase_worldPos;
				float3 WorldPosition3905_g84806 = vertexToFrag3890_g84806;
				float3 WorldPosition_Shifted7477_g84806 = ( WorldPosition3905_g84806 - TVE_WorldOrigin );
				float4x4 break19_g84843 = unity_ObjectToWorld;
				float3 appendResult20_g84843 = (float3(break19_g84843[ 0 ][ 3 ] , break19_g84843[ 1 ][ 3 ] , break19_g84843[ 2 ][ 3 ]));
				float3 temp_output_122_0_g84843 = Mesh_PivotsData2831_g84806;
				float3 PivotsOnly105_g84843 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g84843 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g84845 = ( appendResult20_g84843 + PivotsOnly105_g84843 );
				half3 WorldData19_g84845 = ase_worldPos;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84845 = WorldData19_g84845;
				#else
				float3 staticSwitch14_g84845 = ObjectData20_g84845;
				#endif
				float3 temp_output_114_0_g84843 = staticSwitch14_g84845;
				float3 vertexToFrag4224_g84806 = temp_output_114_0_g84843;
				float3 ObjectPosition4223_g84806 = vertexToFrag4224_g84806;
				float3 ObjectPosition_Shifted7481_g84806 = ( ObjectPosition4223_g84806 - TVE_WorldOrigin );
				float3 lerpResult6766_g84806 = lerp( WorldPosition_Shifted7477_g84806 , ObjectPosition_Shifted7481_g84806 , _MotionPosition_10);
				float3 Motion_10_Position6738_g84806 = lerpResult6766_g84806;
				half3 Input_Position419_g84851 = Motion_10_Position6738_g84806;
				float Input_MotionScale287_g84851 = ( _MotionScale_10 + 0.2 );
				half NoiseTex_Tilling735_g84851 = TVE_NoiseTexTilling;
				float2 temp_output_597_0_g84851 = (( Input_Position419_g84851 * Input_MotionScale287_g84851 * NoiseTex_Tilling735_g84851 * 0.0075 )).xz;
				float2 temp_output_447_0_g84811 = ((TVE_MotionParams).xy*2.0 + -1.0);
				half2 Global_Wind_DirectionWS4683_g84806 = temp_output_447_0_g84811;
				half2 Input_DirectionWS423_g84851 = Global_Wind_DirectionWS4683_g84806;
				float lerpResult128_g84852 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84851 = _MotionSpeed_10;
				half Input_MotionVariation284_g84851 = _MotionVariation_10;
				half3 Input_Position167_g84900 = ObjectPosition_Shifted7481_g84806;
				float dotResult156_g84900 = dot( (Input_Position167_g84900).xz , float2( 12.9898,78.233 ) );
				half Vertex_DynamicMode5112_g84806 = _VertexDynamicMode;
				half Input_DynamicMode120_g84900 = Vertex_DynamicMode5112_g84806;
				float Postion_Random162_g84900 = ( sin( dotResult156_g84900 ) * ( 1.0 - Input_DynamicMode120_g84900 ) );
				float Mesh_Variation16_g84806 = v.ase_color.r;
				half Input_Variation124_g84900 = Mesh_Variation16_g84806;
				half ObjectData20_g84902 = frac( ( Postion_Random162_g84900 + Input_Variation124_g84900 ) );
				half WorldData19_g84902 = Input_Variation124_g84900;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84902 = WorldData19_g84902;
				#else
				float staticSwitch14_g84902 = ObjectData20_g84902;
				#endif
				float temp_output_112_0_g84900 = staticSwitch14_g84902;
				float clampResult171_g84900 = clamp( temp_output_112_0_g84900 , 0.01 , 0.99 );
				float Global_MeshVariation5104_g84806 = clampResult171_g84900;
				half Input_GlobalMeshVariation569_g84851 = Global_MeshVariation5104_g84806;
				float temp_output_630_0_g84851 = ( ( ( lerpResult128_g84852 * Input_MotionSpeed62_g84851 ) + ( Input_MotionVariation284_g84851 * Input_GlobalMeshVariation569_g84851 ) ) * 0.03 );
				float temp_output_607_0_g84851 = frac( temp_output_630_0_g84851 );
				float4 lerpResult590_g84851 = lerp( SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( temp_output_597_0_g84851 + ( -Input_DirectionWS423_g84851 * temp_output_607_0_g84851 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( temp_output_597_0_g84851 + ( -Input_DirectionWS423_g84851 * frac( ( temp_output_630_0_g84851 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_607_0_g84851 - 0.5 ) ) / 0.5 ));
				half4 Noise_Complex703_g84851 = lerpResult590_g84851;
				float2 temp_output_645_0_g84851 = ((Noise_Complex703_g84851).rg*2.0 + -1.0);
				float2 break650_g84851 = temp_output_645_0_g84851;
				float3 appendResult649_g84851 = (float3(break650_g84851.x , 0.0 , break650_g84851.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Global_Noise_OS5548_g84806 = (( mul( unity_WorldToObject, float4( appendResult649_g84851 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_Noise_DirectionOS487_g84866 = Global_Noise_OS5548_g84806;
				float2 break448_g84811 = temp_output_447_0_g84811;
				float3 appendResult452_g84811 = (float3(break448_g84811.x , 0.0 , break448_g84811.y));
				half2 Global_Wind_DirectionOS5692_g84806 = (( mul( unity_WorldToObject, float4( appendResult452_g84811 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_Wind_DirectionOS458_g84866 = Global_Wind_DirectionOS5692_g84806;
				float temp_output_84_0_g84815 = _LayerMotionValue;
				float temp_output_19_0_g84819 = TVE_MotionUsage[(int)temp_output_84_0_g84815];
				float4 temp_output_91_19_g84815 = TVE_MotionCoords;
				half2 UV94_g84815 = ( (temp_output_91_19_g84815).zw + ( (temp_output_91_19_g84815).xy * (ObjectPosition4223_g84806).xz ) );
				float4 tex2DArrayNode50_g84815 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_MotionTex, sampler_Linear_Clamp, float3(UV94_g84815,temp_output_84_0_g84815), 0.0 );
				float4 temp_output_17_0_g84819 = tex2DArrayNode50_g84815;
				float4 temp_output_112_19_g84815 = TVE_MotionParams;
				float4 temp_output_3_0_g84819 = temp_output_112_19_g84815;
				float4 ifLocalVar18_g84819 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84819 >= 0.5 )
				ifLocalVar18_g84819 = temp_output_17_0_g84819;
				else
				ifLocalVar18_g84819 = temp_output_3_0_g84819;
				float4 lerpResult22_g84819 = lerp( temp_output_3_0_g84819 , temp_output_17_0_g84819 , temp_output_19_0_g84819);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84819 = lerpResult22_g84819;
				#else
				float4 staticSwitch24_g84819 = ifLocalVar18_g84819;
				#endif
				half4 Global_Motion_Params3909_g84806 = staticSwitch24_g84819;
				float4 break322_g84811 = Global_Motion_Params3909_g84806;
				float lerpResult457_g84811 = lerp( break322_g84811.z , TVE_WindEditor.z , TVE_WindEditor.w);
				float temp_output_459_0_g84811 = ( 1.0 - lerpResult457_g84811 );
				half Global_Wind_Power2223_g84806 = ( 1.0 - ( temp_output_459_0_g84811 * temp_output_459_0_g84811 ) );
				half Input_WindPower449_g84866 = Global_Wind_Power2223_g84806;
				float2 lerpResult516_g84866 = lerp( Input_Noise_DirectionOS487_g84866 , Input_Wind_DirectionOS458_g84866 , ( Input_WindPower449_g84866 * 0.6 ));
				half Mesh_Motion_107613_g84806 = v.ase_color.a;
				half Input_MeshHeight388_g84866 = Mesh_Motion_107613_g84806;
				half ObjectData20_g84867 = Input_MeshHeight388_g84866;
				float enc62_g84861 = v.ase_texcoord.w;
				float2 localDecodeFloatToVector262_g84861 = DecodeFloatToVector2( enc62_g84861 );
				float2 break63_g84861 = ( localDecodeFloatToVector262_g84861 * 100.0 );
				float Bounds_Height5230_g84806 = break63_g84861.x;
				half Input_BoundsHeight390_g84866 = Bounds_Height5230_g84806;
				half WorldData19_g84867 = ( Input_MeshHeight388_g84866 * Input_MeshHeight388_g84866 * Input_BoundsHeight390_g84866 );
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84867 = WorldData19_g84867;
				#else
				float staticSwitch14_g84867 = ObjectData20_g84867;
				#endif
				half Final_Motion10_Mask321_g84866 = ( staticSwitch14_g84867 * 2.0 );
				half Motion_10_Amplitude2258_g84806 = _MotionAmplitude_10;
				half Input_BendingAmplitude376_g84866 = Motion_10_Amplitude2258_g84806;
				half Global_MotionValue640_g84866 = TVE_MotionValue_10;
				half2 Final_Bending631_g84866 = ( lerpResult516_g84866 * ( Final_Motion10_Mask321_g84866 * Input_BendingAmplitude376_g84866 * Input_WindPower449_g84866 * Input_WindPower449_g84866 * Global_MotionValue640_g84866 ) );
				float2 appendResult433_g84811 = (float2(break322_g84811.x , break322_g84811.y));
				float2 temp_output_436_0_g84811 = (appendResult433_g84811*2.0 + -1.0);
				float2 break441_g84811 = temp_output_436_0_g84811;
				float3 appendResult440_g84811 = (float3(break441_g84811.x , 0.0 , break441_g84811.y));
				half2 Global_React_DirectionOS39_g84806 = (( mul( unity_WorldToObject, float4( appendResult440_g84811 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_React_DirectionOS358_g84866 = Global_React_DirectionOS39_g84806;
				float clampResult17_g84869 = clamp( Input_MeshHeight388_g84866 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84868 = 0.0;
				half Input_InteractionUseMask62_g84866 = _InteractionMaskValue;
				float temp_output_10_0_g84868 = ( Input_InteractionUseMask62_g84866 - temp_output_7_0_g84868 );
				half Final_InteractionRemap594_g84866 = saturate( ( ( clampResult17_g84869 - temp_output_7_0_g84868 ) / ( temp_output_10_0_g84868 + 0.0001 ) ) );
				half ObjectData20_g84870 = Final_InteractionRemap594_g84866;
				half WorldData19_g84870 = ( Final_InteractionRemap594_g84866 * Final_InteractionRemap594_g84866 * Input_BoundsHeight390_g84866 );
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84870 = WorldData19_g84870;
				#else
				float staticSwitch14_g84870 = ObjectData20_g84870;
				#endif
				half Final_InteractionMask373_g84866 = ( staticSwitch14_g84870 * 2.0 );
				half Interaction_Amplitude7501_g84806 = _InteractionAmplitude;
				half Input_InteractionAmplitude58_g84866 = Interaction_Amplitude7501_g84806;
				half2 Final_Interaction632_g84866 = ( Input_React_DirectionOS358_g84866 * Final_InteractionMask373_g84866 * Input_InteractionAmplitude58_g84866 );
				half Global_Interaction_Mask66_g84806 = ( break322_g84811.w * break322_g84811.w * break322_g84811.w * break322_g84811.w );
				float Input_InteractionGlobalMask330_g84866 = Global_Interaction_Mask66_g84806;
				half Final_InteractionValue525_g84866 = saturate( ( Input_InteractionAmplitude58_g84866 * Input_InteractionGlobalMask330_g84866 ) );
				float2 lerpResult551_g84866 = lerp( Final_Bending631_g84866 , Final_Interaction632_g84866 , Final_InteractionValue525_g84866);
				float2 break364_g84866 = lerpResult551_g84866;
				float3 appendResult638_g84866 = (float3(break364_g84866.x , 0.0 , break364_g84866.y));
				half3 Motion_10_Interaction7519_g84806 = appendResult638_g84866;
				float temp_output_84_0_g84835 = _LayerVertexValue;
				float temp_output_19_0_g84839 = TVE_VertexUsage[(int)temp_output_84_0_g84835];
				float4 temp_output_94_19_g84835 = TVE_VertexCoords;
				float3 lerpResult7575_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _VertexPositionMode);
				half2 UV97_g84835 = ( (temp_output_94_19_g84835).zw + ( (temp_output_94_19_g84835).xy * (lerpResult7575_g84806).xz ) );
				float4 tex2DArrayNode50_g84835 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_VertexTex, sampler_Linear_Clamp, float3(UV97_g84835,temp_output_84_0_g84835), 0.0 );
				float4 temp_output_17_0_g84839 = tex2DArrayNode50_g84835;
				float4 temp_output_111_19_g84835 = TVE_VertexParams;
				float4 temp_output_3_0_g84839 = temp_output_111_19_g84835;
				float4 ifLocalVar18_g84839 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84839 >= 0.5 )
				ifLocalVar18_g84839 = temp_output_17_0_g84839;
				else
				ifLocalVar18_g84839 = temp_output_3_0_g84839;
				float4 lerpResult22_g84839 = lerp( temp_output_3_0_g84839 , temp_output_17_0_g84839 , temp_output_19_0_g84839);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84839 = lerpResult22_g84839;
				#else
				float4 staticSwitch24_g84839 = ifLocalVar18_g84839;
				#endif
				half4 Global_Vertex_Params4173_g84806 = staticSwitch24_g84839;
				float4 break322_g84873 = Global_Vertex_Params4173_g84806;
				float2 appendResult355_g84873 = (float2(break322_g84873.x , break322_g84873.y));
				float2 temp_output_356_0_g84873 = (appendResult355_g84873*2.0 + -1.0);
				float2 break357_g84873 = temp_output_356_0_g84873;
				float3 appendResult361_g84873 = (float3(break357_g84873.x , 0.0 , break357_g84873.y));
				half2 Global_VertexOrientationOS7550_g84806 = (( mul( unity_WorldToObject, float4( appendResult361_g84873 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult7535_g84806 = lerp( float2( 0,0 ) , Global_VertexOrientationOS7550_g84806 , _GlobalOrientation);
				float2 break7552_g84806 = lerpResult7535_g84806;
				float3 appendResult7553_g84806 = (float3(break7552_g84806.x , 0.0 , break7552_g84806.y));
				half3 Vertex_Orientation7542_g84806 = appendResult7553_g84806;
				half3 Angle44_g84886 = ( Motion_10_Interaction7519_g84806 + Vertex_Orientation7542_g84806 );
				half Angle44_g84887 = (Angle44_g84886).z;
				half3 VertexPos40_g84888 = ( VertexPosRotationAxis50_g84887 + ( VertexPosOtherAxis82_g84887 * cos( Angle44_g84887 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g84887 ) * sin( Angle44_g84887 ) ) );
				float3 appendResult74_g84888 = (float3(0.0 , 0.0 , VertexPos40_g84888.z));
				half3 VertexPosRotationAxis50_g84888 = appendResult74_g84888;
				float3 break84_g84888 = VertexPos40_g84888;
				float3 appendResult81_g84888 = (float3(break84_g84888.x , break84_g84888.y , 0.0));
				half3 VertexPosOtherAxis82_g84888 = appendResult81_g84888;
				half Angle44_g84888 = -(Angle44_g84886).x;
				half3 Input_Position419_g84859 = WorldPosition_Shifted7477_g84806;
				float3 break459_g84859 = Input_Position419_g84859;
				float Sum_Position446_g84859 = ( break459_g84859.x + break459_g84859.y + break459_g84859.z );
				half Input_MotionScale321_g84859 = ( _MotionScale_20 * 0.1 );
				half Input_MotionVariation330_g84859 = _MotionVariation_20;
				half Input_GlobalVariation400_g84859 = Global_MeshVariation5104_g84806;
				float lerpResult128_g84860 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84859 = _MotionSpeed_20;
				float temp_output_404_0_g84859 = ( lerpResult128_g84860 * Input_MotionSpeed62_g84859 );
				half Motion_SineA450_g84859 = sin( ( ( Sum_Position446_g84859 * Input_MotionScale321_g84859 ) + ( Input_MotionVariation330_g84859 * Input_GlobalVariation400_g84859 ) + temp_output_404_0_g84859 ) );
				half Motion_SineB395_g84859 = sin( ( ( temp_output_404_0_g84859 * 0.6842 ) + ( Sum_Position446_g84859 * Input_MotionScale321_g84859 ) ) );
				half3 Input_Position419_g84898 = VertexPosition3588_g84806;
				float3 normalizeResult518_g84898 = normalize( Input_Position419_g84898 );
				half2 Input_DirectionOS423_g84898 = Global_React_DirectionOS39_g84806;
				float2 break521_g84898 = -Input_DirectionOS423_g84898;
				float3 appendResult522_g84898 = (float3(break521_g84898.x , 0.0 , break521_g84898.y));
				float dotResult519_g84898 = dot( normalizeResult518_g84898 , appendResult522_g84898 );
				half Input_Value62_g84898 = _MotionFacingValue;
				float lerpResult524_g84898 = lerp( 1.0 , (dotResult519_g84898*0.5 + 0.5) , Input_Value62_g84898);
				half ObjectData20_g84899 = max( lerpResult524_g84898 , 0.001 );
				half WorldData19_g84899 = 1.0;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84899 = WorldData19_g84899;
				#else
				float staticSwitch14_g84899 = ObjectData20_g84899;
				#endif
				half Motion_FacingMask5214_g84806 = staticSwitch14_g84899;
				half Motion_20_Amplitude4381_g84806 = Motion_FacingMask5214_g84806;
				half Input_MotionAmplitude384_g84859 = Motion_20_Amplitude4381_g84806;
				half Input_GlobalWind407_g84859 = Global_Wind_Power2223_g84806;
				float4 break638_g84851 = abs( Noise_Complex703_g84851 );
				half Global_Noise_B5526_g84806 = break638_g84851.b;
				half Input_GlobalNoise411_g84859 = Global_Noise_B5526_g84806;
				float lerpResult413_g84859 = lerp( 1.8 , 0.4 , Input_GlobalWind407_g84859);
				half Motion_Amplitude418_g84859 = ( Input_MotionAmplitude384_g84859 * Input_GlobalWind407_g84859 * pow( Input_GlobalNoise411_g84859 , lerpResult413_g84859 ) );
				half Input_Squash58_g84859 = _MotionAmplitude_20;
				float enc59_g84861 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector259_g84861 = DecodeFloatToVector2( enc59_g84861 );
				float2 break61_g84861 = localDecodeFloatToVector259_g84861;
				half Mesh_Motion_2060_g84806 = break61_g84861.x;
				half Input_MeshMotion_20388_g84859 = Mesh_Motion_2060_g84806;
				float Bounds_Radius5231_g84806 = break63_g84861.y;
				half Input_BoundsRadius390_g84859 = Bounds_Radius5231_g84806;
				half Global_MotionValue462_g84859 = TVE_MotionValue_20;
				half2 Input_DirectionOS366_g84859 = Global_React_DirectionOS39_g84806;
				float2 break371_g84859 = Input_DirectionOS366_g84859;
				float3 appendResult372_g84859 = (float3(break371_g84859.x , ( Motion_SineA450_g84859 * 0.3 ) , break371_g84859.y));
				half3 Motion_20_Squash4418_g84806 = ( ( (max( Motion_SineA450_g84859 , Motion_SineB395_g84859 )*0.5 + 0.5) * Motion_Amplitude418_g84859 * Input_Squash58_g84859 * Input_MeshMotion_20388_g84859 * Input_BoundsRadius390_g84859 * Global_MotionValue462_g84859 ) * appendResult372_g84859 );
				half3 VertexPos40_g84876 = ( ( VertexPosRotationAxis50_g84888 + ( VertexPosOtherAxis82_g84888 * cos( Angle44_g84888 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g84888 ) * sin( Angle44_g84888 ) ) ) + Motion_20_Squash4418_g84806 );
				float3 appendResult74_g84876 = (float3(0.0 , VertexPos40_g84876.y , 0.0));
				float3 VertexPosRotationAxis50_g84876 = appendResult74_g84876;
				float3 break84_g84876 = VertexPos40_g84876;
				float3 appendResult81_g84876 = (float3(break84_g84876.x , 0.0 , break84_g84876.z));
				float3 VertexPosOtherAxis82_g84876 = appendResult81_g84876;
				half Input_Rolling379_g84859 = _MotionAmplitude_22;
				half Motion_20_Rolling5257_g84806 = ( Motion_SineA450_g84859 * Motion_Amplitude418_g84859 * Input_Rolling379_g84859 * Input_MeshMotion_20388_g84859 * Global_MotionValue462_g84859 );
				half Angle44_g84876 = Motion_20_Rolling5257_g84806;
				half3 Input_Position500_g84855 = WorldPosition_Shifted7477_g84806;
				half Input_MotionScale321_g84855 = _MotionScale_32;
				half Input_MotionVariation330_g84855 = _MotionVariation_32;
				half Input_GlobalVariation372_g84855 = Global_MeshVariation5104_g84806;
				float lerpResult128_g84856 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84855 = _MotionSpeed_32;
				float4 tex2DNode460_g84855 = SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g84855).xz * Input_MotionScale321_g84855 * 0.03 ) + ( Input_MotionVariation330_g84855 * Input_GlobalVariation372_g84855 ) + ( lerpResult128_g84856 * Input_MotionSpeed62_g84855 * 0.02 ) ), 0.0 );
				float3 appendResult462_g84855 = (float3(tex2DNode460_g84855.r , tex2DNode460_g84855.g , tex2DNode460_g84855.b));
				half3 Flutter_Texture489_g84855 = (appendResult462_g84855*2.0 + -1.0);
				float temp_output_7_0_g84841 = TVE_MotionFadeEnd;
				float temp_output_10_0_g84841 = ( TVE_MotionFadeStart - temp_output_7_0_g84841 );
				half Motion_FadeOut4005_g84806 = saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g84841 ) / ( temp_output_10_0_g84841 + 0.0001 ) ) );
				half Motion_30_Amplitude4960_g84806 = ( _MotionAmplitude_32 * Motion_FacingMask5214_g84806 * Motion_FadeOut4005_g84806 );
				half Input_MotionAmplitude58_g84855 = Motion_30_Amplitude4960_g84806;
				half Mesh_Motion_30144_g84806 = break61_g84861.y;
				half Input_MeshMotion_30374_g84855 = Mesh_Motion_30144_g84806;
				half Input_GlobalWind471_g84855 = Global_Wind_Power2223_g84806;
				half Global_MotionValue503_g84855 = TVE_MotionValue_30;
				half Input_GlobalNoise472_g84855 = Global_Noise_B5526_g84806;
				float lerpResult466_g84855 = lerp( 2.4 , 0.6 , Input_GlobalWind471_g84855);
				half Flutter_Amplitude491_g84855 = ( Input_MotionAmplitude58_g84855 * Input_MeshMotion_30374_g84855 * Input_GlobalWind471_g84855 * Global_MotionValue503_g84855 * pow( Input_GlobalNoise472_g84855 , lerpResult466_g84855 ) );
				half3 Motion_30_Flutter263_g84806 = ( Flutter_Texture489_g84855 * Flutter_Amplitude491_g84855 );
				float3 Vertex_Motion_Object833_g84806 = ( ( VertexPosRotationAxis50_g84876 + ( VertexPosOtherAxis82_g84876 * cos( Angle44_g84876 ) ) + ( cross( float3(0,1,0) , VertexPosOtherAxis82_g84876 ) * sin( Angle44_g84876 ) ) ) + Motion_30_Flutter263_g84806 );
				half3 ObjectData20_g84877 = Vertex_Motion_Object833_g84806;
				float3 temp_output_3474_0_g84806 = ( VertexPosition3588_g84806 - Mesh_PivotsOS2291_g84806 );
				float3 Vertex_Motion_World1118_g84806 = ( ( ( temp_output_3474_0_g84806 + ( Motion_10_Interaction7519_g84806 + Vertex_Orientation7542_g84806 ) ) + Motion_20_Squash4418_g84806 ) + Motion_30_Flutter263_g84806 );
				half3 WorldData19_g84877 = Vertex_Motion_World1118_g84806;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84877 = WorldData19_g84877;
				#else
				float3 staticSwitch14_g84877 = ObjectData20_g84877;
				#endif
				float3 temp_output_7495_0_g84806 = staticSwitch14_g84877;
				float3 Vertex_Motion7493_g84806 = temp_output_7495_0_g84806;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = normalize(ase_worldViewDir);
				float3 normalizeResult2169_g84806 = normalize( ase_worldViewDir );
				float3 ViewDirection3963_g84806 = normalizeResult2169_g84806;
				float3 break2709_g84806 = cross( ViewDirection3963_g84806 , half3(0,1,0) );
				float3 appendResult2710_g84806 = (float3(-break2709_g84806.z , 0.0 , break2709_g84806.x));
				float3 appendResult2667_g84806 = (float3(Global_MeshVariation5104_g84806 , 0.5 , Global_MeshVariation5104_g84806));
				half Mesh_Height1524_g84806 = v.ase_color.a;
				float dotResult2212_g84806 = dot( ViewDirection3963_g84806 , float3(0,1,0) );
				half Mask_HView2656_g84806 = dotResult2212_g84806;
				float saferPower2652_g84806 = abs( Mask_HView2656_g84806 );
				half3 Grass_Perspective2661_g84806 = ( ( ( mul( unity_WorldToObject, float4( appendResult2710_g84806 , 0.0 ) ).xyz * _PerspectivePushValue ) + ( (appendResult2667_g84806*2.0 + -1.0) * _PerspectiveNoiseValue ) ) * Mesh_Height1524_g84806 * pow( saferPower2652_g84806 , _PerspectiveAngleValue ) );
				half Global_VertexSize174_g84806 = saturate( break322_g84873.w );
				float lerpResult346_g84806 = lerp( 1.0 , Global_VertexSize174_g84806 , _GlobalSize);
				float3 appendResult3480_g84806 = (float3(lerpResult346_g84806 , lerpResult346_g84806 , lerpResult346_g84806));
				half3 ObjectData20_g84880 = appendResult3480_g84806;
				half3 _Vector11 = half3(1,1,1);
				half3 WorldData19_g84880 = _Vector11;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84880 = WorldData19_g84880;
				#else
				float3 staticSwitch14_g84880 = ObjectData20_g84880;
				#endif
				half3 Vertex_Size1741_g84806 = staticSwitch14_g84880;
				float temp_output_7_0_g84881 = _SizeFadeEndValue;
				float temp_output_10_0_g84881 = ( _SizeFadeStartValue - temp_output_7_0_g84881 );
				float temp_output_7453_0_g84806 = saturate( ( ( ( distance( _WorldSpaceCameraPos , ObjectPosition4223_g84806 ) * ( 1.0 / TVE_DistanceFadeBias ) ) - temp_output_7_0_g84881 ) / ( temp_output_10_0_g84881 + 0.0001 ) ) );
				float3 appendResult3482_g84806 = (float3(temp_output_7453_0_g84806 , temp_output_7453_0_g84806 , temp_output_7453_0_g84806));
				half3 ObjectData20_g84879 = appendResult3482_g84806;
				half3 _Vector5 = half3(1,1,1);
				half3 WorldData19_g84879 = _Vector5;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84879 = WorldData19_g84879;
				#else
				float3 staticSwitch14_g84879 = ObjectData20_g84879;
				#endif
				float3 Vertex_SizeFade1740_g84806 = staticSwitch14_g84879;
				half Global_VertexOffset7549_g84806 = break322_g84873.z;
				float3 ase_objectScale = float3( length( unity_ObjectToWorld[ 0 ].xyz ), length( unity_ObjectToWorld[ 1 ].xyz ), length( unity_ObjectToWorld[ 2 ].xyz ) );
				float3 appendResult7547_g84806 = (float3(0.0 , ( ( ( ( Global_VertexOffset7549_g84806 - ( (ObjectPosition_Shifted7481_g84806).y * _ConformOffsetMode ) ) + _ConformOffsetValue ) / ase_objectScale.y ) * _GlobalConform ) , 0.0));
				half3 Vertex_Offset7544_g84806 = appendResult7547_g84806;
				float3 lerpResult16_g84882 = lerp( VertexPosition3588_g84806 , ( ( ( Vertex_Motion7493_g84806 + Grass_Perspective2661_g84806 ) * Vertex_Size1741_g84806 * Vertex_SizeFade1740_g84806 ) + Mesh_PivotsOS2291_g84806 + Vertex_Offset7544_g84806 ) , TVE_IsEnabled);
				float3 temp_output_4912_0_g84806 = lerpResult16_g84882;
				float3 Final_VertexPosition890_g84806 = ( temp_output_4912_0_g84806 + _DisableSRPBatcher );
				
				half2 Global_VertexOrientationWS7551_g84806 = temp_output_356_0_g84873;
				float2 break7779_g84806 = Global_VertexOrientationWS7551_g84806;
				float dotResult8067_g84806 = dot( Global_VertexOrientationWS7551_g84806 , Global_VertexOrientationWS7551_g84806 );
				float3 appendResult7781_g84806 = (float3(break7779_g84806.x , sqrt( ( 1.0 - saturate( dotResult8067_g84806 ) ) ) , break7779_g84806.y));
				float3 normalizeResult8063_g84806 = normalize( appendResult7781_g84806 );
				float3 worldToObjDir7782_g84806 = ASESafeNormalize( mul( unity_WorldToObject, float4( normalizeResult8063_g84806, 0 ) ).xyz );
				half Terrain_Blend_Offset8086_g84806 = _TerrainBlendOffsetValue;
				half Terrain_Mask_Vertex8085_g84806 = saturate( ( ( Global_VertexOffset7549_g84806 + ( Terrain_Blend_Offset8086_g84806 * _TerrainBlendNormalValue ) ) - (WorldPosition_Shifted7477_g84806).y ) );
				float3 lerpResult7784_g84806 = lerp( v.normal , worldToObjDir7782_g84806 , Terrain_Mask_Vertex8085_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7896_g84806 = lerpResult7784_g84806;
				#else
				float3 staticSwitch7896_g84806 = v.normal;
				#endif
				
				float4 break33_g84872 = _second_uvs_mode;
				float2 temp_output_30_0_g84872 = ( v.ase_texcoord.xy * break33_g84872.x );
				float2 appendResult21_g84861 = (float2(v.texcoord1.xyzw.z , v.texcoord1.xyzw.w));
				float2 Mesh_DetailCoord3_g84806 = appendResult21_g84861;
				float2 temp_output_29_0_g84872 = ( Mesh_DetailCoord3_g84806 * break33_g84872.y );
				float2 temp_output_31_0_g84872 = ( (WorldPosition_Shifted7477_g84806).xz * break33_g84872.z );
				half2 Second_UVs_Tilling7656_g84806 = (_SecondUVs).xy;
				half2 Second_UVs_Scale7664_g84806 = ( 1.0 / Second_UVs_Tilling7656_g84806 );
				float2 lerpResult7660_g84806 = lerp( Second_UVs_Tilling7656_g84806 , Second_UVs_Scale7664_g84806 , _SecondUVsScaleMode);
				half2 Second_UVs_Offset7657_g84806 = (_SecondUVs).zw;
				float2 vertexToFrag11_g84871 = ( ( ( temp_output_30_0_g84872 + temp_output_29_0_g84872 + temp_output_31_0_g84872 ) * lerpResult7660_g84806 ) + Second_UVs_Offset7657_g84806 );
				o.ase_texcoord10.xy = vertexToFrag11_g84871;
				float vertexToFrag11_g84941 = saturate( ( ( Global_VertexOffset7549_g84806 + Terrain_Blend_Offset8086_g84806 ) - (WorldPosition_Shifted7477_g84806).y ) );
				o.ase_texcoord10.z = vertexToFrag11_g84941;
				o.ase_texcoord11.xyz = vertexToFrag3890_g84806;
				o.ase_texcoord12.xyz = vertexToFrag4224_g84806;
				half Global_Noise_A4860_g84806 = break638_g84851.a;
				half Tint_Highlight_Value3231_g84806 = ( Global_Noise_A4860_g84806 * Global_Wind_Power2223_g84806 * Motion_FadeOut4005_g84806 * Mesh_Height1524_g84806 );
				float vertexToFrag11_g84914 = Tint_Highlight_Value3231_g84806;
				o.ase_texcoord10.w = vertexToFrag11_g84914;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_color = v.ase_color;
				o.ase_normal = v.normal;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = Final_VertexPosition890_g84806;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = staticSwitch7896_g84806;
				v.tangent = v.tangent;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#ifdef DYNAMICLIGHTMAP_ON
				o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#endif
				#ifdef LIGHTMAP_ON
				o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				#endif

				#ifndef LIGHTMAP_ON
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						o.sh = 0;
						#ifdef VERTEXLIGHT_ON
						o.sh += Shade4PointLights (
							unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
							unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
							unity_4LightAtten0, worldPos, worldNormal);
						#endif
						o.sh = ShadeSHPerVertex (worldNormal, o.sh);
					#endif
				#endif

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif

				half2 Main_UVs15_g84806 = ( ( IN.ase_texcoord9.xy * (_MainUVs).xy ) + (_MainUVs).zw );
				float4 tex2DNode29_g84806 = SAMPLE_TEXTURE2D( _MainAlbedoTex, sampler_MainAlbedoTex, Main_UVs15_g84806 );
				float3 lerpResult6223_g84806 = lerp( float3( 1,1,1 ) , (tex2DNode29_g84806).rgb , _MainAlbedoValue);
				float4 tex2DNode35_g84806 = SAMPLE_TEXTURE2D( _MainMaskTex, sampler_Linear_Repeat, Main_UVs15_g84806 );
				half Main_Mask57_g84806 = tex2DNode35_g84806.b;
				float clampResult17_g84892 = clamp( Main_Mask57_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84893 = _MainMaskMinValue;
				float temp_output_10_0_g84893 = ( _MainMaskMaxValue - temp_output_7_0_g84893 );
				half Main_Mask_Remap5765_g84806 = saturate( ( ( clampResult17_g84892 - temp_output_7_0_g84893 ) / ( temp_output_10_0_g84893 + 0.0001 ) ) );
				float lerpResult8007_g84806 = lerp( 1.0 , Main_Mask_Remap5765_g84806 , _MainColorMode);
				float4 lerpResult7986_g84806 = lerp( _MainColorTwo , _MainColor , lerpResult8007_g84806);
				half3 Main_Color_RGB7994_g84806 = (lerpResult7986_g84806).rgb;
				half3 Main_Albedo99_g84806 = ( lerpResult6223_g84806 * Main_Color_RGB7994_g84806 );
				float2 vertexToFrag11_g84871 = IN.ase_texcoord10.xy;
				half2 Second_UVs17_g84806 = vertexToFrag11_g84871;
				float4 tex2DNode89_g84806 = SAMPLE_TEXTURE2D( _SecondAlbedoTex, sampler_SecondAlbedoTex, Second_UVs17_g84806 );
				float3 lerpResult6225_g84806 = lerp( float3( 1,1,1 ) , (tex2DNode89_g84806).rgb , _SecondAlbedoValue);
				float4 tex2DNode33_g84806 = SAMPLE_TEXTURE2D( _SecondMaskTex, sampler_Linear_Repeat, Second_UVs17_g84806 );
				half Second_Mask81_g84806 = tex2DNode33_g84806.b;
				float clampResult17_g84895 = clamp( Second_Mask81_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84896 = _SecondMaskMinValue;
				float temp_output_10_0_g84896 = ( _SecondMaskMaxValue - temp_output_7_0_g84896 );
				half Second_Mask_Remap6130_g84806 = saturate( ( ( clampResult17_g84895 - temp_output_7_0_g84896 ) / ( temp_output_10_0_g84896 + 0.0001 ) ) );
				float lerpResult8008_g84806 = lerp( 1.0 , Second_Mask_Remap6130_g84806 , _SecondColorMode);
				float4 lerpResult7997_g84806 = lerp( _SecondColorTwo , _SecondColor , lerpResult8008_g84806);
				half3 Second_Color_RGB8005_g84806 = (lerpResult7997_g84806).rgb;
				half3 Second_Albedo153_g84806 = ( lerpResult6225_g84806 * Second_Color_RGB8005_g84806 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g84905 = 2.0;
				#else
				float staticSwitch1_g84905 = 4.594794;
				#endif
				float3 lerpResult4834_g84806 = lerp( ( Main_Albedo99_g84806 * Second_Albedo153_g84806 * staticSwitch1_g84905 ) , Second_Albedo153_g84806 , _DetailBlendMode);
				float lerpResult6885_g84806 = lerp( Main_Mask57_g84806 , Second_Mask81_g84806 , _DetailMaskMode);
				float clampResult17_g84911 = clamp( lerpResult6885_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84910 = _DetailMaskMinValue;
				float temp_output_10_0_g84910 = ( _DetailMaskMaxValue - temp_output_7_0_g84910 );
				half Detail_Mask_Texture6794_g84806 = saturate( ( ( clampResult17_g84911 - temp_output_7_0_g84910 ) / ( temp_output_10_0_g84910 + 0.0001 ) ) );
				half Mesh_DetailMask90_g84806 = IN.ase_color.b;
				half4 Normal_Packed45_g84891 = SAMPLE_TEXTURE2D( _MainNormalTex, sampler_Linear_Repeat, Main_UVs15_g84806 );
				float2 appendResult58_g84891 = (float2(( (Normal_Packed45_g84891).x * (Normal_Packed45_g84891).w ) , (Normal_Packed45_g84891).y));
				half2 Normal_Default50_g84891 = appendResult58_g84891;
				half2 Normal_ASTC41_g84891 = (Normal_Packed45_g84891).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g84891 = Normal_ASTC41_g84891;
				#else
				float2 staticSwitch38_g84891 = Normal_Default50_g84891;
				#endif
				half2 Normal_NO_DTX544_g84891 = (Normal_Packed45_g84891).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g84891 = Normal_NO_DTX544_g84891;
				#else
				float2 staticSwitch37_g84891 = staticSwitch38_g84891;
				#endif
				float2 temp_output_6555_0_g84806 = ( (staticSwitch37_g84891*2.0 + -1.0) * _MainNormalValue );
				float3 appendResult7388_g84806 = (float3(temp_output_6555_0_g84806 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal7389_g84806 = appendResult7388_g84806;
				float3 worldNormal7389_g84806 = float3(dot(tanToWorld0,tanNormal7389_g84806), dot(tanToWorld1,tanNormal7389_g84806), dot(tanToWorld2,tanNormal7389_g84806));
				half3 Main_NormalWS7390_g84806 = worldNormal7389_g84806;
				float lerpResult6884_g84806 = lerp( Mesh_DetailMask90_g84806 , ((Main_NormalWS7390_g84806).y*0.5 + 0.5) , _DetailMeshMode);
				float clampResult17_g84909 = clamp( lerpResult6884_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84908 = _DetailMeshMinValue;
				float temp_output_10_0_g84908 = ( _DetailMeshMaxValue - temp_output_7_0_g84908 );
				half Detail_Mask_Surface1540_g84806 = saturate( ( ( clampResult17_g84909 - temp_output_7_0_g84908 ) / ( temp_output_10_0_g84908 + 0.0001 ) ) );
				float clampResult17_g84912 = clamp( ( Detail_Mask_Texture6794_g84806 * Detail_Mask_Surface1540_g84806 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g84913 = _DetailBlendMinValue;
				float temp_output_10_0_g84913 = ( _DetailBlendMaxValue - temp_output_7_0_g84913 );
				half Detail_Mask147_g84806 = ( saturate( ( ( clampResult17_g84912 - temp_output_7_0_g84913 ) / ( temp_output_10_0_g84913 + 0.0001 ) ) ) * _DetailMode * _DetailValue );
				float3 lerpResult235_g84806 = lerp( Main_Albedo99_g84806 , lerpResult4834_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float3 staticSwitch255_g84806 = lerpResult235_g84806;
				#else
				float3 staticSwitch255_g84806 = Main_Albedo99_g84806;
				#endif
				half3 Blend_Albedo_Detail265_g84806 = staticSwitch255_g84806;
				half Mesh_Height1524_g84806 = IN.ase_color.a;
				float temp_output_7_0_g84916 = _GradientMinValue;
				float temp_output_10_0_g84916 = ( _GradientMaxValue - temp_output_7_0_g84916 );
				half Tint_Gradient_Value2784_g84806 = saturate( ( ( Mesh_Height1524_g84806 - temp_output_7_0_g84916 ) / ( temp_output_10_0_g84916 + 0.0001 ) ) );
				float3 lerpResult2779_g84806 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Tint_Gradient_Value2784_g84806);
				float lerpResult6617_g84806 = lerp( Main_Mask_Remap5765_g84806 , Second_Mask_Remap6130_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch6623_g84806 = lerpResult6617_g84806;
				#else
				float staticSwitch6623_g84806 = Main_Mask_Remap5765_g84806;
				#endif
				half Blend_MaskRemap_Detail6621_g84806 = staticSwitch6623_g84806;
				half Tint_Gradient_Mask6207_g84806 = Blend_MaskRemap_Detail6621_g84806;
				float3 lerpResult6208_g84806 = lerp( float3( 1,1,1 ) , lerpResult2779_g84806 , Tint_Gradient_Mask6207_g84806);
				half3 Tint_Gradient_Color5769_g84806 = lerpResult6208_g84806;
				half3 Tint_Noise_Color5770_g84806 = float3(1,1,1);
				half3 Tint_User_Color7335_g84806 = float3(1,1,1);
				float Mesh_Occlusion318_g84806 = IN.ase_color.g;
				float clampResult17_g84915 = clamp( Mesh_Occlusion318_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84917 = _VertexOcclusionMinValue;
				float temp_output_10_0_g84917 = ( _VertexOcclusionMaxValue - temp_output_7_0_g84917 );
				half Occlusion_Mask6432_g84806 = saturate( ( ( clampResult17_g84915 - temp_output_7_0_g84917 ) / ( temp_output_10_0_g84917 + 0.0001 ) ) );
				float3 lerpResult2945_g84806 = lerp( (_VertexOcclusionColor).rgb , float3( 1,1,1 ) , Occlusion_Mask6432_g84806);
				half3 Occlusion_Color648_g84806 = lerpResult2945_g84806;
				half3 Matcap_Color7428_g84806 = half3(0,0,0);
				half3 Blend_Albedo_Tinted2808_g84806 = ( ( Blend_Albedo_Detail265_g84806 * Tint_Gradient_Color5769_g84806 * Tint_Noise_Color5770_g84806 * Tint_User_Color7335_g84806 * Occlusion_Color648_g84806 ) + Matcap_Color7428_g84806 );
				float localHeightBasedBlending7362_g84942 = ( 0.0 );
				float4 appendResult9125_g84942 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g85039 = appendResult9125_g84942;
				float2 InputScale48_g85039 = (temp_output_35_0_g85039).zw;
				half2 FinalScale53_g85039 = ( 1.0 / InputScale48_g85039 );
				float2 InputPosition52_g85039 = (temp_output_35_0_g85039).xy;
				half2 FinalPosition58_g85039 = -( FinalScale53_g85039 * InputPosition52_g85039 );
				float2 Terrain_Control_UV7873_g84942 = ( ( (worldPos).xz * FinalScale53_g85039 ) + FinalPosition58_g85039 );
				half4 Terrain_Control_047365_g84942 = SAMPLE_TEXTURE2D( _ControlTex1, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_047362_g84942 = Terrain_Control_047365_g84942;
				half4 Terrain_Control_087366_g84942 = SAMPLE_TEXTURE2D( _ControlTex2, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_087362_g84942 = Terrain_Control_087366_g84942;
				half4 Terrain_Control_127712_g84942 = SAMPLE_TEXTURE2D( _ControlTex3, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_127362_g84942 = Terrain_Control_127712_g84942;
				half4 Terrain_Control_167711_g84942 = SAMPLE_TEXTURE2D( _ControlTex4, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_167362_g84942 = Terrain_Control_167711_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84995) = _MaskTex1;
				SamplerState Sampler238_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_016785_g84942 = _Coords1;
				float4 temp_output_37_0_g84995 = Input_Coords_016785_g84942;
				half4 Coords238_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition238_g84995 = worldPos;
				half4 localSamplePlanar2D238_g84995 = SamplePlanar2D( Texture238_g84995 , Sampler238_g84995 , Coords238_g84995 , WorldPosition238_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84995) = _MaskTex1;
				SamplerState Sampler246_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition246_g84995 = worldPos;
				half3 WorldNormal246_g84995 = WorldNormal;
				half4 localSamplePlanar3D246_g84995 = SamplePlanar3D( Texture246_g84995 , Sampler246_g84995 , Coords246_g84995 , WorldPosition246_g84995 , WorldNormal246_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84995) = _MaskTex1;
				SamplerState Sampler234_g84995 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84995 = temp_output_37_0_g84995;
				float3 WorldPosition234_g84995 = worldPos;
				float4 localSampleStochastic2D234_g84995 = SampleStochastic2D( Texture234_g84995 , Sampler234_g84995 , Coords234_g84995 , WorldPosition234_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84995) = _MaskTex1;
				SamplerState Sampler263_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition263_g84995 = worldPos;
				half3 WorldNormal263_g84995 = WorldNormal;
				half4 localSampleStochastic3D263_g84995 = SampleStochastic3D( Texture263_g84995 , Sampler263_g84995 , Coords263_g84995 , WorldPosition263_g84995 , WorldNormal263_g84995 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8639_g84942 = localSamplePlanar2D238_g84995;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8639_g84942 = localSamplePlanar3D246_g84995;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8639_g84942 = localSampleStochastic2D234_g84995;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8639_g84942 = localSampleStochastic3D263_g84995;
				#else
				float4 staticSwitch8639_g84942 = localSamplePlanar2D238_g84995;
				#endif
				float4 temp_output_7_0_g84944 = _MaskMin1;
				float4 temp_output_10_0_g84944 = ( _MaskMax1 - temp_output_7_0_g84944 );
				float4 temp_output_6970_0_g84942 = saturate( ( ( staticSwitch8639_g84942 - temp_output_7_0_g84944 ) / ( temp_output_10_0_g84944 + 0.0001 ) ) );
				half4 Masks_015_g84952 = temp_output_6970_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84996) = _MaskTex2;
				SamplerState Sampler238_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_026787_g84942 = _Coords2;
				float4 temp_output_37_0_g84996 = Input_Coords_026787_g84942;
				half4 Coords238_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition238_g84996 = worldPos;
				half4 localSamplePlanar2D238_g84996 = SamplePlanar2D( Texture238_g84996 , Sampler238_g84996 , Coords238_g84996 , WorldPosition238_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84996) = _MaskTex2;
				SamplerState Sampler246_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition246_g84996 = worldPos;
				half3 WorldNormal246_g84996 = WorldNormal;
				half4 localSamplePlanar3D246_g84996 = SamplePlanar3D( Texture246_g84996 , Sampler246_g84996 , Coords246_g84996 , WorldPosition246_g84996 , WorldNormal246_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84996) = _MaskTex2;
				SamplerState Sampler234_g84996 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84996 = temp_output_37_0_g84996;
				float3 WorldPosition234_g84996 = worldPos;
				float4 localSampleStochastic2D234_g84996 = SampleStochastic2D( Texture234_g84996 , Sampler234_g84996 , Coords234_g84996 , WorldPosition234_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84996) = _MaskTex2;
				SamplerState Sampler263_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition263_g84996 = worldPos;
				half3 WorldNormal263_g84996 = WorldNormal;
				half4 localSampleStochastic3D263_g84996 = SampleStochastic3D( Texture263_g84996 , Sampler263_g84996 , Coords263_g84996 , WorldPosition263_g84996 , WorldNormal263_g84996 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8640_g84942 = localSamplePlanar2D238_g84996;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8640_g84942 = localSamplePlanar3D246_g84996;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8640_g84942 = localSampleStochastic2D234_g84996;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8640_g84942 = localSampleStochastic3D263_g84996;
				#else
				float4 staticSwitch8640_g84942 = localSamplePlanar2D238_g84996;
				#endif
				float4 temp_output_7_0_g84946 = _MaskMin2;
				float4 temp_output_10_0_g84946 = ( _MaskMax2 - temp_output_7_0_g84946 );
				float4 temp_output_6977_0_g84942 = saturate( ( ( staticSwitch8640_g84942 - temp_output_7_0_g84946 ) / ( temp_output_10_0_g84946 + 0.0001 ) ) );
				half4 Masks_0210_g84952 = temp_output_6977_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84997) = _MaskTex3;
				SamplerState Sampler238_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_036789_g84942 = _Coords3;
				float4 temp_output_37_0_g84997 = Input_Coords_036789_g84942;
				half4 Coords238_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition238_g84997 = worldPos;
				half4 localSamplePlanar2D238_g84997 = SamplePlanar2D( Texture238_g84997 , Sampler238_g84997 , Coords238_g84997 , WorldPosition238_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84997) = _MaskTex3;
				SamplerState Sampler246_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition246_g84997 = worldPos;
				half3 WorldNormal246_g84997 = WorldNormal;
				half4 localSamplePlanar3D246_g84997 = SamplePlanar3D( Texture246_g84997 , Sampler246_g84997 , Coords246_g84997 , WorldPosition246_g84997 , WorldNormal246_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84997) = _MaskTex3;
				SamplerState Sampler234_g84997 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84997 = temp_output_37_0_g84997;
				float3 WorldPosition234_g84997 = worldPos;
				float4 localSampleStochastic2D234_g84997 = SampleStochastic2D( Texture234_g84997 , Sampler234_g84997 , Coords234_g84997 , WorldPosition234_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84997) = _MaskTex3;
				SamplerState Sampler263_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition263_g84997 = worldPos;
				half3 WorldNormal263_g84997 = WorldNormal;
				half4 localSampleStochastic3D263_g84997 = SampleStochastic3D( Texture263_g84997 , Sampler263_g84997 , Coords263_g84997 , WorldPosition263_g84997 , WorldNormal263_g84997 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8641_g84942 = localSamplePlanar2D238_g84997;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8641_g84942 = localSamplePlanar3D246_g84997;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8641_g84942 = localSampleStochastic2D234_g84997;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8641_g84942 = localSampleStochastic3D263_g84997;
				#else
				float4 staticSwitch8641_g84942 = localSamplePlanar2D238_g84997;
				#endif
				float4 temp_output_7_0_g84947 = _MaskMin3;
				float4 temp_output_10_0_g84947 = ( _MaskMax3 - temp_output_7_0_g84947 );
				float4 temp_output_6978_0_g84942 = saturate( ( ( staticSwitch8641_g84942 - temp_output_7_0_g84947 ) / ( temp_output_10_0_g84947 + 0.0001 ) ) );
				half4 Masks_0312_g84952 = temp_output_6978_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84998) = _MaskTex4;
				SamplerState Sampler238_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_046791_g84942 = _Coords4;
				float4 temp_output_37_0_g84998 = Input_Coords_046791_g84942;
				half4 Coords238_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition238_g84998 = worldPos;
				half4 localSamplePlanar2D238_g84998 = SamplePlanar2D( Texture238_g84998 , Sampler238_g84998 , Coords238_g84998 , WorldPosition238_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84998) = _MaskTex4;
				SamplerState Sampler246_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition246_g84998 = worldPos;
				half3 WorldNormal246_g84998 = WorldNormal;
				half4 localSamplePlanar3D246_g84998 = SamplePlanar3D( Texture246_g84998 , Sampler246_g84998 , Coords246_g84998 , WorldPosition246_g84998 , WorldNormal246_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84998) = _MaskTex4;
				SamplerState Sampler234_g84998 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84998 = temp_output_37_0_g84998;
				float3 WorldPosition234_g84998 = worldPos;
				float4 localSampleStochastic2D234_g84998 = SampleStochastic2D( Texture234_g84998 , Sampler234_g84998 , Coords234_g84998 , WorldPosition234_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84998) = _MaskTex4;
				SamplerState Sampler263_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition263_g84998 = worldPos;
				half3 WorldNormal263_g84998 = WorldNormal;
				half4 localSampleStochastic3D263_g84998 = SampleStochastic3D( Texture263_g84998 , Sampler263_g84998 , Coords263_g84998 , WorldPosition263_g84998 , WorldNormal263_g84998 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8642_g84942 = localSamplePlanar2D238_g84998;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8642_g84942 = localSamplePlanar3D246_g84998;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8642_g84942 = localSampleStochastic2D234_g84998;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8642_g84942 = localSampleStochastic3D263_g84998;
				#else
				float4 staticSwitch8642_g84942 = localSamplePlanar2D238_g84998;
				#endif
				float4 temp_output_7_0_g84948 = _MaskMin4;
				float4 temp_output_10_0_g84948 = ( _MaskMax4 - temp_output_7_0_g84948 );
				float4 temp_output_6983_0_g84942 = saturate( ( ( staticSwitch8642_g84942 - temp_output_7_0_g84948 ) / ( temp_output_10_0_g84948 + 0.0001 ) ) );
				half4 Masks_0414_g84952 = temp_output_6983_0_g84942;
				float4 appendResult29_g84952 = (float4((Masks_015_g84952).z , (Masks_0210_g84952).z , (Masks_0312_g84952).z , (Masks_0414_g84952).z));
				half4 Control31_g84952 = Terrain_Control_047365_g84942;
				half4 Terrain_Height_047210_g84942 = ( appendResult29_g84952 * Control31_g84952 );
				float4 heights_047362_g84942 = Terrain_Height_047210_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85007) = _MaskTex5;
				SamplerState Sampler238_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_058750_g84942 = _Coords5;
				float4 temp_output_37_0_g85007 = Input_Coords_058750_g84942;
				half4 Coords238_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition238_g85007 = worldPos;
				half4 localSamplePlanar2D238_g85007 = SamplePlanar2D( Texture238_g85007 , Sampler238_g85007 , Coords238_g85007 , WorldPosition238_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85007) = _MaskTex5;
				SamplerState Sampler246_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition246_g85007 = worldPos;
				half3 WorldNormal246_g85007 = WorldNormal;
				half4 localSamplePlanar3D246_g85007 = SamplePlanar3D( Texture246_g85007 , Sampler246_g85007 , Coords246_g85007 , WorldPosition246_g85007 , WorldNormal246_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85007) = _MaskTex5;
				SamplerState Sampler234_g85007 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85007 = temp_output_37_0_g85007;
				float3 WorldPosition234_g85007 = worldPos;
				float4 localSampleStochastic2D234_g85007 = SampleStochastic2D( Texture234_g85007 , Sampler234_g85007 , Coords234_g85007 , WorldPosition234_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85007) = _MaskTex5;
				SamplerState Sampler263_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition263_g85007 = worldPos;
				half3 WorldNormal263_g85007 = WorldNormal;
				half4 localSampleStochastic3D263_g85007 = SampleStochastic3D( Texture263_g85007 , Sampler263_g85007 , Coords263_g85007 , WorldPosition263_g85007 , WorldNormal263_g85007 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8710_g84942 = localSamplePlanar2D238_g85007;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8710_g84942 = localSamplePlanar3D246_g85007;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8710_g84942 = localSampleStochastic2D234_g85007;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8710_g84942 = localSampleStochastic3D263_g85007;
				#else
				float4 staticSwitch8710_g84942 = localSamplePlanar2D238_g85007;
				#endif
				float4 temp_output_7_0_g84960 = _MaskMin5;
				float4 temp_output_10_0_g84960 = ( _MaskMax5 - temp_output_7_0_g84960 );
				float4 temp_output_8714_0_g84942 = saturate( ( ( staticSwitch8710_g84942 - temp_output_7_0_g84960 ) / ( temp_output_10_0_g84960 + 0.0001 ) ) );
				half4 Masks_015_g84961 = temp_output_8714_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85008) = _MaskTex6;
				SamplerState Sampler238_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_068751_g84942 = _Coords6;
				float4 temp_output_37_0_g85008 = Input_Coords_068751_g84942;
				half4 Coords238_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition238_g85008 = worldPos;
				half4 localSamplePlanar2D238_g85008 = SamplePlanar2D( Texture238_g85008 , Sampler238_g85008 , Coords238_g85008 , WorldPosition238_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85008) = _MaskTex6;
				SamplerState Sampler246_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition246_g85008 = worldPos;
				half3 WorldNormal246_g85008 = WorldNormal;
				half4 localSamplePlanar3D246_g85008 = SamplePlanar3D( Texture246_g85008 , Sampler246_g85008 , Coords246_g85008 , WorldPosition246_g85008 , WorldNormal246_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85008) = _MaskTex6;
				SamplerState Sampler234_g85008 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85008 = temp_output_37_0_g85008;
				float3 WorldPosition234_g85008 = worldPos;
				float4 localSampleStochastic2D234_g85008 = SampleStochastic2D( Texture234_g85008 , Sampler234_g85008 , Coords234_g85008 , WorldPosition234_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85008) = _MaskTex6;
				SamplerState Sampler263_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition263_g85008 = worldPos;
				half3 WorldNormal263_g85008 = WorldNormal;
				half4 localSampleStochastic3D263_g85008 = SampleStochastic3D( Texture263_g85008 , Sampler263_g85008 , Coords263_g85008 , WorldPosition263_g85008 , WorldNormal263_g85008 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8711_g84942 = localSamplePlanar2D238_g85008;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8711_g84942 = localSamplePlanar3D246_g85008;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8711_g84942 = localSampleStochastic2D234_g85008;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8711_g84942 = localSampleStochastic3D263_g85008;
				#else
				float4 staticSwitch8711_g84942 = localSamplePlanar2D238_g85008;
				#endif
				float4 temp_output_7_0_g84963 = _MaskMin6;
				float4 temp_output_10_0_g84963 = ( _MaskMax6 - temp_output_7_0_g84963 );
				float4 temp_output_8721_0_g84942 = saturate( ( ( staticSwitch8711_g84942 - temp_output_7_0_g84963 ) / ( temp_output_10_0_g84963 + 0.0001 ) ) );
				half4 Masks_0210_g84961 = temp_output_8721_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85009) = _MaskTex7;
				SamplerState Sampler238_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_078752_g84942 = _Coords7;
				float4 temp_output_37_0_g85009 = Input_Coords_078752_g84942;
				half4 Coords238_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition238_g85009 = worldPos;
				half4 localSamplePlanar2D238_g85009 = SamplePlanar2D( Texture238_g85009 , Sampler238_g85009 , Coords238_g85009 , WorldPosition238_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85009) = _MaskTex7;
				SamplerState Sampler246_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition246_g85009 = worldPos;
				half3 WorldNormal246_g85009 = WorldNormal;
				half4 localSamplePlanar3D246_g85009 = SamplePlanar3D( Texture246_g85009 , Sampler246_g85009 , Coords246_g85009 , WorldPosition246_g85009 , WorldNormal246_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85009) = _MaskTex7;
				SamplerState Sampler234_g85009 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85009 = temp_output_37_0_g85009;
				float3 WorldPosition234_g85009 = worldPos;
				float4 localSampleStochastic2D234_g85009 = SampleStochastic2D( Texture234_g85009 , Sampler234_g85009 , Coords234_g85009 , WorldPosition234_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85009) = _MaskTex7;
				SamplerState Sampler263_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition263_g85009 = worldPos;
				half3 WorldNormal263_g85009 = WorldNormal;
				half4 localSampleStochastic3D263_g85009 = SampleStochastic3D( Texture263_g85009 , Sampler263_g85009 , Coords263_g85009 , WorldPosition263_g85009 , WorldNormal263_g85009 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8712_g84942 = localSamplePlanar2D238_g85009;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8712_g84942 = localSamplePlanar3D246_g85009;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8712_g84942 = localSampleStochastic2D234_g85009;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8712_g84942 = localSampleStochastic3D263_g85009;
				#else
				float4 staticSwitch8712_g84942 = localSamplePlanar2D238_g85009;
				#endif
				float4 temp_output_7_0_g84964 = _MaskMin7;
				float4 temp_output_10_0_g84964 = ( _MaskMax7 - temp_output_7_0_g84964 );
				float4 temp_output_8724_0_g84942 = saturate( ( ( staticSwitch8712_g84942 - temp_output_7_0_g84964 ) / ( temp_output_10_0_g84964 + 0.0001 ) ) );
				half4 Masks_0312_g84961 = temp_output_8724_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85010) = _MaskTex8;
				SamplerState Sampler238_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_088749_g84942 = _Coords8;
				float4 temp_output_37_0_g85010 = Input_Coords_088749_g84942;
				half4 Coords238_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition238_g85010 = worldPos;
				half4 localSamplePlanar2D238_g85010 = SamplePlanar2D( Texture238_g85010 , Sampler238_g85010 , Coords238_g85010 , WorldPosition238_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85010) = _MaskTex8;
				SamplerState Sampler246_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition246_g85010 = worldPos;
				half3 WorldNormal246_g85010 = WorldNormal;
				half4 localSamplePlanar3D246_g85010 = SamplePlanar3D( Texture246_g85010 , Sampler246_g85010 , Coords246_g85010 , WorldPosition246_g85010 , WorldNormal246_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85010) = _MaskTex8;
				SamplerState Sampler234_g85010 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85010 = temp_output_37_0_g85010;
				float3 WorldPosition234_g85010 = worldPos;
				float4 localSampleStochastic2D234_g85010 = SampleStochastic2D( Texture234_g85010 , Sampler234_g85010 , Coords234_g85010 , WorldPosition234_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85010) = _MaskTex8;
				SamplerState Sampler263_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition263_g85010 = worldPos;
				half3 WorldNormal263_g85010 = WorldNormal;
				half4 localSampleStochastic3D263_g85010 = SampleStochastic3D( Texture263_g85010 , Sampler263_g85010 , Coords263_g85010 , WorldPosition263_g85010 , WorldNormal263_g85010 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8713_g84942 = localSamplePlanar2D238_g85010;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8713_g84942 = localSamplePlanar3D246_g85010;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8713_g84942 = localSampleStochastic2D234_g85010;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8713_g84942 = localSampleStochastic3D263_g85010;
				#else
				float4 staticSwitch8713_g84942 = localSamplePlanar2D238_g85010;
				#endif
				float4 temp_output_7_0_g84965 = _MaskMin8;
				float4 temp_output_10_0_g84965 = ( _MaskMax8 - temp_output_7_0_g84965 );
				float4 temp_output_8727_0_g84942 = saturate( ( ( staticSwitch8713_g84942 - temp_output_7_0_g84965 ) / ( temp_output_10_0_g84965 + 0.0001 ) ) );
				half4 Masks_0414_g84961 = temp_output_8727_0_g84942;
				float4 appendResult29_g84961 = (float4((Masks_015_g84961).z , (Masks_0210_g84961).z , (Masks_0312_g84961).z , (Masks_0414_g84961).z));
				half4 Control31_g84961 = Terrain_Control_087366_g84942;
				half4 Terrain_Height_088731_g84942 = ( appendResult29_g84961 * Control31_g84961 );
				float4 heights_087362_g84942 = Terrain_Height_088731_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85019) = _MaskTex9;
				SamplerState Sampler238_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_098833_g84942 = _Coords9;
				float4 temp_output_37_0_g85019 = Input_Coords_098833_g84942;
				half4 Coords238_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition238_g85019 = worldPos;
				half4 localSamplePlanar2D238_g85019 = SamplePlanar2D( Texture238_g85019 , Sampler238_g85019 , Coords238_g85019 , WorldPosition238_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85019) = _MaskTex9;
				SamplerState Sampler246_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition246_g85019 = worldPos;
				half3 WorldNormal246_g85019 = WorldNormal;
				half4 localSamplePlanar3D246_g85019 = SamplePlanar3D( Texture246_g85019 , Sampler246_g85019 , Coords246_g85019 , WorldPosition246_g85019 , WorldNormal246_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85019) = _MaskTex9;
				SamplerState Sampler234_g85019 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85019 = temp_output_37_0_g85019;
				float3 WorldPosition234_g85019 = worldPos;
				float4 localSampleStochastic2D234_g85019 = SampleStochastic2D( Texture234_g85019 , Sampler234_g85019 , Coords234_g85019 , WorldPosition234_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85019) = _MaskTex9;
				SamplerState Sampler263_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition263_g85019 = worldPos;
				half3 WorldNormal263_g85019 = WorldNormal;
				half4 localSampleStochastic3D263_g85019 = SampleStochastic3D( Texture263_g85019 , Sampler263_g85019 , Coords263_g85019 , WorldPosition263_g85019 , WorldNormal263_g85019 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8878_g84942 = localSamplePlanar2D238_g85019;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8878_g84942 = localSamplePlanar3D246_g85019;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8878_g84942 = localSampleStochastic2D234_g85019;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8878_g84942 = localSampleStochastic3D263_g85019;
				#else
				float4 staticSwitch8878_g84942 = localSamplePlanar2D238_g85019;
				#endif
				float4 temp_output_7_0_g84970 = _MaskMin9;
				float4 temp_output_10_0_g84970 = ( _MaskMax9 - temp_output_7_0_g84970 );
				float4 temp_output_8815_0_g84942 = saturate( ( ( staticSwitch8878_g84942 - temp_output_7_0_g84970 ) / ( temp_output_10_0_g84970 + 0.0001 ) ) );
				half4 Masks_015_g84971 = temp_output_8815_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85020) = _MaskTex10;
				SamplerState Sampler238_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_108834_g84942 = _Coords10;
				float4 temp_output_37_0_g85020 = Input_Coords_108834_g84942;
				half4 Coords238_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition238_g85020 = worldPos;
				half4 localSamplePlanar2D238_g85020 = SamplePlanar2D( Texture238_g85020 , Sampler238_g85020 , Coords238_g85020 , WorldPosition238_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85020) = _MaskTex10;
				SamplerState Sampler246_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition246_g85020 = worldPos;
				half3 WorldNormal246_g85020 = WorldNormal;
				half4 localSamplePlanar3D246_g85020 = SamplePlanar3D( Texture246_g85020 , Sampler246_g85020 , Coords246_g85020 , WorldPosition246_g85020 , WorldNormal246_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85020) = _MaskTex10;
				SamplerState Sampler234_g85020 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85020 = temp_output_37_0_g85020;
				float3 WorldPosition234_g85020 = worldPos;
				float4 localSampleStochastic2D234_g85020 = SampleStochastic2D( Texture234_g85020 , Sampler234_g85020 , Coords234_g85020 , WorldPosition234_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85020) = _MaskTex10;
				SamplerState Sampler263_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition263_g85020 = worldPos;
				half3 WorldNormal263_g85020 = WorldNormal;
				half4 localSampleStochastic3D263_g85020 = SampleStochastic3D( Texture263_g85020 , Sampler263_g85020 , Coords263_g85020 , WorldPosition263_g85020 , WorldNormal263_g85020 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8860_g84942 = localSamplePlanar2D238_g85020;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8860_g84942 = localSamplePlanar3D246_g85020;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8860_g84942 = localSampleStochastic2D234_g85020;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8860_g84942 = localSampleStochastic3D263_g85020;
				#else
				float4 staticSwitch8860_g84942 = localSamplePlanar2D238_g85020;
				#endif
				float4 temp_output_7_0_g84973 = _MaskMin10;
				float4 temp_output_10_0_g84973 = ( _MaskMax10 - temp_output_7_0_g84973 );
				float4 temp_output_8818_0_g84942 = saturate( ( ( staticSwitch8860_g84942 - temp_output_7_0_g84973 ) / ( temp_output_10_0_g84973 + 0.0001 ) ) );
				half4 Masks_0210_g84971 = temp_output_8818_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85021) = _MaskTex11;
				SamplerState Sampler238_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_118835_g84942 = _Coords11;
				float4 temp_output_37_0_g85021 = Input_Coords_118835_g84942;
				half4 Coords238_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition238_g85021 = worldPos;
				half4 localSamplePlanar2D238_g85021 = SamplePlanar2D( Texture238_g85021 , Sampler238_g85021 , Coords238_g85021 , WorldPosition238_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85021) = _MaskTex11;
				SamplerState Sampler246_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition246_g85021 = worldPos;
				half3 WorldNormal246_g85021 = WorldNormal;
				half4 localSamplePlanar3D246_g85021 = SamplePlanar3D( Texture246_g85021 , Sampler246_g85021 , Coords246_g85021 , WorldPosition246_g85021 , WorldNormal246_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85021) = _MaskTex11;
				SamplerState Sampler234_g85021 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85021 = temp_output_37_0_g85021;
				float3 WorldPosition234_g85021 = worldPos;
				float4 localSampleStochastic2D234_g85021 = SampleStochastic2D( Texture234_g85021 , Sampler234_g85021 , Coords234_g85021 , WorldPosition234_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85021) = _MaskTex11;
				SamplerState Sampler263_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition263_g85021 = worldPos;
				half3 WorldNormal263_g85021 = WorldNormal;
				half4 localSampleStochastic3D263_g85021 = SampleStochastic3D( Texture263_g85021 , Sampler263_g85021 , Coords263_g85021 , WorldPosition263_g85021 , WorldNormal263_g85021 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8861_g84942 = localSamplePlanar2D238_g85021;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8861_g84942 = localSamplePlanar3D246_g85021;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8861_g84942 = localSampleStochastic2D234_g85021;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8861_g84942 = localSampleStochastic3D263_g85021;
				#else
				float4 staticSwitch8861_g84942 = localSamplePlanar2D238_g85021;
				#endif
				float4 temp_output_7_0_g84974 = _MaskMin11;
				float4 temp_output_10_0_g84974 = ( _MaskMax11 - temp_output_7_0_g84974 );
				float4 temp_output_8819_0_g84942 = saturate( ( ( staticSwitch8861_g84942 - temp_output_7_0_g84974 ) / ( temp_output_10_0_g84974 + 0.0001 ) ) );
				half4 Masks_0312_g84971 = temp_output_8819_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85022) = _MaskTex12;
				SamplerState Sampler238_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_128836_g84942 = _Coords12;
				float4 temp_output_37_0_g85022 = Input_Coords_128836_g84942;
				half4 Coords238_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition238_g85022 = worldPos;
				half4 localSamplePlanar2D238_g85022 = SamplePlanar2D( Texture238_g85022 , Sampler238_g85022 , Coords238_g85022 , WorldPosition238_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85022) = _MaskTex12;
				SamplerState Sampler246_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition246_g85022 = worldPos;
				half3 WorldNormal246_g85022 = WorldNormal;
				half4 localSamplePlanar3D246_g85022 = SamplePlanar3D( Texture246_g85022 , Sampler246_g85022 , Coords246_g85022 , WorldPosition246_g85022 , WorldNormal246_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85022) = _MaskTex12;
				SamplerState Sampler234_g85022 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85022 = temp_output_37_0_g85022;
				float3 WorldPosition234_g85022 = worldPos;
				float4 localSampleStochastic2D234_g85022 = SampleStochastic2D( Texture234_g85022 , Sampler234_g85022 , Coords234_g85022 , WorldPosition234_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85022) = _MaskTex12;
				SamplerState Sampler263_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition263_g85022 = worldPos;
				half3 WorldNormal263_g85022 = WorldNormal;
				half4 localSampleStochastic3D263_g85022 = SampleStochastic3D( Texture263_g85022 , Sampler263_g85022 , Coords263_g85022 , WorldPosition263_g85022 , WorldNormal263_g85022 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8879_g84942 = localSamplePlanar2D238_g85022;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8879_g84942 = localSamplePlanar3D246_g85022;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8879_g84942 = localSampleStochastic2D234_g85022;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8879_g84942 = localSampleStochastic3D263_g85022;
				#else
				float4 staticSwitch8879_g84942 = localSamplePlanar2D238_g85022;
				#endif
				float4 temp_output_7_0_g84975 = _MaskMin12;
				float4 temp_output_10_0_g84975 = ( _MaskMax12 - temp_output_7_0_g84975 );
				float4 temp_output_8820_0_g84942 = saturate( ( ( staticSwitch8879_g84942 - temp_output_7_0_g84975 ) / ( temp_output_10_0_g84975 + 0.0001 ) ) );
				half4 Masks_0414_g84971 = temp_output_8820_0_g84942;
				float4 appendResult29_g84971 = (float4((Masks_015_g84971).z , (Masks_0210_g84971).z , (Masks_0312_g84971).z , (Masks_0414_g84971).z));
				half4 Control31_g84971 = Terrain_Control_127712_g84942;
				half4 Terrain_Height_128870_g84942 = ( appendResult29_g84971 * Control31_g84971 );
				float4 heights_127362_g84942 = Terrain_Height_128870_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85030) = _MaskTex13;
				SamplerState Sampler238_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_138960_g84942 = _Coords13;
				float4 temp_output_37_0_g85030 = Input_Coords_138960_g84942;
				half4 Coords238_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition238_g85030 = worldPos;
				half4 localSamplePlanar2D238_g85030 = SamplePlanar2D( Texture238_g85030 , Sampler238_g85030 , Coords238_g85030 , WorldPosition238_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85030) = _MaskTex13;
				SamplerState Sampler246_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition246_g85030 = worldPos;
				half3 WorldNormal246_g85030 = WorldNormal;
				half4 localSamplePlanar3D246_g85030 = SamplePlanar3D( Texture246_g85030 , Sampler246_g85030 , Coords246_g85030 , WorldPosition246_g85030 , WorldNormal246_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85030) = _MaskTex13;
				SamplerState Sampler234_g85030 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85030 = temp_output_37_0_g85030;
				float3 WorldPosition234_g85030 = worldPos;
				float4 localSampleStochastic2D234_g85030 = SampleStochastic2D( Texture234_g85030 , Sampler234_g85030 , Coords234_g85030 , WorldPosition234_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85030) = _MaskTex13;
				SamplerState Sampler263_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition263_g85030 = worldPos;
				half3 WorldNormal263_g85030 = WorldNormal;
				half4 localSampleStochastic3D263_g85030 = SampleStochastic3D( Texture263_g85030 , Sampler263_g85030 , Coords263_g85030 , WorldPosition263_g85030 , WorldNormal263_g85030 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch9000_g84942 = localSamplePlanar2D238_g85030;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch9000_g84942 = localSamplePlanar3D246_g85030;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch9000_g84942 = localSampleStochastic2D234_g85030;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch9000_g84942 = localSampleStochastic3D263_g85030;
				#else
				float4 staticSwitch9000_g84942 = localSamplePlanar2D238_g85030;
				#endif
				float4 temp_output_7_0_g84980 = _MaskMin13;
				float4 temp_output_10_0_g84980 = ( _MaskMax13 - temp_output_7_0_g84980 );
				float4 temp_output_8931_0_g84942 = saturate( ( ( staticSwitch9000_g84942 - temp_output_7_0_g84980 ) / ( temp_output_10_0_g84980 + 0.0001 ) ) );
				half4 Masks_015_g84981 = temp_output_8931_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85031) = _MaskTex14;
				SamplerState Sampler238_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_148961_g84942 = _Coords14;
				float4 temp_output_37_0_g85031 = Input_Coords_148961_g84942;
				half4 Coords238_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition238_g85031 = worldPos;
				half4 localSamplePlanar2D238_g85031 = SamplePlanar2D( Texture238_g85031 , Sampler238_g85031 , Coords238_g85031 , WorldPosition238_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85031) = _MaskTex14;
				SamplerState Sampler246_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition246_g85031 = worldPos;
				half3 WorldNormal246_g85031 = WorldNormal;
				half4 localSamplePlanar3D246_g85031 = SamplePlanar3D( Texture246_g85031 , Sampler246_g85031 , Coords246_g85031 , WorldPosition246_g85031 , WorldNormal246_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85031) = _MaskTex14;
				SamplerState Sampler234_g85031 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85031 = temp_output_37_0_g85031;
				float3 WorldPosition234_g85031 = worldPos;
				float4 localSampleStochastic2D234_g85031 = SampleStochastic2D( Texture234_g85031 , Sampler234_g85031 , Coords234_g85031 , WorldPosition234_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85031) = _MaskTex14;
				SamplerState Sampler263_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition263_g85031 = worldPos;
				half3 WorldNormal263_g85031 = WorldNormal;
				half4 localSampleStochastic3D263_g85031 = SampleStochastic3D( Texture263_g85031 , Sampler263_g85031 , Coords263_g85031 , WorldPosition263_g85031 , WorldNormal263_g85031 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch9001_g84942 = localSamplePlanar2D238_g85031;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch9001_g84942 = localSamplePlanar3D246_g85031;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch9001_g84942 = localSampleStochastic2D234_g85031;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch9001_g84942 = localSampleStochastic3D263_g85031;
				#else
				float4 staticSwitch9001_g84942 = localSamplePlanar2D238_g85031;
				#endif
				float4 temp_output_7_0_g84983 = _MaskMin14;
				float4 temp_output_10_0_g84983 = ( _MaskMax14 - temp_output_7_0_g84983 );
				float4 temp_output_8934_0_g84942 = saturate( ( ( staticSwitch9001_g84942 - temp_output_7_0_g84983 ) / ( temp_output_10_0_g84983 + 0.0001 ) ) );
				half4 Masks_0210_g84981 = temp_output_8934_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85032) = _MaskTex15;
				SamplerState Sampler238_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_158962_g84942 = _Coords15;
				float4 temp_output_37_0_g85032 = Input_Coords_158962_g84942;
				half4 Coords238_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition238_g85032 = worldPos;
				half4 localSamplePlanar2D238_g85032 = SamplePlanar2D( Texture238_g85032 , Sampler238_g85032 , Coords238_g85032 , WorldPosition238_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85032) = _MaskTex15;
				SamplerState Sampler246_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition246_g85032 = worldPos;
				half3 WorldNormal246_g85032 = WorldNormal;
				half4 localSamplePlanar3D246_g85032 = SamplePlanar3D( Texture246_g85032 , Sampler246_g85032 , Coords246_g85032 , WorldPosition246_g85032 , WorldNormal246_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85032) = _MaskTex15;
				SamplerState Sampler234_g85032 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85032 = temp_output_37_0_g85032;
				float3 WorldPosition234_g85032 = worldPos;
				float4 localSampleStochastic2D234_g85032 = SampleStochastic2D( Texture234_g85032 , Sampler234_g85032 , Coords234_g85032 , WorldPosition234_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85032) = _MaskTex15;
				SamplerState Sampler263_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition263_g85032 = worldPos;
				half3 WorldNormal263_g85032 = WorldNormal;
				half4 localSampleStochastic3D263_g85032 = SampleStochastic3D( Texture263_g85032 , Sampler263_g85032 , Coords263_g85032 , WorldPosition263_g85032 , WorldNormal263_g85032 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch9002_g84942 = localSamplePlanar2D238_g85032;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch9002_g84942 = localSamplePlanar3D246_g85032;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch9002_g84942 = localSampleStochastic2D234_g85032;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch9002_g84942 = localSampleStochastic3D263_g85032;
				#else
				float4 staticSwitch9002_g84942 = localSamplePlanar2D238_g85032;
				#endif
				float4 temp_output_7_0_g84984 = _MaskMin15;
				float4 temp_output_10_0_g84984 = ( _MaskMax15 - temp_output_7_0_g84984 );
				float4 temp_output_8935_0_g84942 = saturate( ( ( staticSwitch9002_g84942 - temp_output_7_0_g84984 ) / ( temp_output_10_0_g84984 + 0.0001 ) ) );
				half4 Masks_0312_g84981 = temp_output_8935_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85033) = _MaskTex16;
				SamplerState Sampler238_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_168959_g84942 = _Coords16;
				float4 temp_output_37_0_g85033 = Input_Coords_168959_g84942;
				half4 Coords238_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition238_g85033 = worldPos;
				half4 localSamplePlanar2D238_g85033 = SamplePlanar2D( Texture238_g85033 , Sampler238_g85033 , Coords238_g85033 , WorldPosition238_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85033) = _MaskTex16;
				SamplerState Sampler246_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition246_g85033 = worldPos;
				half3 WorldNormal246_g85033 = WorldNormal;
				half4 localSamplePlanar3D246_g85033 = SamplePlanar3D( Texture246_g85033 , Sampler246_g85033 , Coords246_g85033 , WorldPosition246_g85033 , WorldNormal246_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85033) = _MaskTex16;
				SamplerState Sampler234_g85033 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85033 = temp_output_37_0_g85033;
				float3 WorldPosition234_g85033 = worldPos;
				float4 localSampleStochastic2D234_g85033 = SampleStochastic2D( Texture234_g85033 , Sampler234_g85033 , Coords234_g85033 , WorldPosition234_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85033) = _MaskTex16;
				SamplerState Sampler263_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition263_g85033 = worldPos;
				half3 WorldNormal263_g85033 = WorldNormal;
				half4 localSampleStochastic3D263_g85033 = SampleStochastic3D( Texture263_g85033 , Sampler263_g85033 , Coords263_g85033 , WorldPosition263_g85033 , WorldNormal263_g85033 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch9003_g84942 = localSamplePlanar2D238_g85033;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch9003_g84942 = localSamplePlanar3D246_g85033;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch9003_g84942 = localSampleStochastic2D234_g85033;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch9003_g84942 = localSampleStochastic3D263_g85033;
				#else
				float4 staticSwitch9003_g84942 = localSamplePlanar2D238_g85033;
				#endif
				float4 temp_output_7_0_g84985 = _MaskMin16;
				float4 temp_output_10_0_g84985 = ( _MaskMax16 - temp_output_7_0_g84985 );
				float4 temp_output_8936_0_g84942 = saturate( ( ( staticSwitch9003_g84942 - temp_output_7_0_g84985 ) / ( temp_output_10_0_g84985 + 0.0001 ) ) );
				half4 Masks_0414_g84981 = temp_output_8936_0_g84942;
				float4 appendResult29_g84981 = (float4((Masks_015_g84981).z , (Masks_0210_g84981).z , (Masks_0312_g84981).z , (Masks_0414_g84981).z));
				half4 Control31_g84981 = Terrain_Control_167711_g84942;
				half4 Terrain_Height_169015_g84942 = ( appendResult29_g84981 * Control31_g84981 );
				float4 heights_167362_g84942 = Terrain_Height_169015_g84942;
				float heightTransition7362_g84942 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g84942 = float4( 0,0,0,0 );
				float4 weights_087362_g84942 = float4( 0,0,0,0 );
				float4 weights_127362_g84942 = float4( 0,0,0,0 );
				float4 weights_167362_g84942 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g84942.x;
				maxHeight = max(maxHeight, heights_047362_g84942.y);
				maxHeight = max(maxHeight, heights_047362_g84942.z);
				maxHeight = max(maxHeight, heights_047362_g84942.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				maxHeight = max(maxHeight, heights_127362_g84942.x);
				maxHeight = max(maxHeight, heights_127362_g84942.y);
				maxHeight = max(maxHeight, heights_127362_g84942.z);
				maxHeight = max(maxHeight, heights_127362_g84942.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				maxHeight = max(maxHeight, heights_127362_g84942.x);
				maxHeight = max(maxHeight, heights_127362_g84942.y);
				maxHeight = max(maxHeight, heights_127362_g84942.z);
				maxHeight = max(maxHeight, heights_127362_g84942.w);
				maxHeight = max(maxHeight, heights_167362_g84942.x);
				maxHeight = max(maxHeight, heights_167362_g84942.y);
				maxHeight = max(maxHeight, heights_167362_g84942.z);
				maxHeight = max(maxHeight, heights_167362_g84942.w);
				#endif
				float transition = max(heightTransition7362_g84942, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g84942.x, heights_047362_g84942.y, heights_047362_g84942.z, heights_047362_g84942.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g84942;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				weightedHeights_12 = float4 ( heights_127362_g84942.x, heights_127362_g84942.y, heights_127362_g84942.z, heights_127362_g84942.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g84942;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				weightedHeights_12 = float4 ( heights_127362_g84942.x, heights_127362_g84942.y, heights_127362_g84942.z, heights_127362_g84942.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g84942;
				weightedHeights_16 = float4 ( heights_167362_g84942.x, heights_167362_g84942.y, heights_167362_g84942.z, heights_167362_g84942.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g84942;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g84942 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g84942 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g84942 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g84942 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8792_g84942 = weights_047362_g84942;
				#else
				float4 staticSwitch8792_g84942 = control_047362_g84942;
				#endif
				half4 Terrain_Weights_046781_g84942 = staticSwitch8792_g84942;
				half4 Weights52_g84951 = Terrain_Weights_046781_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85035) = _AlbedoTex1;
				SamplerState Sampler238_g85035 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85035 = Input_Coords_016785_g84942;
				half4 Coords238_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition238_g85035 = worldPos;
				half4 localSamplePlanar2D238_g85035 = SamplePlanar2D( Texture238_g85035 , Sampler238_g85035 , Coords238_g85035 , WorldPosition238_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85035) = _AlbedoTex1;
				SamplerState Sampler246_g85035 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition246_g85035 = worldPos;
				half3 WorldNormal246_g85035 = WorldNormal;
				half4 localSamplePlanar3D246_g85035 = SamplePlanar3D( Texture246_g85035 , Sampler246_g85035 , Coords246_g85035 , WorldPosition246_g85035 , WorldNormal246_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85035) = _AlbedoTex1;
				SamplerState Sampler234_g85035 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85035 = temp_output_37_0_g85035;
				float3 WorldPosition234_g85035 = worldPos;
				float4 localSampleStochastic2D234_g85035 = SampleStochastic2D( Texture234_g85035 , Sampler234_g85035 , Coords234_g85035 , WorldPosition234_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85035) = _AlbedoTex1;
				SamplerState Sampler263_g85035 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition263_g85035 = worldPos;
				half3 WorldNormal263_g85035 = WorldNormal;
				half4 localSampleStochastic3D263_g85035 = SampleStochastic3D( Texture263_g85035 , Sampler263_g85035 , Coords263_g85035 , WorldPosition263_g85035 , WorldNormal263_g85035 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8614_g84942 = localSamplePlanar2D238_g85035;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8614_g84942 = localSamplePlanar3D246_g85035;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8614_g84942 = localSampleStochastic2D234_g85035;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8614_g84942 = localSampleStochastic3D263_g85035;
				#else
				float4 staticSwitch8614_g84942 = localSamplePlanar2D238_g85035;
				#endif
				half4 Layer133_g84951 = staticSwitch8614_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84988) = _AlbedoTex2;
				SamplerState Sampler238_g84988 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84988 = Input_Coords_026787_g84942;
				half4 Coords238_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition238_g84988 = worldPos;
				half4 localSamplePlanar2D238_g84988 = SamplePlanar2D( Texture238_g84988 , Sampler238_g84988 , Coords238_g84988 , WorldPosition238_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84988) = _AlbedoTex2;
				SamplerState Sampler246_g84988 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition246_g84988 = worldPos;
				half3 WorldNormal246_g84988 = WorldNormal;
				half4 localSamplePlanar3D246_g84988 = SamplePlanar3D( Texture246_g84988 , Sampler246_g84988 , Coords246_g84988 , WorldPosition246_g84988 , WorldNormal246_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84988) = _AlbedoTex2;
				SamplerState Sampler234_g84988 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84988 = temp_output_37_0_g84988;
				float3 WorldPosition234_g84988 = worldPos;
				float4 localSampleStochastic2D234_g84988 = SampleStochastic2D( Texture234_g84988 , Sampler234_g84988 , Coords234_g84988 , WorldPosition234_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84988) = _AlbedoTex2;
				SamplerState Sampler263_g84988 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition263_g84988 = worldPos;
				half3 WorldNormal263_g84988 = WorldNormal;
				half4 localSampleStochastic3D263_g84988 = SampleStochastic3D( Texture263_g84988 , Sampler263_g84988 , Coords263_g84988 , WorldPosition263_g84988 , WorldNormal263_g84988 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8629_g84942 = localSamplePlanar2D238_g84988;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8629_g84942 = localSamplePlanar3D246_g84988;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8629_g84942 = localSampleStochastic2D234_g84988;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8629_g84942 = localSampleStochastic3D263_g84988;
				#else
				float4 staticSwitch8629_g84942 = localSamplePlanar2D238_g84988;
				#endif
				half4 Layer237_g84951 = staticSwitch8629_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84989) = _AlbedoTex3;
				SamplerState Sampler238_g84989 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84989 = Input_Coords_036789_g84942;
				half4 Coords238_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition238_g84989 = worldPos;
				half4 localSamplePlanar2D238_g84989 = SamplePlanar2D( Texture238_g84989 , Sampler238_g84989 , Coords238_g84989 , WorldPosition238_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84989) = _AlbedoTex3;
				SamplerState Sampler246_g84989 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition246_g84989 = worldPos;
				half3 WorldNormal246_g84989 = WorldNormal;
				half4 localSamplePlanar3D246_g84989 = SamplePlanar3D( Texture246_g84989 , Sampler246_g84989 , Coords246_g84989 , WorldPosition246_g84989 , WorldNormal246_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84989) = _AlbedoTex3;
				SamplerState Sampler234_g84989 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84989 = temp_output_37_0_g84989;
				float3 WorldPosition234_g84989 = worldPos;
				float4 localSampleStochastic2D234_g84989 = SampleStochastic2D( Texture234_g84989 , Sampler234_g84989 , Coords234_g84989 , WorldPosition234_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84989) = _AlbedoTex3;
				SamplerState Sampler263_g84989 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition263_g84989 = worldPos;
				half3 WorldNormal263_g84989 = WorldNormal;
				half4 localSampleStochastic3D263_g84989 = SampleStochastic3D( Texture263_g84989 , Sampler263_g84989 , Coords263_g84989 , WorldPosition263_g84989 , WorldNormal263_g84989 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8630_g84942 = localSamplePlanar2D238_g84989;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8630_g84942 = localSamplePlanar3D246_g84989;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8630_g84942 = localSampleStochastic2D234_g84989;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8630_g84942 = localSampleStochastic3D263_g84989;
				#else
				float4 staticSwitch8630_g84942 = localSamplePlanar2D238_g84989;
				#endif
				half4 Layer338_g84951 = staticSwitch8630_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84990) = _AlbedoTex4;
				SamplerState Sampler238_g84990 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84990 = Input_Coords_046791_g84942;
				half4 Coords238_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition238_g84990 = worldPos;
				half4 localSamplePlanar2D238_g84990 = SamplePlanar2D( Texture238_g84990 , Sampler238_g84990 , Coords238_g84990 , WorldPosition238_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84990) = _AlbedoTex4;
				SamplerState Sampler246_g84990 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition246_g84990 = worldPos;
				half3 WorldNormal246_g84990 = WorldNormal;
				half4 localSamplePlanar3D246_g84990 = SamplePlanar3D( Texture246_g84990 , Sampler246_g84990 , Coords246_g84990 , WorldPosition246_g84990 , WorldNormal246_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84990) = _AlbedoTex4;
				SamplerState Sampler234_g84990 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84990 = temp_output_37_0_g84990;
				float3 WorldPosition234_g84990 = worldPos;
				float4 localSampleStochastic2D234_g84990 = SampleStochastic2D( Texture234_g84990 , Sampler234_g84990 , Coords234_g84990 , WorldPosition234_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84990) = _AlbedoTex4;
				SamplerState Sampler263_g84990 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition263_g84990 = worldPos;
				half3 WorldNormal263_g84990 = WorldNormal;
				half4 localSampleStochastic3D263_g84990 = SampleStochastic3D( Texture263_g84990 , Sampler263_g84990 , Coords263_g84990 , WorldPosition263_g84990 , WorldNormal263_g84990 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8631_g84942 = localSamplePlanar2D238_g84990;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8631_g84942 = localSamplePlanar3D246_g84990;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8631_g84942 = localSampleStochastic2D234_g84990;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8631_g84942 = localSampleStochastic3D263_g84990;
				#else
				float4 staticSwitch8631_g84942 = localSamplePlanar2D238_g84990;
				#endif
				half4 Layer439_g84951 = staticSwitch8631_g84942;
				float4 weightedBlendVar31_g84951 = Weights52_g84951;
				float4 weightedBlend31_g84951 = ( weightedBlendVar31_g84951.x*Layer133_g84951 + weightedBlendVar31_g84951.y*Layer237_g84951 + weightedBlendVar31_g84951.z*Layer338_g84951 + weightedBlendVar31_g84951.w*Layer439_g84951 );
				half4 Terrain_Albedo_047200_g84942 = weightedBlend31_g84951;
				half4 Layer_045_g84954 = Terrain_Albedo_047200_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8793_g84942 = weights_087362_g84942;
				#else
				float4 staticSwitch8793_g84942 = control_087362_g84942;
				#endif
				half4 Terrain_Weights_087340_g84942 = staticSwitch8793_g84942;
				half4 Weights52_g84958 = Terrain_Weights_087340_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84999) = _AlbedoTex5;
				SamplerState Sampler238_g84999 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84999 = Input_Coords_058750_g84942;
				half4 Coords238_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition238_g84999 = worldPos;
				half4 localSamplePlanar2D238_g84999 = SamplePlanar2D( Texture238_g84999 , Sampler238_g84999 , Coords238_g84999 , WorldPosition238_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84999) = _AlbedoTex5;
				SamplerState Sampler246_g84999 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition246_g84999 = worldPos;
				half3 WorldNormal246_g84999 = WorldNormal;
				half4 localSamplePlanar3D246_g84999 = SamplePlanar3D( Texture246_g84999 , Sampler246_g84999 , Coords246_g84999 , WorldPosition246_g84999 , WorldNormal246_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84999) = _AlbedoTex5;
				SamplerState Sampler234_g84999 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84999 = temp_output_37_0_g84999;
				float3 WorldPosition234_g84999 = worldPos;
				float4 localSampleStochastic2D234_g84999 = SampleStochastic2D( Texture234_g84999 , Sampler234_g84999 , Coords234_g84999 , WorldPosition234_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84999) = _AlbedoTex5;
				SamplerState Sampler263_g84999 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition263_g84999 = worldPos;
				half3 WorldNormal263_g84999 = WorldNormal;
				half4 localSampleStochastic3D263_g84999 = SampleStochastic3D( Texture263_g84999 , Sampler263_g84999 , Coords263_g84999 , WorldPosition263_g84999 , WorldNormal263_g84999 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8690_g84942 = localSamplePlanar2D238_g84999;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8690_g84942 = localSamplePlanar3D246_g84999;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8690_g84942 = localSampleStochastic2D234_g84999;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8690_g84942 = localSampleStochastic3D263_g84999;
				#else
				float4 staticSwitch8690_g84942 = localSamplePlanar2D238_g84999;
				#endif
				half4 Layer133_g84958 = staticSwitch8690_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85000) = _AlbedoTex6;
				SamplerState Sampler238_g85000 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85000 = Input_Coords_068751_g84942;
				half4 Coords238_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition238_g85000 = worldPos;
				half4 localSamplePlanar2D238_g85000 = SamplePlanar2D( Texture238_g85000 , Sampler238_g85000 , Coords238_g85000 , WorldPosition238_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85000) = _AlbedoTex6;
				SamplerState Sampler246_g85000 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition246_g85000 = worldPos;
				half3 WorldNormal246_g85000 = WorldNormal;
				half4 localSamplePlanar3D246_g85000 = SamplePlanar3D( Texture246_g85000 , Sampler246_g85000 , Coords246_g85000 , WorldPosition246_g85000 , WorldNormal246_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85000) = _AlbedoTex6;
				SamplerState Sampler234_g85000 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85000 = temp_output_37_0_g85000;
				float3 WorldPosition234_g85000 = worldPos;
				float4 localSampleStochastic2D234_g85000 = SampleStochastic2D( Texture234_g85000 , Sampler234_g85000 , Coords234_g85000 , WorldPosition234_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85000) = _AlbedoTex6;
				SamplerState Sampler263_g85000 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition263_g85000 = worldPos;
				half3 WorldNormal263_g85000 = WorldNormal;
				half4 localSampleStochastic3D263_g85000 = SampleStochastic3D( Texture263_g85000 , Sampler263_g85000 , Coords263_g85000 , WorldPosition263_g85000 , WorldNormal263_g85000 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8691_g84942 = localSamplePlanar2D238_g85000;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8691_g84942 = localSamplePlanar3D246_g85000;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8691_g84942 = localSampleStochastic2D234_g85000;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8691_g84942 = localSampleStochastic3D263_g85000;
				#else
				float4 staticSwitch8691_g84942 = localSamplePlanar2D238_g85000;
				#endif
				half4 Layer237_g84958 = staticSwitch8691_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85001) = _AlbedoTex7;
				SamplerState Sampler238_g85001 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85001 = Input_Coords_078752_g84942;
				half4 Coords238_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition238_g85001 = worldPos;
				half4 localSamplePlanar2D238_g85001 = SamplePlanar2D( Texture238_g85001 , Sampler238_g85001 , Coords238_g85001 , WorldPosition238_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85001) = _AlbedoTex7;
				SamplerState Sampler246_g85001 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition246_g85001 = worldPos;
				half3 WorldNormal246_g85001 = WorldNormal;
				half4 localSamplePlanar3D246_g85001 = SamplePlanar3D( Texture246_g85001 , Sampler246_g85001 , Coords246_g85001 , WorldPosition246_g85001 , WorldNormal246_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85001) = _AlbedoTex7;
				SamplerState Sampler234_g85001 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85001 = temp_output_37_0_g85001;
				float3 WorldPosition234_g85001 = worldPos;
				float4 localSampleStochastic2D234_g85001 = SampleStochastic2D( Texture234_g85001 , Sampler234_g85001 , Coords234_g85001 , WorldPosition234_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85001) = _AlbedoTex7;
				SamplerState Sampler263_g85001 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition263_g85001 = worldPos;
				half3 WorldNormal263_g85001 = WorldNormal;
				half4 localSampleStochastic3D263_g85001 = SampleStochastic3D( Texture263_g85001 , Sampler263_g85001 , Coords263_g85001 , WorldPosition263_g85001 , WorldNormal263_g85001 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8692_g84942 = localSamplePlanar2D238_g85001;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8692_g84942 = localSamplePlanar3D246_g85001;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8692_g84942 = localSampleStochastic2D234_g85001;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8692_g84942 = localSampleStochastic3D263_g85001;
				#else
				float4 staticSwitch8692_g84942 = localSamplePlanar2D238_g85001;
				#endif
				half4 Layer338_g84958 = staticSwitch8692_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85002) = _AlbedoTex8;
				SamplerState Sampler238_g85002 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85002 = Input_Coords_088749_g84942;
				half4 Coords238_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition238_g85002 = worldPos;
				half4 localSamplePlanar2D238_g85002 = SamplePlanar2D( Texture238_g85002 , Sampler238_g85002 , Coords238_g85002 , WorldPosition238_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85002) = _AlbedoTex8;
				SamplerState Sampler246_g85002 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition246_g85002 = worldPos;
				half3 WorldNormal246_g85002 = WorldNormal;
				half4 localSamplePlanar3D246_g85002 = SamplePlanar3D( Texture246_g85002 , Sampler246_g85002 , Coords246_g85002 , WorldPosition246_g85002 , WorldNormal246_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85002) = _AlbedoTex8;
				SamplerState Sampler234_g85002 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85002 = temp_output_37_0_g85002;
				float3 WorldPosition234_g85002 = worldPos;
				float4 localSampleStochastic2D234_g85002 = SampleStochastic2D( Texture234_g85002 , Sampler234_g85002 , Coords234_g85002 , WorldPosition234_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85002) = _AlbedoTex8;
				SamplerState Sampler263_g85002 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition263_g85002 = worldPos;
				half3 WorldNormal263_g85002 = WorldNormal;
				half4 localSampleStochastic3D263_g85002 = SampleStochastic3D( Texture263_g85002 , Sampler263_g85002 , Coords263_g85002 , WorldPosition263_g85002 , WorldNormal263_g85002 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8693_g84942 = localSamplePlanar2D238_g85002;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8693_g84942 = localSamplePlanar3D246_g85002;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8693_g84942 = localSampleStochastic2D234_g85002;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8693_g84942 = localSampleStochastic3D263_g85002;
				#else
				float4 staticSwitch8693_g84942 = localSamplePlanar2D238_g85002;
				#endif
				half4 Layer439_g84958 = staticSwitch8693_g84942;
				float4 weightedBlendVar31_g84958 = Weights52_g84958;
				float4 weightedBlend31_g84958 = ( weightedBlendVar31_g84958.x*Layer133_g84958 + weightedBlendVar31_g84958.y*Layer237_g84958 + weightedBlendVar31_g84958.z*Layer338_g84958 + weightedBlendVar31_g84958.w*Layer439_g84958 );
				half4 Terrain_Albedo_088665_g84942 = weightedBlend31_g84958;
				half4 Layer_0810_g84954 = Terrain_Albedo_088665_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8794_g84942 = weights_127362_g84942;
				#else
				float4 staticSwitch8794_g84942 = control_127362_g84942;
				#endif
				half4 Terrain_Weights_127710_g84942 = staticSwitch8794_g84942;
				half4 Weights52_g84968 = Terrain_Weights_127710_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85011) = _AlbedoTex9;
				SamplerState Sampler238_g85011 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85011 = Input_Coords_098833_g84942;
				half4 Coords238_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition238_g85011 = worldPos;
				half4 localSamplePlanar2D238_g85011 = SamplePlanar2D( Texture238_g85011 , Sampler238_g85011 , Coords238_g85011 , WorldPosition238_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85011) = _AlbedoTex9;
				SamplerState Sampler246_g85011 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition246_g85011 = worldPos;
				half3 WorldNormal246_g85011 = WorldNormal;
				half4 localSamplePlanar3D246_g85011 = SamplePlanar3D( Texture246_g85011 , Sampler246_g85011 , Coords246_g85011 , WorldPosition246_g85011 , WorldNormal246_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85011) = _AlbedoTex9;
				SamplerState Sampler234_g85011 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85011 = temp_output_37_0_g85011;
				float3 WorldPosition234_g85011 = worldPos;
				float4 localSampleStochastic2D234_g85011 = SampleStochastic2D( Texture234_g85011 , Sampler234_g85011 , Coords234_g85011 , WorldPosition234_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85011) = _AlbedoTex9;
				SamplerState Sampler263_g85011 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition263_g85011 = worldPos;
				half3 WorldNormal263_g85011 = WorldNormal;
				half4 localSampleStochastic3D263_g85011 = SampleStochastic3D( Texture263_g85011 , Sampler263_g85011 , Coords263_g85011 , WorldPosition263_g85011 , WorldNormal263_g85011 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8872_g84942 = localSamplePlanar2D238_g85011;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8872_g84942 = localSamplePlanar3D246_g85011;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8872_g84942 = localSampleStochastic2D234_g85011;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8872_g84942 = localSampleStochastic3D263_g85011;
				#else
				float4 staticSwitch8872_g84942 = localSamplePlanar2D238_g85011;
				#endif
				half4 Layer133_g84968 = staticSwitch8872_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85012) = _AlbedoTex10;
				SamplerState Sampler238_g85012 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85012 = Input_Coords_108834_g84942;
				half4 Coords238_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition238_g85012 = worldPos;
				half4 localSamplePlanar2D238_g85012 = SamplePlanar2D( Texture238_g85012 , Sampler238_g85012 , Coords238_g85012 , WorldPosition238_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85012) = _AlbedoTex10;
				SamplerState Sampler246_g85012 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition246_g85012 = worldPos;
				half3 WorldNormal246_g85012 = WorldNormal;
				half4 localSamplePlanar3D246_g85012 = SamplePlanar3D( Texture246_g85012 , Sampler246_g85012 , Coords246_g85012 , WorldPosition246_g85012 , WorldNormal246_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85012) = _AlbedoTex10;
				SamplerState Sampler234_g85012 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85012 = temp_output_37_0_g85012;
				float3 WorldPosition234_g85012 = worldPos;
				float4 localSampleStochastic2D234_g85012 = SampleStochastic2D( Texture234_g85012 , Sampler234_g85012 , Coords234_g85012 , WorldPosition234_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85012) = _AlbedoTex10;
				SamplerState Sampler263_g85012 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition263_g85012 = worldPos;
				half3 WorldNormal263_g85012 = WorldNormal;
				half4 localSampleStochastic3D263_g85012 = SampleStochastic3D( Texture263_g85012 , Sampler263_g85012 , Coords263_g85012 , WorldPosition263_g85012 , WorldNormal263_g85012 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8873_g84942 = localSamplePlanar2D238_g85012;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8873_g84942 = localSamplePlanar3D246_g85012;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8873_g84942 = localSampleStochastic2D234_g85012;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8873_g84942 = localSampleStochastic3D263_g85012;
				#else
				float4 staticSwitch8873_g84942 = localSamplePlanar2D238_g85012;
				#endif
				half4 Layer237_g84968 = staticSwitch8873_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85013) = _AlbedoTex11;
				SamplerState Sampler238_g85013 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85013 = Input_Coords_118835_g84942;
				half4 Coords238_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition238_g85013 = worldPos;
				half4 localSamplePlanar2D238_g85013 = SamplePlanar2D( Texture238_g85013 , Sampler238_g85013 , Coords238_g85013 , WorldPosition238_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85013) = _AlbedoTex11;
				SamplerState Sampler246_g85013 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition246_g85013 = worldPos;
				half3 WorldNormal246_g85013 = WorldNormal;
				half4 localSamplePlanar3D246_g85013 = SamplePlanar3D( Texture246_g85013 , Sampler246_g85013 , Coords246_g85013 , WorldPosition246_g85013 , WorldNormal246_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85013) = _AlbedoTex11;
				SamplerState Sampler234_g85013 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85013 = temp_output_37_0_g85013;
				float3 WorldPosition234_g85013 = worldPos;
				float4 localSampleStochastic2D234_g85013 = SampleStochastic2D( Texture234_g85013 , Sampler234_g85013 , Coords234_g85013 , WorldPosition234_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85013) = _AlbedoTex11;
				SamplerState Sampler263_g85013 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition263_g85013 = worldPos;
				half3 WorldNormal263_g85013 = WorldNormal;
				half4 localSampleStochastic3D263_g85013 = SampleStochastic3D( Texture263_g85013 , Sampler263_g85013 , Coords263_g85013 , WorldPosition263_g85013 , WorldNormal263_g85013 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8874_g84942 = localSamplePlanar2D238_g85013;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8874_g84942 = localSamplePlanar3D246_g85013;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8874_g84942 = localSampleStochastic2D234_g85013;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8874_g84942 = localSampleStochastic3D263_g85013;
				#else
				float4 staticSwitch8874_g84942 = localSamplePlanar2D238_g85013;
				#endif
				half4 Layer338_g84968 = staticSwitch8874_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85014) = _AlbedoTex12;
				SamplerState Sampler238_g85014 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85014 = Input_Coords_128836_g84942;
				half4 Coords238_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition238_g85014 = worldPos;
				half4 localSamplePlanar2D238_g85014 = SamplePlanar2D( Texture238_g85014 , Sampler238_g85014 , Coords238_g85014 , WorldPosition238_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85014) = _AlbedoTex12;
				SamplerState Sampler246_g85014 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition246_g85014 = worldPos;
				half3 WorldNormal246_g85014 = WorldNormal;
				half4 localSamplePlanar3D246_g85014 = SamplePlanar3D( Texture246_g85014 , Sampler246_g85014 , Coords246_g85014 , WorldPosition246_g85014 , WorldNormal246_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85014) = _AlbedoTex12;
				SamplerState Sampler234_g85014 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85014 = temp_output_37_0_g85014;
				float3 WorldPosition234_g85014 = worldPos;
				float4 localSampleStochastic2D234_g85014 = SampleStochastic2D( Texture234_g85014 , Sampler234_g85014 , Coords234_g85014 , WorldPosition234_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85014) = _AlbedoTex12;
				SamplerState Sampler263_g85014 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition263_g85014 = worldPos;
				half3 WorldNormal263_g85014 = WorldNormal;
				half4 localSampleStochastic3D263_g85014 = SampleStochastic3D( Texture263_g85014 , Sampler263_g85014 , Coords263_g85014 , WorldPosition263_g85014 , WorldNormal263_g85014 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8875_g84942 = localSamplePlanar2D238_g85014;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8875_g84942 = localSamplePlanar3D246_g85014;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8875_g84942 = localSampleStochastic2D234_g85014;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8875_g84942 = localSampleStochastic3D263_g85014;
				#else
				float4 staticSwitch8875_g84942 = localSamplePlanar2D238_g85014;
				#endif
				half4 Layer439_g84968 = staticSwitch8875_g84942;
				float4 weightedBlendVar31_g84968 = Weights52_g84968;
				float4 weightedBlend31_g84968 = ( weightedBlendVar31_g84968.x*Layer133_g84968 + weightedBlendVar31_g84968.y*Layer237_g84968 + weightedBlendVar31_g84968.z*Layer338_g84968 + weightedBlendVar31_g84968.w*Layer439_g84968 );
				half4 Terrain_Albedo_128851_g84942 = weightedBlend31_g84968;
				half4 Layer_1243_g84954 = Terrain_Albedo_128851_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8795_g84942 = weights_167362_g84942;
				#else
				float4 staticSwitch8795_g84942 = control_167362_g84942;
				#endif
				half4 Terrain_Weights_167709_g84942 = staticSwitch8795_g84942;
				half4 Weights52_g84978 = Terrain_Weights_167709_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85023) = _AlbedoTex13;
				SamplerState Sampler238_g85023 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85023 = Input_Coords_138960_g84942;
				half4 Coords238_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition238_g85023 = worldPos;
				half4 localSamplePlanar2D238_g85023 = SamplePlanar2D( Texture238_g85023 , Sampler238_g85023 , Coords238_g85023 , WorldPosition238_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85023) = _AlbedoTex13;
				SamplerState Sampler246_g85023 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition246_g85023 = worldPos;
				half3 WorldNormal246_g85023 = WorldNormal;
				half4 localSamplePlanar3D246_g85023 = SamplePlanar3D( Texture246_g85023 , Sampler246_g85023 , Coords246_g85023 , WorldPosition246_g85023 , WorldNormal246_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85023) = _AlbedoTex13;
				SamplerState Sampler234_g85023 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85023 = temp_output_37_0_g85023;
				float3 WorldPosition234_g85023 = worldPos;
				float4 localSampleStochastic2D234_g85023 = SampleStochastic2D( Texture234_g85023 , Sampler234_g85023 , Coords234_g85023 , WorldPosition234_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85023) = _AlbedoTex13;
				SamplerState Sampler263_g85023 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition263_g85023 = worldPos;
				half3 WorldNormal263_g85023 = WorldNormal;
				half4 localSampleStochastic3D263_g85023 = SampleStochastic3D( Texture263_g85023 , Sampler263_g85023 , Coords263_g85023 , WorldPosition263_g85023 , WorldNormal263_g85023 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch8972_g84942 = localSamplePlanar2D238_g85023;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch8972_g84942 = localSamplePlanar3D246_g85023;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch8972_g84942 = localSampleStochastic2D234_g85023;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch8972_g84942 = localSampleStochastic3D263_g85023;
				#else
				float4 staticSwitch8972_g84942 = localSamplePlanar2D238_g85023;
				#endif
				half4 Layer133_g84978 = staticSwitch8972_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85024) = _AlbedoTex14;
				SamplerState Sampler238_g85024 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85024 = Input_Coords_148961_g84942;
				half4 Coords238_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition238_g85024 = worldPos;
				half4 localSamplePlanar2D238_g85024 = SamplePlanar2D( Texture238_g85024 , Sampler238_g85024 , Coords238_g85024 , WorldPosition238_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85024) = _AlbedoTex14;
				SamplerState Sampler246_g85024 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition246_g85024 = worldPos;
				half3 WorldNormal246_g85024 = WorldNormal;
				half4 localSamplePlanar3D246_g85024 = SamplePlanar3D( Texture246_g85024 , Sampler246_g85024 , Coords246_g85024 , WorldPosition246_g85024 , WorldNormal246_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85024) = _AlbedoTex14;
				SamplerState Sampler234_g85024 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85024 = temp_output_37_0_g85024;
				float3 WorldPosition234_g85024 = worldPos;
				float4 localSampleStochastic2D234_g85024 = SampleStochastic2D( Texture234_g85024 , Sampler234_g85024 , Coords234_g85024 , WorldPosition234_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85024) = _AlbedoTex14;
				SamplerState Sampler263_g85024 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition263_g85024 = worldPos;
				half3 WorldNormal263_g85024 = WorldNormal;
				half4 localSampleStochastic3D263_g85024 = SampleStochastic3D( Texture263_g85024 , Sampler263_g85024 , Coords263_g85024 , WorldPosition263_g85024 , WorldNormal263_g85024 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch8973_g84942 = localSamplePlanar2D238_g85024;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch8973_g84942 = localSamplePlanar3D246_g85024;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch8973_g84942 = localSampleStochastic2D234_g85024;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch8973_g84942 = localSampleStochastic3D263_g85024;
				#else
				float4 staticSwitch8973_g84942 = localSamplePlanar2D238_g85024;
				#endif
				half4 Layer237_g84978 = staticSwitch8973_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85025) = _AlbedoTex15;
				SamplerState Sampler238_g85025 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85025 = Input_Coords_158962_g84942;
				half4 Coords238_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition238_g85025 = worldPos;
				half4 localSamplePlanar2D238_g85025 = SamplePlanar2D( Texture238_g85025 , Sampler238_g85025 , Coords238_g85025 , WorldPosition238_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85025) = _AlbedoTex15;
				SamplerState Sampler246_g85025 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition246_g85025 = worldPos;
				half3 WorldNormal246_g85025 = WorldNormal;
				half4 localSamplePlanar3D246_g85025 = SamplePlanar3D( Texture246_g85025 , Sampler246_g85025 , Coords246_g85025 , WorldPosition246_g85025 , WorldNormal246_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85025) = _AlbedoTex15;
				SamplerState Sampler234_g85025 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85025 = temp_output_37_0_g85025;
				float3 WorldPosition234_g85025 = worldPos;
				float4 localSampleStochastic2D234_g85025 = SampleStochastic2D( Texture234_g85025 , Sampler234_g85025 , Coords234_g85025 , WorldPosition234_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85025) = _AlbedoTex15;
				SamplerState Sampler263_g85025 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition263_g85025 = worldPos;
				half3 WorldNormal263_g85025 = WorldNormal;
				half4 localSampleStochastic3D263_g85025 = SampleStochastic3D( Texture263_g85025 , Sampler263_g85025 , Coords263_g85025 , WorldPosition263_g85025 , WorldNormal263_g85025 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch8974_g84942 = localSamplePlanar2D238_g85025;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch8974_g84942 = localSamplePlanar3D246_g85025;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch8974_g84942 = localSampleStochastic2D234_g85025;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch8974_g84942 = localSampleStochastic3D263_g85025;
				#else
				float4 staticSwitch8974_g84942 = localSamplePlanar2D238_g85025;
				#endif
				half4 Layer338_g84978 = staticSwitch8974_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85026) = _AlbedoTex16;
				SamplerState Sampler238_g85026 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85026 = Input_Coords_168959_g84942;
				half4 Coords238_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition238_g85026 = worldPos;
				half4 localSamplePlanar2D238_g85026 = SamplePlanar2D( Texture238_g85026 , Sampler238_g85026 , Coords238_g85026 , WorldPosition238_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85026) = _AlbedoTex16;
				SamplerState Sampler246_g85026 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition246_g85026 = worldPos;
				half3 WorldNormal246_g85026 = WorldNormal;
				half4 localSamplePlanar3D246_g85026 = SamplePlanar3D( Texture246_g85026 , Sampler246_g85026 , Coords246_g85026 , WorldPosition246_g85026 , WorldNormal246_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85026) = _AlbedoTex16;
				SamplerState Sampler234_g85026 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85026 = temp_output_37_0_g85026;
				float3 WorldPosition234_g85026 = worldPos;
				float4 localSampleStochastic2D234_g85026 = SampleStochastic2D( Texture234_g85026 , Sampler234_g85026 , Coords234_g85026 , WorldPosition234_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85026) = _AlbedoTex16;
				SamplerState Sampler263_g85026 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition263_g85026 = worldPos;
				half3 WorldNormal263_g85026 = WorldNormal;
				half4 localSampleStochastic3D263_g85026 = SampleStochastic3D( Texture263_g85026 , Sampler263_g85026 , Coords263_g85026 , WorldPosition263_g85026 , WorldNormal263_g85026 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch8975_g84942 = localSamplePlanar2D238_g85026;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch8975_g84942 = localSamplePlanar3D246_g85026;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch8975_g84942 = localSampleStochastic2D234_g85026;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch8975_g84942 = localSampleStochastic3D263_g85026;
				#else
				float4 staticSwitch8975_g84942 = localSamplePlanar2D238_g85026;
				#endif
				half4 Layer439_g84978 = staticSwitch8975_g84942;
				float4 weightedBlendVar31_g84978 = Weights52_g84978;
				float4 weightedBlend31_g84978 = ( weightedBlendVar31_g84978.x*Layer133_g84978 + weightedBlendVar31_g84978.y*Layer237_g84978 + weightedBlendVar31_g84978.z*Layer338_g84978 + weightedBlendVar31_g84978.w*Layer439_g84978 );
				half4 Terrain_Albedo_168986_g84942 = weightedBlend31_g84978;
				half4 Layer_1644_g84954 = Terrain_Albedo_168986_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84954 = Layer_045_g84954;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 + Layer_1243_g84954 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 + Layer_1243_g84954 + Layer_1644_g84954 );
				#else
				float4 staticSwitch40_g84954 = Layer_045_g84954;
				#endif
				half4 Blend_Albedo7468_g84942 = staticSwitch40_g84954;
				half3 Terrain_Albedo8037_g84806 = ( (Blend_Albedo7468_g84942).xyz * (_TerrainColor).rgb );
				float vertexToFrag11_g84941 = IN.ase_texcoord10.z;
				half Terrain_Mask_Pixel7898_g84806 = vertexToFrag11_g84941;
				half2 Main_Normal137_g84806 = temp_output_6555_0_g84806;
				float2 lerpResult3372_g84806 = lerp( float2( 0,0 ) , Main_Normal137_g84806 , _DetailNormalValue);
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half4 Normal_Packed45_g84894 = SAMPLE_TEXTURE2D( _SecondNormalTex, sampler_Linear_Repeat, Second_UVs17_g84806 );
				float2 appendResult58_g84894 = (float2(( (Normal_Packed45_g84894).x * (Normal_Packed45_g84894).w ) , (Normal_Packed45_g84894).y));
				half2 Normal_Default50_g84894 = appendResult58_g84894;
				half2 Normal_ASTC41_g84894 = (Normal_Packed45_g84894).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g84894 = Normal_ASTC41_g84894;
				#else
				float2 staticSwitch38_g84894 = Normal_Default50_g84894;
				#endif
				half2 Normal_NO_DTX544_g84894 = (Normal_Packed45_g84894).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g84894 = Normal_NO_DTX544_g84894;
				#else
				float2 staticSwitch37_g84894 = staticSwitch38_g84894;
				#endif
				float2 temp_output_6560_0_g84806 = ( (staticSwitch37_g84894*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g84897 = temp_output_6560_0_g84806;
				float2 break64_g84897 = Normal_Planar45_g84897;
				float3 appendResult65_g84897 = (float3(break64_g84897.x , 0.0 , break64_g84897.y));
				float2 ifLocalVar7655_g84806 = 0;
				if( _SecondUVsMode == 2.0 )
				ifLocalVar7655_g84806 = (mul( ase_worldToTangent, appendResult65_g84897 )).xy;
				else if( _SecondUVsMode < 2.0 )
				ifLocalVar7655_g84806 = temp_output_6560_0_g84806;
				half2 Second_Normal179_g84806 = ifLocalVar7655_g84806;
				float2 temp_output_36_0_g84906 = ( lerpResult3372_g84806 + Second_Normal179_g84806 );
				float2 lerpResult3376_g84806 = lerp( Main_Normal137_g84806 , temp_output_36_0_g84906 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float2 staticSwitch267_g84806 = lerpResult3376_g84806;
				#else
				float2 staticSwitch267_g84806 = Main_Normal137_g84806;
				#endif
				half2 Blend_Normal_Detail312_g84806 = staticSwitch267_g84806;
				float3 appendResult7888_g84806 = (float3(Blend_Normal_Detail312_g84806 , 1.0));
				float3 tanNormal7889_g84806 = appendResult7888_g84806;
				float3 worldNormal7889_g84806 = float3(dot(tanToWorld0,tanNormal7889_g84806), dot(tanToWorld1,tanNormal7889_g84806), dot(tanToWorld2,tanNormal7889_g84806));
				half3 Blend_NormalWS_Detail7890_g84806 = worldNormal7889_g84806;
				float temp_output_7901_0_g84806 = saturate( (Blend_NormalWS_Detail7890_g84806).y );
				float temp_output_7895_0_g84806 = ( temp_output_7901_0_g84806 * temp_output_7901_0_g84806 * temp_output_7901_0_g84806 * temp_output_7901_0_g84806 );
				half Terrain_Mask_Projection7875_g84806 = ( temp_output_7895_0_g84806 * _TerrainMode );
				float temp_output_7_0_g84940 = _TerrainBlendMinValue;
				float temp_output_10_0_g84940 = ( _TerrainBlendMaxValue - temp_output_7_0_g84940 );
				half Terrain_Mask7747_g84806 = saturate( ( ( saturate( ( Terrain_Mask_Pixel7898_g84806 + ( Terrain_Mask_Pixel7898_g84806 * Terrain_Mask_Projection7875_g84806 ) ) ) - temp_output_7_0_g84940 ) / ( temp_output_10_0_g84940 + 0.0001 ) ) );
				float3 lerpResult7748_g84806 = lerp( Blend_Albedo_Tinted2808_g84806 , Terrain_Albedo8037_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7792_g84806 = lerpResult7748_g84806;
				#else
				float3 staticSwitch7792_g84806 = Blend_Albedo_Tinted2808_g84806;
				#endif
				half3 Blend_Albedo_Terrain7752_g84806 = staticSwitch7792_g84806;
				float3 temp_output_3_0_g84933 = Blend_Albedo_Terrain7752_g84806;
				float dotResult20_g84933 = dot( temp_output_3_0_g84933 , float3(0.2126,0.7152,0.0722) );
				half Blend_Albedo_Grayscale5939_g84806 = dotResult20_g84933;
				float3 temp_cast_10 = (Blend_Albedo_Grayscale5939_g84806).xxx;
				float temp_output_82_0_g84825 = _LayerColorsValue;
				float temp_output_19_0_g84829 = TVE_ColorsUsage[(int)temp_output_82_0_g84825];
				float4 temp_output_91_19_g84825 = TVE_ColorsCoords;
				float3 vertexToFrag3890_g84806 = IN.ase_texcoord11.xyz;
				float3 WorldPosition3905_g84806 = vertexToFrag3890_g84806;
				float3 vertexToFrag4224_g84806 = IN.ase_texcoord12.xyz;
				float3 ObjectPosition4223_g84806 = vertexToFrag4224_g84806;
				float3 lerpResult4822_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _ColorsPositionMode);
				half2 UV94_g84825 = ( (temp_output_91_19_g84825).zw + ( (temp_output_91_19_g84825).xy * (lerpResult4822_g84806).xz ) );
				float4 tex2DArrayNode83_g84825 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_ColorsTex, sampler_Linear_Clamp, float3(UV94_g84825,temp_output_82_0_g84825), 0.0 );
				float4 temp_output_17_0_g84829 = tex2DArrayNode83_g84825;
				float4 temp_output_92_86_g84825 = TVE_ColorsParams;
				float4 temp_output_3_0_g84829 = temp_output_92_86_g84825;
				float4 ifLocalVar18_g84829 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84829 >= 0.5 )
				ifLocalVar18_g84829 = temp_output_17_0_g84829;
				else
				ifLocalVar18_g84829 = temp_output_3_0_g84829;
				float4 lerpResult22_g84829 = lerp( temp_output_3_0_g84829 , temp_output_17_0_g84829 , temp_output_19_0_g84829);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84829 = lerpResult22_g84829;
				#else
				float4 staticSwitch24_g84829 = ifLocalVar18_g84829;
				#endif
				half4 Global_Colors_Params5434_g84806 = staticSwitch24_g84829;
				float4 temp_output_346_0_g84813 = Global_Colors_Params5434_g84806;
				half Global_Colors_A1701_g84806 = saturate( (temp_output_346_0_g84813).w );
				half Colors_Influence3668_g84806 = Global_Colors_A1701_g84806;
				float temp_output_6306_0_g84806 = ( 1.0 - Colors_Influence3668_g84806 );
				float3 lerpResult3618_g84806 = lerp( Blend_Albedo_Terrain7752_g84806 , temp_cast_10 , ( 1.0 - ( temp_output_6306_0_g84806 * temp_output_6306_0_g84806 ) ));
				half3 Global_Colors_RGB1700_g84806 = (temp_output_346_0_g84813).xyz;
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g84922 = 2.0;
				#else
				float staticSwitch1_g84922 = 4.594794;
				#endif
				half3 Colors_RGB1954_g84806 = ( Global_Colors_RGB1700_g84806 * staticSwitch1_g84922 * _ColorsIntensityValue );
				half4 Weights52_g84950 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84950 = _Specular1;
				half4 Layer237_g84950 = _Specular2;
				half4 Layer338_g84950 = _Specular3;
				half4 Layer439_g84950 = _Specular4;
				float4 weightedBlendVar31_g84950 = Weights52_g84950;
				float4 weightedBlend31_g84950 = ( weightedBlendVar31_g84950.x*Layer133_g84950 + weightedBlendVar31_g84950.y*Layer237_g84950 + weightedBlendVar31_g84950.z*Layer338_g84950 + weightedBlendVar31_g84950.w*Layer439_g84950 );
				half4 Terrain_Specular_047390_g84942 = weightedBlend31_g84950;
				half4 Layer_045_g84957 = Terrain_Specular_047390_g84942;
				half4 Weights52_g84967 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84967 = _Specular5;
				half4 Layer237_g84967 = _Specular6;
				half4 Layer338_g84967 = _Specular7;
				half4 Layer439_g84967 = _Specular8;
				float4 weightedBlendVar31_g84967 = Weights52_g84967;
				float4 weightedBlend31_g84967 = ( weightedBlendVar31_g84967.x*Layer133_g84967 + weightedBlendVar31_g84967.y*Layer237_g84967 + weightedBlendVar31_g84967.z*Layer338_g84967 + weightedBlendVar31_g84967.w*Layer439_g84967 );
				half4 Terrain_Specular_088745_g84942 = weightedBlend31_g84967;
				half4 Layer_0810_g84957 = Terrain_Specular_088745_g84942;
				half4 Weights52_g84977 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84977 = _Specular9;
				half4 Layer237_g84977 = _Specular10;
				half4 Layer338_g84977 = _Specular11;
				half4 Layer439_g84977 = _Specular12;
				float4 weightedBlendVar31_g84977 = Weights52_g84977;
				float4 weightedBlend31_g84977 = ( weightedBlendVar31_g84977.x*Layer133_g84977 + weightedBlendVar31_g84977.y*Layer237_g84977 + weightedBlendVar31_g84977.z*Layer338_g84977 + weightedBlendVar31_g84977.w*Layer439_g84977 );
				half4 Terrain_Specular_128869_g84942 = weightedBlend31_g84977;
				half4 Layer_1243_g84957 = Terrain_Specular_128869_g84942;
				half4 Weights52_g84987 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84987 = _Specular13;
				half4 Layer237_g84987 = _Specular14;
				half4 Layer338_g84987 = _Specular15;
				half4 Layer439_g84987 = _Specular16;
				float4 weightedBlendVar31_g84987 = Weights52_g84987;
				float4 weightedBlend31_g84987 = ( weightedBlendVar31_g84987.x*Layer133_g84987 + weightedBlendVar31_g84987.y*Layer237_g84987 + weightedBlendVar31_g84987.z*Layer338_g84987 + weightedBlendVar31_g84987.w*Layer439_g84987 );
				half4 Terrain_Specular_169019_g84942 = weightedBlend31_g84987;
				half4 Layer_1644_g84957 = Terrain_Specular_169019_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84957 = Layer_045_g84957;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 + Layer_1243_g84957 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 + Layer_1243_g84957 + Layer_1644_g84957 );
				#else
				float4 staticSwitch40_g84957 = Layer_045_g84957;
				#endif
				half4 Blend_Specular7446_g84942 = staticSwitch40_g84957;
				half Terrain_ColorsMask7937_g84806 = ( (Blend_Specular7446_g84942).a * (Blend_Albedo7468_g84942).w );
				float lerpResult7939_g84806 = lerp( Blend_MaskRemap_Detail6621_g84806 , Terrain_ColorsMask7937_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float staticSwitch7922_g84806 = lerpResult7939_g84806;
				#else
				float staticSwitch7922_g84806 = Blend_MaskRemap_Detail6621_g84806;
				#endif
				half Blend_ColorsMask_Terrain7921_g84806 = staticSwitch7922_g84806;
				half Colors_Value3692_g84806 = ( Blend_ColorsMask_Terrain7921_g84806 * _GlobalColors );
				float3 ObjectPosition_Shifted7481_g84806 = ( ObjectPosition4223_g84806 - TVE_WorldOrigin );
				half3 Input_Position167_g84900 = ObjectPosition_Shifted7481_g84806;
				float dotResult156_g84900 = dot( (Input_Position167_g84900).xz , float2( 12.9898,78.233 ) );
				half Vertex_DynamicMode5112_g84806 = _VertexDynamicMode;
				half Input_DynamicMode120_g84900 = Vertex_DynamicMode5112_g84806;
				float Postion_Random162_g84900 = ( sin( dotResult156_g84900 ) * ( 1.0 - Input_DynamicMode120_g84900 ) );
				float Mesh_Variation16_g84806 = IN.ase_color.r;
				half Input_Variation124_g84900 = Mesh_Variation16_g84806;
				half ObjectData20_g84902 = frac( ( Postion_Random162_g84900 + Input_Variation124_g84900 ) );
				half WorldData19_g84902 = Input_Variation124_g84900;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84902 = WorldData19_g84902;
				#else
				float staticSwitch14_g84902 = ObjectData20_g84902;
				#endif
				float temp_output_112_0_g84900 = staticSwitch14_g84902;
				float clampResult171_g84900 = clamp( temp_output_112_0_g84900 , 0.01 , 0.99 );
				float Global_MeshVariation5104_g84806 = clampResult171_g84900;
				float lerpResult3870_g84806 = lerp( 1.0 , Global_MeshVariation5104_g84806 , _ColorsVariationValue);
				half Colors_Variation3650_g84806 = lerpResult3870_g84806;
				half Occlusion_Alpha6463_g84806 = _VertexOcclusionColor.a;
				float lerpResult8028_g84806 = lerp( Occlusion_Mask6432_g84806 , ( 1.0 - Occlusion_Mask6432_g84806 ) , _VertexOcclusionColorsMode);
				float lerpResult8026_g84806 = lerp( Occlusion_Alpha6463_g84806 , 1.0 , lerpResult8028_g84806);
				half Occlusion_Colors6450_g84806 = lerpResult8026_g84806;
				float3 temp_output_3_0_g84934 = ( Blend_Albedo_Terrain7752_g84806 * Tint_Gradient_Color5769_g84806 * Tint_Noise_Color5770_g84806 * Tint_User_Color7335_g84806 );
				float dotResult20_g84934 = dot( temp_output_3_0_g84934 , float3(0.2126,0.7152,0.0722) );
				float clampResult6740_g84806 = clamp( saturate( ( dotResult20_g84934 * 5.0 ) ) , 0.2 , 1.0 );
				half Blend_Albedo_Globals6410_g84806 = clampResult6740_g84806;
				float temp_output_7_0_g84930 = 0.1;
				float temp_output_10_0_g84930 = ( 0.2 - temp_output_7_0_g84930 );
				float lerpResult16_g84923 = lerp( 0.0 , saturate( ( ( ( Colors_Value3692_g84806 * Colors_Influence3668_g84806 * Colors_Variation3650_g84806 * Occlusion_Colors6450_g84806 * Blend_Albedo_Globals6410_g84806 ) - temp_output_7_0_g84930 ) / ( temp_output_10_0_g84930 + 0.0001 ) ) ) , TVE_IsEnabled);
				float3 lerpResult3628_g84806 = lerp( Blend_Albedo_Terrain7752_g84806 , ( lerpResult3618_g84806 * Colors_RGB1954_g84806 ) , lerpResult16_g84923);
				half3 Blend_Albedo_Colored_High6027_g84806 = lerpResult3628_g84806;
				half3 Blend_Albedo_Colored863_g84806 = Blend_Albedo_Colored_High6027_g84806;
				half3 Global_OverlayColor1758_g84806 = (TVE_OverlayColor).rgb;
				float temp_output_84_0_g84820 = _LayerExtrasValue;
				float temp_output_19_0_g84824 = TVE_ExtrasUsage[(int)temp_output_84_0_g84820];
				float4 temp_output_93_19_g84820 = TVE_ExtrasCoords;
				float3 lerpResult4827_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _ExtrasPositionMode);
				half2 UV96_g84820 = ( (temp_output_93_19_g84820).zw + ( (temp_output_93_19_g84820).xy * (lerpResult4827_g84806).xz ) );
				float4 tex2DArrayNode48_g84820 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_ExtrasTex, sampler_Linear_Clamp, float3(UV96_g84820,temp_output_84_0_g84820), 0.0 );
				float4 temp_output_17_0_g84824 = tex2DArrayNode48_g84820;
				float4 temp_output_94_85_g84820 = TVE_ExtrasParams;
				float4 temp_output_3_0_g84824 = temp_output_94_85_g84820;
				float4 ifLocalVar18_g84824 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84824 >= 0.5 )
				ifLocalVar18_g84824 = temp_output_17_0_g84824;
				else
				ifLocalVar18_g84824 = temp_output_3_0_g84824;
				float4 lerpResult22_g84824 = lerp( temp_output_3_0_g84824 , temp_output_17_0_g84824 , temp_output_19_0_g84824);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84824 = lerpResult22_g84824;
				#else
				float4 staticSwitch24_g84824 = ifLocalVar18_g84824;
				#endif
				half4 Global_Extras_Params5440_g84806 = staticSwitch24_g84824;
				float4 break456_g84833 = Global_Extras_Params5440_g84806;
				half Global_Extras_Overlay156_g84806 = break456_g84833.z;
				float lerpResult1065_g84806 = lerp( 1.0 , Global_MeshVariation5104_g84806 , _OverlayVariationValue);
				half Overlay_Variation4560_g84806 = lerpResult1065_g84806;
				half Overlay_Value5738_g84806 = ( _GlobalOverlay * Global_Extras_Overlay156_g84806 * Overlay_Variation4560_g84806 );
				half4 Weights52_g84943 = Terrain_Weights_046781_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84991) = _NormalTex1;
				SamplerState Sampler238_g84991 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84991 = Input_Coords_016785_g84942;
				half4 Coords238_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition238_g84991 = worldPos;
				half4 localSamplePlanar2D238_g84991 = SamplePlanar2D( Texture238_g84991 , Sampler238_g84991 , Coords238_g84991 , WorldPosition238_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84991) = _NormalTex1;
				SamplerState Sampler246_g84991 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition246_g84991 = worldPos;
				half3 WorldNormal246_g84991 = WorldNormal;
				half4 localSamplePlanar3D246_g84991 = SamplePlanar3D( Texture246_g84991 , Sampler246_g84991 , Coords246_g84991 , WorldPosition246_g84991 , WorldNormal246_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84991) = _NormalTex1;
				SamplerState Sampler234_g84991 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84991 = temp_output_37_0_g84991;
				float3 WorldPosition234_g84991 = worldPos;
				float4 localSampleStochastic2D234_g84991 = SampleStochastic2D( Texture234_g84991 , Sampler234_g84991 , Coords234_g84991 , WorldPosition234_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84991) = _NormalTex1;
				SamplerState Sampler263_g84991 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition263_g84991 = worldPos;
				half3 WorldNormal263_g84991 = WorldNormal;
				half4 localSampleStochastic3D263_g84991 = SampleStochastic3D( Texture263_g84991 , Sampler263_g84991 , Coords263_g84991 , WorldPosition263_g84991 , WorldNormal263_g84991 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8635_g84942 = localSamplePlanar2D238_g84991;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8635_g84942 = localSamplePlanar3D246_g84991;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8635_g84942 = localSampleStochastic2D234_g84991;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8635_g84942 = localSampleStochastic3D263_g84991;
				#else
				float4 staticSwitch8635_g84942 = localSamplePlanar2D238_g84991;
				#endif
				half4 Layer133_g84943 = staticSwitch8635_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84992) = _NormalTex2;
				SamplerState Sampler238_g84992 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84992 = Input_Coords_026787_g84942;
				half4 Coords238_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition238_g84992 = worldPos;
				half4 localSamplePlanar2D238_g84992 = SamplePlanar2D( Texture238_g84992 , Sampler238_g84992 , Coords238_g84992 , WorldPosition238_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84992) = _NormalTex2;
				SamplerState Sampler246_g84992 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition246_g84992 = worldPos;
				half3 WorldNormal246_g84992 = WorldNormal;
				half4 localSamplePlanar3D246_g84992 = SamplePlanar3D( Texture246_g84992 , Sampler246_g84992 , Coords246_g84992 , WorldPosition246_g84992 , WorldNormal246_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84992) = _NormalTex2;
				SamplerState Sampler234_g84992 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84992 = temp_output_37_0_g84992;
				float3 WorldPosition234_g84992 = worldPos;
				float4 localSampleStochastic2D234_g84992 = SampleStochastic2D( Texture234_g84992 , Sampler234_g84992 , Coords234_g84992 , WorldPosition234_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84992) = _NormalTex2;
				SamplerState Sampler263_g84992 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition263_g84992 = worldPos;
				half3 WorldNormal263_g84992 = WorldNormal;
				half4 localSampleStochastic3D263_g84992 = SampleStochastic3D( Texture263_g84992 , Sampler263_g84992 , Coords263_g84992 , WorldPosition263_g84992 , WorldNormal263_g84992 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8636_g84942 = localSamplePlanar2D238_g84992;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8636_g84942 = localSamplePlanar3D246_g84992;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8636_g84942 = localSampleStochastic2D234_g84992;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8636_g84942 = localSampleStochastic3D263_g84992;
				#else
				float4 staticSwitch8636_g84942 = localSamplePlanar2D238_g84992;
				#endif
				half4 Layer237_g84943 = staticSwitch8636_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84993) = _NormalTex3;
				SamplerState Sampler238_g84993 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84993 = Input_Coords_036789_g84942;
				half4 Coords238_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition238_g84993 = worldPos;
				half4 localSamplePlanar2D238_g84993 = SamplePlanar2D( Texture238_g84993 , Sampler238_g84993 , Coords238_g84993 , WorldPosition238_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84993) = _NormalTex3;
				SamplerState Sampler246_g84993 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition246_g84993 = worldPos;
				half3 WorldNormal246_g84993 = WorldNormal;
				half4 localSamplePlanar3D246_g84993 = SamplePlanar3D( Texture246_g84993 , Sampler246_g84993 , Coords246_g84993 , WorldPosition246_g84993 , WorldNormal246_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84993) = _NormalTex3;
				SamplerState Sampler234_g84993 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84993 = temp_output_37_0_g84993;
				float3 WorldPosition234_g84993 = worldPos;
				float4 localSampleStochastic2D234_g84993 = SampleStochastic2D( Texture234_g84993 , Sampler234_g84993 , Coords234_g84993 , WorldPosition234_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84993) = _NormalTex3;
				SamplerState Sampler263_g84993 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition263_g84993 = worldPos;
				half3 WorldNormal263_g84993 = WorldNormal;
				half4 localSampleStochastic3D263_g84993 = SampleStochastic3D( Texture263_g84993 , Sampler263_g84993 , Coords263_g84993 , WorldPosition263_g84993 , WorldNormal263_g84993 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8637_g84942 = localSamplePlanar2D238_g84993;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8637_g84942 = localSamplePlanar3D246_g84993;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8637_g84942 = localSampleStochastic2D234_g84993;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8637_g84942 = localSampleStochastic3D263_g84993;
				#else
				float4 staticSwitch8637_g84942 = localSamplePlanar2D238_g84993;
				#endif
				half4 Layer338_g84943 = staticSwitch8637_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84994) = _NormalTex4;
				SamplerState Sampler238_g84994 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84994 = Input_Coords_046791_g84942;
				half4 Coords238_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition238_g84994 = worldPos;
				half4 localSamplePlanar2D238_g84994 = SamplePlanar2D( Texture238_g84994 , Sampler238_g84994 , Coords238_g84994 , WorldPosition238_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84994) = _NormalTex4;
				SamplerState Sampler246_g84994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition246_g84994 = worldPos;
				half3 WorldNormal246_g84994 = WorldNormal;
				half4 localSamplePlanar3D246_g84994 = SamplePlanar3D( Texture246_g84994 , Sampler246_g84994 , Coords246_g84994 , WorldPosition246_g84994 , WorldNormal246_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84994) = _NormalTex4;
				SamplerState Sampler234_g84994 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84994 = temp_output_37_0_g84994;
				float3 WorldPosition234_g84994 = worldPos;
				float4 localSampleStochastic2D234_g84994 = SampleStochastic2D( Texture234_g84994 , Sampler234_g84994 , Coords234_g84994 , WorldPosition234_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84994) = _NormalTex4;
				SamplerState Sampler263_g84994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition263_g84994 = worldPos;
				half3 WorldNormal263_g84994 = WorldNormal;
				half4 localSampleStochastic3D263_g84994 = SampleStochastic3D( Texture263_g84994 , Sampler263_g84994 , Coords263_g84994 , WorldPosition263_g84994 , WorldNormal263_g84994 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8638_g84942 = localSamplePlanar2D238_g84994;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8638_g84942 = localSamplePlanar3D246_g84994;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8638_g84942 = localSampleStochastic2D234_g84994;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8638_g84942 = localSampleStochastic3D263_g84994;
				#else
				float4 staticSwitch8638_g84942 = localSamplePlanar2D238_g84994;
				#endif
				half4 Layer439_g84943 = staticSwitch8638_g84942;
				float4 weightedBlendVar31_g84943 = Weights52_g84943;
				float4 weightedBlend31_g84943 = ( weightedBlendVar31_g84943.x*Layer133_g84943 + weightedBlendVar31_g84943.y*Layer237_g84943 + weightedBlendVar31_g84943.z*Layer338_g84943 + weightedBlendVar31_g84943.w*Layer439_g84943 );
				half4 Terrain_Normal_047202_g84942 = weightedBlend31_g84943;
				half4 Layer_045_g84953 = Terrain_Normal_047202_g84942;
				half4 Weights52_g84959 = Terrain_Weights_087340_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85003) = _NormalTex5;
				SamplerState Sampler238_g85003 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85003 = Input_Coords_058750_g84942;
				half4 Coords238_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition238_g85003 = worldPos;
				half4 localSamplePlanar2D238_g85003 = SamplePlanar2D( Texture238_g85003 , Sampler238_g85003 , Coords238_g85003 , WorldPosition238_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85003) = _NormalTex5;
				SamplerState Sampler246_g85003 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition246_g85003 = worldPos;
				half3 WorldNormal246_g85003 = WorldNormal;
				half4 localSamplePlanar3D246_g85003 = SamplePlanar3D( Texture246_g85003 , Sampler246_g85003 , Coords246_g85003 , WorldPosition246_g85003 , WorldNormal246_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85003) = _NormalTex5;
				SamplerState Sampler234_g85003 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85003 = temp_output_37_0_g85003;
				float3 WorldPosition234_g85003 = worldPos;
				float4 localSampleStochastic2D234_g85003 = SampleStochastic2D( Texture234_g85003 , Sampler234_g85003 , Coords234_g85003 , WorldPosition234_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85003) = _NormalTex5;
				SamplerState Sampler263_g85003 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition263_g85003 = worldPos;
				half3 WorldNormal263_g85003 = WorldNormal;
				half4 localSampleStochastic3D263_g85003 = SampleStochastic3D( Texture263_g85003 , Sampler263_g85003 , Coords263_g85003 , WorldPosition263_g85003 , WorldNormal263_g85003 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8686_g84942 = localSamplePlanar2D238_g85003;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8686_g84942 = localSamplePlanar3D246_g85003;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8686_g84942 = localSampleStochastic2D234_g85003;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8686_g84942 = localSampleStochastic3D263_g85003;
				#else
				float4 staticSwitch8686_g84942 = localSamplePlanar2D238_g85003;
				#endif
				half4 Layer133_g84959 = staticSwitch8686_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85004) = _NormalTex6;
				SamplerState Sampler238_g85004 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85004 = Input_Coords_068751_g84942;
				half4 Coords238_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition238_g85004 = worldPos;
				half4 localSamplePlanar2D238_g85004 = SamplePlanar2D( Texture238_g85004 , Sampler238_g85004 , Coords238_g85004 , WorldPosition238_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85004) = _NormalTex6;
				SamplerState Sampler246_g85004 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition246_g85004 = worldPos;
				half3 WorldNormal246_g85004 = WorldNormal;
				half4 localSamplePlanar3D246_g85004 = SamplePlanar3D( Texture246_g85004 , Sampler246_g85004 , Coords246_g85004 , WorldPosition246_g85004 , WorldNormal246_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85004) = _NormalTex6;
				SamplerState Sampler234_g85004 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85004 = temp_output_37_0_g85004;
				float3 WorldPosition234_g85004 = worldPos;
				float4 localSampleStochastic2D234_g85004 = SampleStochastic2D( Texture234_g85004 , Sampler234_g85004 , Coords234_g85004 , WorldPosition234_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85004) = _NormalTex6;
				SamplerState Sampler263_g85004 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition263_g85004 = worldPos;
				half3 WorldNormal263_g85004 = WorldNormal;
				half4 localSampleStochastic3D263_g85004 = SampleStochastic3D( Texture263_g85004 , Sampler263_g85004 , Coords263_g85004 , WorldPosition263_g85004 , WorldNormal263_g85004 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8687_g84942 = localSamplePlanar2D238_g85004;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8687_g84942 = localSamplePlanar3D246_g85004;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8687_g84942 = localSampleStochastic2D234_g85004;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8687_g84942 = localSampleStochastic3D263_g85004;
				#else
				float4 staticSwitch8687_g84942 = localSamplePlanar2D238_g85004;
				#endif
				half4 Layer237_g84959 = staticSwitch8687_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85005) = _NormalTex7;
				SamplerState Sampler238_g85005 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85005 = Input_Coords_078752_g84942;
				half4 Coords238_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition238_g85005 = worldPos;
				half4 localSamplePlanar2D238_g85005 = SamplePlanar2D( Texture238_g85005 , Sampler238_g85005 , Coords238_g85005 , WorldPosition238_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85005) = _NormalTex7;
				SamplerState Sampler246_g85005 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition246_g85005 = worldPos;
				half3 WorldNormal246_g85005 = WorldNormal;
				half4 localSamplePlanar3D246_g85005 = SamplePlanar3D( Texture246_g85005 , Sampler246_g85005 , Coords246_g85005 , WorldPosition246_g85005 , WorldNormal246_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85005) = _NormalTex7;
				SamplerState Sampler234_g85005 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85005 = temp_output_37_0_g85005;
				float3 WorldPosition234_g85005 = worldPos;
				float4 localSampleStochastic2D234_g85005 = SampleStochastic2D( Texture234_g85005 , Sampler234_g85005 , Coords234_g85005 , WorldPosition234_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85005) = _NormalTex7;
				SamplerState Sampler263_g85005 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition263_g85005 = worldPos;
				half3 WorldNormal263_g85005 = WorldNormal;
				half4 localSampleStochastic3D263_g85005 = SampleStochastic3D( Texture263_g85005 , Sampler263_g85005 , Coords263_g85005 , WorldPosition263_g85005 , WorldNormal263_g85005 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8688_g84942 = localSamplePlanar2D238_g85005;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8688_g84942 = localSamplePlanar3D246_g85005;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8688_g84942 = localSampleStochastic2D234_g85005;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8688_g84942 = localSampleStochastic3D263_g85005;
				#else
				float4 staticSwitch8688_g84942 = localSamplePlanar2D238_g85005;
				#endif
				half4 Layer338_g84959 = staticSwitch8688_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85006) = _NormalTex8;
				SamplerState Sampler238_g85006 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85006 = Input_Coords_088749_g84942;
				half4 Coords238_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition238_g85006 = worldPos;
				half4 localSamplePlanar2D238_g85006 = SamplePlanar2D( Texture238_g85006 , Sampler238_g85006 , Coords238_g85006 , WorldPosition238_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85006) = _NormalTex8;
				SamplerState Sampler246_g85006 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition246_g85006 = worldPos;
				half3 WorldNormal246_g85006 = WorldNormal;
				half4 localSamplePlanar3D246_g85006 = SamplePlanar3D( Texture246_g85006 , Sampler246_g85006 , Coords246_g85006 , WorldPosition246_g85006 , WorldNormal246_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85006) = _NormalTex8;
				SamplerState Sampler234_g85006 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85006 = temp_output_37_0_g85006;
				float3 WorldPosition234_g85006 = worldPos;
				float4 localSampleStochastic2D234_g85006 = SampleStochastic2D( Texture234_g85006 , Sampler234_g85006 , Coords234_g85006 , WorldPosition234_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85006) = _NormalTex8;
				SamplerState Sampler263_g85006 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition263_g85006 = worldPos;
				half3 WorldNormal263_g85006 = WorldNormal;
				half4 localSampleStochastic3D263_g85006 = SampleStochastic3D( Texture263_g85006 , Sampler263_g85006 , Coords263_g85006 , WorldPosition263_g85006 , WorldNormal263_g85006 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8689_g84942 = localSamplePlanar2D238_g85006;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8689_g84942 = localSamplePlanar3D246_g85006;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8689_g84942 = localSampleStochastic2D234_g85006;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8689_g84942 = localSampleStochastic3D263_g85006;
				#else
				float4 staticSwitch8689_g84942 = localSamplePlanar2D238_g85006;
				#endif
				half4 Layer439_g84959 = staticSwitch8689_g84942;
				float4 weightedBlendVar31_g84959 = Weights52_g84959;
				float4 weightedBlend31_g84959 = ( weightedBlendVar31_g84959.x*Layer133_g84959 + weightedBlendVar31_g84959.y*Layer237_g84959 + weightedBlendVar31_g84959.z*Layer338_g84959 + weightedBlendVar31_g84959.w*Layer439_g84959 );
				half4 Terrain_Normal_088684_g84942 = weightedBlend31_g84959;
				half4 Layer_0810_g84953 = Terrain_Normal_088684_g84942;
				half4 Weights52_g84969 = Terrain_Weights_127710_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85015) = _NormalTex9;
				SamplerState Sampler238_g85015 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85015 = Input_Coords_098833_g84942;
				half4 Coords238_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition238_g85015 = worldPos;
				half4 localSamplePlanar2D238_g85015 = SamplePlanar2D( Texture238_g85015 , Sampler238_g85015 , Coords238_g85015 , WorldPosition238_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85015) = _NormalTex9;
				SamplerState Sampler246_g85015 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition246_g85015 = worldPos;
				half3 WorldNormal246_g85015 = WorldNormal;
				half4 localSamplePlanar3D246_g85015 = SamplePlanar3D( Texture246_g85015 , Sampler246_g85015 , Coords246_g85015 , WorldPosition246_g85015 , WorldNormal246_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85015) = _NormalTex9;
				SamplerState Sampler234_g85015 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85015 = temp_output_37_0_g85015;
				float3 WorldPosition234_g85015 = worldPos;
				float4 localSampleStochastic2D234_g85015 = SampleStochastic2D( Texture234_g85015 , Sampler234_g85015 , Coords234_g85015 , WorldPosition234_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85015) = _NormalTex9;
				SamplerState Sampler263_g85015 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition263_g85015 = worldPos;
				half3 WorldNormal263_g85015 = WorldNormal;
				half4 localSampleStochastic3D263_g85015 = SampleStochastic3D( Texture263_g85015 , Sampler263_g85015 , Coords263_g85015 , WorldPosition263_g85015 , WorldNormal263_g85015 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8849_g84942 = localSamplePlanar2D238_g85015;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8849_g84942 = localSamplePlanar3D246_g85015;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8849_g84942 = localSampleStochastic2D234_g85015;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8849_g84942 = localSampleStochastic3D263_g85015;
				#else
				float4 staticSwitch8849_g84942 = localSamplePlanar2D238_g85015;
				#endif
				half4 Layer133_g84969 = staticSwitch8849_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85016) = _NormalTex10;
				SamplerState Sampler238_g85016 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85016 = Input_Coords_108834_g84942;
				half4 Coords238_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition238_g85016 = worldPos;
				half4 localSamplePlanar2D238_g85016 = SamplePlanar2D( Texture238_g85016 , Sampler238_g85016 , Coords238_g85016 , WorldPosition238_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85016) = _NormalTex10;
				SamplerState Sampler246_g85016 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition246_g85016 = worldPos;
				half3 WorldNormal246_g85016 = WorldNormal;
				half4 localSamplePlanar3D246_g85016 = SamplePlanar3D( Texture246_g85016 , Sampler246_g85016 , Coords246_g85016 , WorldPosition246_g85016 , WorldNormal246_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85016) = _NormalTex10;
				SamplerState Sampler234_g85016 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85016 = temp_output_37_0_g85016;
				float3 WorldPosition234_g85016 = worldPos;
				float4 localSampleStochastic2D234_g85016 = SampleStochastic2D( Texture234_g85016 , Sampler234_g85016 , Coords234_g85016 , WorldPosition234_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85016) = _NormalTex10;
				SamplerState Sampler263_g85016 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition263_g85016 = worldPos;
				half3 WorldNormal263_g85016 = WorldNormal;
				half4 localSampleStochastic3D263_g85016 = SampleStochastic3D( Texture263_g85016 , Sampler263_g85016 , Coords263_g85016 , WorldPosition263_g85016 , WorldNormal263_g85016 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8876_g84942 = localSamplePlanar2D238_g85016;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8876_g84942 = localSamplePlanar3D246_g85016;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8876_g84942 = localSampleStochastic2D234_g85016;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8876_g84942 = localSampleStochastic3D263_g85016;
				#else
				float4 staticSwitch8876_g84942 = localSamplePlanar2D238_g85016;
				#endif
				half4 Layer237_g84969 = staticSwitch8876_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85017) = _NormalTex11;
				SamplerState Sampler238_g85017 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85017 = Input_Coords_118835_g84942;
				half4 Coords238_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition238_g85017 = worldPos;
				half4 localSamplePlanar2D238_g85017 = SamplePlanar2D( Texture238_g85017 , Sampler238_g85017 , Coords238_g85017 , WorldPosition238_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85017) = _NormalTex11;
				SamplerState Sampler246_g85017 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition246_g85017 = worldPos;
				half3 WorldNormal246_g85017 = WorldNormal;
				half4 localSamplePlanar3D246_g85017 = SamplePlanar3D( Texture246_g85017 , Sampler246_g85017 , Coords246_g85017 , WorldPosition246_g85017 , WorldNormal246_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85017) = _NormalTex11;
				SamplerState Sampler234_g85017 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85017 = temp_output_37_0_g85017;
				float3 WorldPosition234_g85017 = worldPos;
				float4 localSampleStochastic2D234_g85017 = SampleStochastic2D( Texture234_g85017 , Sampler234_g85017 , Coords234_g85017 , WorldPosition234_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85017) = _NormalTex11;
				SamplerState Sampler263_g85017 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition263_g85017 = worldPos;
				half3 WorldNormal263_g85017 = WorldNormal;
				half4 localSampleStochastic3D263_g85017 = SampleStochastic3D( Texture263_g85017 , Sampler263_g85017 , Coords263_g85017 , WorldPosition263_g85017 , WorldNormal263_g85017 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8850_g84942 = localSamplePlanar2D238_g85017;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8850_g84942 = localSamplePlanar3D246_g85017;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8850_g84942 = localSampleStochastic2D234_g85017;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8850_g84942 = localSampleStochastic3D263_g85017;
				#else
				float4 staticSwitch8850_g84942 = localSamplePlanar2D238_g85017;
				#endif
				half4 Layer338_g84969 = staticSwitch8850_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85018) = _NormalTex12;
				SamplerState Sampler238_g85018 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85018 = Input_Coords_128836_g84942;
				half4 Coords238_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition238_g85018 = worldPos;
				half4 localSamplePlanar2D238_g85018 = SamplePlanar2D( Texture238_g85018 , Sampler238_g85018 , Coords238_g85018 , WorldPosition238_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85018) = _NormalTex12;
				SamplerState Sampler246_g85018 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition246_g85018 = worldPos;
				half3 WorldNormal246_g85018 = WorldNormal;
				half4 localSamplePlanar3D246_g85018 = SamplePlanar3D( Texture246_g85018 , Sampler246_g85018 , Coords246_g85018 , WorldPosition246_g85018 , WorldNormal246_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85018) = _NormalTex12;
				SamplerState Sampler234_g85018 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85018 = temp_output_37_0_g85018;
				float3 WorldPosition234_g85018 = worldPos;
				float4 localSampleStochastic2D234_g85018 = SampleStochastic2D( Texture234_g85018 , Sampler234_g85018 , Coords234_g85018 , WorldPosition234_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85018) = _NormalTex12;
				SamplerState Sampler263_g85018 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition263_g85018 = worldPos;
				half3 WorldNormal263_g85018 = WorldNormal;
				half4 localSampleStochastic3D263_g85018 = SampleStochastic3D( Texture263_g85018 , Sampler263_g85018 , Coords263_g85018 , WorldPosition263_g85018 , WorldNormal263_g85018 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8877_g84942 = localSamplePlanar2D238_g85018;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8877_g84942 = localSamplePlanar3D246_g85018;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8877_g84942 = localSampleStochastic2D234_g85018;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8877_g84942 = localSampleStochastic3D263_g85018;
				#else
				float4 staticSwitch8877_g84942 = localSamplePlanar2D238_g85018;
				#endif
				half4 Layer439_g84969 = staticSwitch8877_g84942;
				float4 weightedBlendVar31_g84969 = Weights52_g84969;
				float4 weightedBlend31_g84969 = ( weightedBlendVar31_g84969.x*Layer133_g84969 + weightedBlendVar31_g84969.y*Layer237_g84969 + weightedBlendVar31_g84969.z*Layer338_g84969 + weightedBlendVar31_g84969.w*Layer439_g84969 );
				half4 Terrain_Normal_128865_g84942 = weightedBlend31_g84969;
				half4 Layer_1243_g84953 = Terrain_Normal_128865_g84942;
				half4 Weights52_g84979 = Terrain_Weights_167709_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85034) = _NormalTex13;
				SamplerState Sampler238_g85034 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85034 = Input_Coords_138960_g84942;
				half4 Coords238_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition238_g85034 = worldPos;
				half4 localSamplePlanar2D238_g85034 = SamplePlanar2D( Texture238_g85034 , Sampler238_g85034 , Coords238_g85034 , WorldPosition238_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85034) = _NormalTex13;
				SamplerState Sampler246_g85034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition246_g85034 = worldPos;
				half3 WorldNormal246_g85034 = WorldNormal;
				half4 localSamplePlanar3D246_g85034 = SamplePlanar3D( Texture246_g85034 , Sampler246_g85034 , Coords246_g85034 , WorldPosition246_g85034 , WorldNormal246_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85034) = _NormalTex13;
				SamplerState Sampler234_g85034 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85034 = temp_output_37_0_g85034;
				float3 WorldPosition234_g85034 = worldPos;
				float4 localSampleStochastic2D234_g85034 = SampleStochastic2D( Texture234_g85034 , Sampler234_g85034 , Coords234_g85034 , WorldPosition234_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85034) = _NormalTex13;
				SamplerState Sampler263_g85034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition263_g85034 = worldPos;
				half3 WorldNormal263_g85034 = WorldNormal;
				half4 localSampleStochastic3D263_g85034 = SampleStochastic3D( Texture263_g85034 , Sampler263_g85034 , Coords263_g85034 , WorldPosition263_g85034 , WorldNormal263_g85034 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch8991_g84942 = localSamplePlanar2D238_g85034;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch8991_g84942 = localSamplePlanar3D246_g85034;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch8991_g84942 = localSampleStochastic2D234_g85034;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch8991_g84942 = localSampleStochastic3D263_g85034;
				#else
				float4 staticSwitch8991_g84942 = localSamplePlanar2D238_g85034;
				#endif
				half4 Layer133_g84979 = staticSwitch8991_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85027) = _NormalTex14;
				SamplerState Sampler238_g85027 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85027 = Input_Coords_148961_g84942;
				half4 Coords238_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition238_g85027 = worldPos;
				half4 localSamplePlanar2D238_g85027 = SamplePlanar2D( Texture238_g85027 , Sampler238_g85027 , Coords238_g85027 , WorldPosition238_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85027) = _NormalTex14;
				SamplerState Sampler246_g85027 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition246_g85027 = worldPos;
				half3 WorldNormal246_g85027 = WorldNormal;
				half4 localSamplePlanar3D246_g85027 = SamplePlanar3D( Texture246_g85027 , Sampler246_g85027 , Coords246_g85027 , WorldPosition246_g85027 , WorldNormal246_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85027) = _NormalTex14;
				SamplerState Sampler234_g85027 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85027 = temp_output_37_0_g85027;
				float3 WorldPosition234_g85027 = worldPos;
				float4 localSampleStochastic2D234_g85027 = SampleStochastic2D( Texture234_g85027 , Sampler234_g85027 , Coords234_g85027 , WorldPosition234_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85027) = _NormalTex14;
				SamplerState Sampler263_g85027 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition263_g85027 = worldPos;
				half3 WorldNormal263_g85027 = WorldNormal;
				half4 localSampleStochastic3D263_g85027 = SampleStochastic3D( Texture263_g85027 , Sampler263_g85027 , Coords263_g85027 , WorldPosition263_g85027 , WorldNormal263_g85027 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch8990_g84942 = localSamplePlanar2D238_g85027;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch8990_g84942 = localSamplePlanar3D246_g85027;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch8990_g84942 = localSampleStochastic2D234_g85027;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch8990_g84942 = localSampleStochastic3D263_g85027;
				#else
				float4 staticSwitch8990_g84942 = localSamplePlanar2D238_g85027;
				#endif
				half4 Layer237_g84979 = staticSwitch8990_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85028) = _NormalTex15;
				SamplerState Sampler238_g85028 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85028 = Input_Coords_158962_g84942;
				half4 Coords238_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition238_g85028 = worldPos;
				half4 localSamplePlanar2D238_g85028 = SamplePlanar2D( Texture238_g85028 , Sampler238_g85028 , Coords238_g85028 , WorldPosition238_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85028) = _NormalTex15;
				SamplerState Sampler246_g85028 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition246_g85028 = worldPos;
				half3 WorldNormal246_g85028 = WorldNormal;
				half4 localSamplePlanar3D246_g85028 = SamplePlanar3D( Texture246_g85028 , Sampler246_g85028 , Coords246_g85028 , WorldPosition246_g85028 , WorldNormal246_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85028) = _NormalTex15;
				SamplerState Sampler234_g85028 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85028 = temp_output_37_0_g85028;
				float3 WorldPosition234_g85028 = worldPos;
				float4 localSampleStochastic2D234_g85028 = SampleStochastic2D( Texture234_g85028 , Sampler234_g85028 , Coords234_g85028 , WorldPosition234_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85028) = _NormalTex15;
				SamplerState Sampler263_g85028 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition263_g85028 = worldPos;
				half3 WorldNormal263_g85028 = WorldNormal;
				half4 localSampleStochastic3D263_g85028 = SampleStochastic3D( Texture263_g85028 , Sampler263_g85028 , Coords263_g85028 , WorldPosition263_g85028 , WorldNormal263_g85028 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch8989_g84942 = localSamplePlanar2D238_g85028;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch8989_g84942 = localSamplePlanar3D246_g85028;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch8989_g84942 = localSampleStochastic2D234_g85028;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch8989_g84942 = localSampleStochastic3D263_g85028;
				#else
				float4 staticSwitch8989_g84942 = localSamplePlanar2D238_g85028;
				#endif
				half4 Layer338_g84979 = staticSwitch8989_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85029) = _NormalTex16;
				SamplerState Sampler238_g85029 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85029 = Input_Coords_168959_g84942;
				half4 Coords238_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition238_g85029 = worldPos;
				half4 localSamplePlanar2D238_g85029 = SamplePlanar2D( Texture238_g85029 , Sampler238_g85029 , Coords238_g85029 , WorldPosition238_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85029) = _NormalTex16;
				SamplerState Sampler246_g85029 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition246_g85029 = worldPos;
				half3 WorldNormal246_g85029 = WorldNormal;
				half4 localSamplePlanar3D246_g85029 = SamplePlanar3D( Texture246_g85029 , Sampler246_g85029 , Coords246_g85029 , WorldPosition246_g85029 , WorldNormal246_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85029) = _NormalTex16;
				SamplerState Sampler234_g85029 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85029 = temp_output_37_0_g85029;
				float3 WorldPosition234_g85029 = worldPos;
				float4 localSampleStochastic2D234_g85029 = SampleStochastic2D( Texture234_g85029 , Sampler234_g85029 , Coords234_g85029 , WorldPosition234_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85029) = _NormalTex16;
				SamplerState Sampler263_g85029 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition263_g85029 = worldPos;
				half3 WorldNormal263_g85029 = WorldNormal;
				half4 localSampleStochastic3D263_g85029 = SampleStochastic3D( Texture263_g85029 , Sampler263_g85029 , Coords263_g85029 , WorldPosition263_g85029 , WorldNormal263_g85029 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch8988_g84942 = localSamplePlanar2D238_g85029;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch8988_g84942 = localSamplePlanar3D246_g85029;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch8988_g84942 = localSampleStochastic2D234_g85029;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch8988_g84942 = localSampleStochastic3D263_g85029;
				#else
				float4 staticSwitch8988_g84942 = localSamplePlanar2D238_g85029;
				#endif
				half4 Layer439_g84979 = staticSwitch8988_g84942;
				float4 weightedBlendVar31_g84979 = Weights52_g84979;
				float4 weightedBlend31_g84979 = ( weightedBlendVar31_g84979.x*Layer133_g84979 + weightedBlendVar31_g84979.y*Layer237_g84979 + weightedBlendVar31_g84979.z*Layer338_g84979 + weightedBlendVar31_g84979.w*Layer439_g84979 );
				half4 Terrain_Normal_168987_g84942 = weightedBlend31_g84979;
				half4 Layer_1644_g84953 = Terrain_Normal_168987_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84953 = Layer_045_g84953;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 + Layer_1243_g84953 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 + Layer_1243_g84953 + Layer_1644_g84953 );
				#else
				float4 staticSwitch40_g84953 = Layer_045_g84953;
				#endif
				half4 Blend_Normal7512_g84942 = staticSwitch40_g84953;
				half4 Normal_Packed45_g85037 = Blend_Normal7512_g84942;
				float2 appendResult58_g85037 = (float2(( (Normal_Packed45_g85037).x * (Normal_Packed45_g85037).w ) , (Normal_Packed45_g85037).y));
				half2 Normal_Default50_g85037 = appendResult58_g85037;
				half2 Normal_ASTC41_g85037 = (Normal_Packed45_g85037).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g85037 = Normal_ASTC41_g85037;
				#else
				float2 staticSwitch38_g85037 = Normal_Default50_g85037;
				#endif
				half2 Normal_NO_DTX544_g85037 = (Normal_Packed45_g85037).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g85037 = Normal_NO_DTX544_g85037;
				#else
				float2 staticSwitch37_g85037 = staticSwitch38_g85037;
				#endif
				half4 Weights52_g84945 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84945 = temp_output_6970_0_g84942;
				half4 Layer237_g84945 = temp_output_6977_0_g84942;
				half4 Layer338_g84945 = temp_output_6978_0_g84942;
				half4 Layer439_g84945 = temp_output_6983_0_g84942;
				float4 weightedBlendVar31_g84945 = Weights52_g84945;
				float4 weightedBlend31_g84945 = ( weightedBlendVar31_g84945.x*Layer133_g84945 + weightedBlendVar31_g84945.y*Layer237_g84945 + weightedBlendVar31_g84945.z*Layer338_g84945 + weightedBlendVar31_g84945.w*Layer439_g84945 );
				half4 Terrain_Masks_047203_g84942 = weightedBlend31_g84945;
				half4 Layer_045_g84955 = Terrain_Masks_047203_g84942;
				half4 Weights52_g84962 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84962 = temp_output_8714_0_g84942;
				half4 Layer237_g84962 = temp_output_8721_0_g84942;
				half4 Layer338_g84962 = temp_output_8724_0_g84942;
				half4 Layer439_g84962 = temp_output_8727_0_g84942;
				float4 weightedBlendVar31_g84962 = Weights52_g84962;
				float4 weightedBlend31_g84962 = ( weightedBlendVar31_g84962.x*Layer133_g84962 + weightedBlendVar31_g84962.y*Layer237_g84962 + weightedBlendVar31_g84962.z*Layer338_g84962 + weightedBlendVar31_g84962.w*Layer439_g84962 );
				half4 Terrain_Masks_088730_g84942 = weightedBlend31_g84962;
				half4 Layer_0810_g84955 = Terrain_Masks_088730_g84942;
				half4 Weights52_g84972 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84972 = temp_output_8815_0_g84942;
				half4 Layer237_g84972 = temp_output_8818_0_g84942;
				half4 Layer338_g84972 = temp_output_8819_0_g84942;
				half4 Layer439_g84972 = temp_output_8820_0_g84942;
				float4 weightedBlendVar31_g84972 = Weights52_g84972;
				float4 weightedBlend31_g84972 = ( weightedBlendVar31_g84972.x*Layer133_g84972 + weightedBlendVar31_g84972.y*Layer237_g84972 + weightedBlendVar31_g84972.z*Layer338_g84972 + weightedBlendVar31_g84972.w*Layer439_g84972 );
				half4 Terrain_Masks_128871_g84942 = weightedBlend31_g84972;
				half4 Layer_1243_g84955 = Terrain_Masks_128871_g84942;
				half4 Weights52_g84982 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84982 = temp_output_8931_0_g84942;
				half4 Layer237_g84982 = temp_output_8934_0_g84942;
				half4 Layer338_g84982 = temp_output_8935_0_g84942;
				half4 Layer439_g84982 = temp_output_8936_0_g84942;
				float4 weightedBlendVar31_g84982 = Weights52_g84982;
				float4 weightedBlend31_g84982 = ( weightedBlendVar31_g84982.x*Layer133_g84982 + weightedBlendVar31_g84982.y*Layer237_g84982 + weightedBlendVar31_g84982.z*Layer338_g84982 + weightedBlendVar31_g84982.w*Layer439_g84982 );
				half4 Terrain_Masks_169014_g84942 = weightedBlend31_g84982;
				half4 Layer_1644_g84955 = Terrain_Masks_169014_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84955 = Layer_045_g84955;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 + Layer_1243_g84955 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 + Layer_1243_g84955 + Layer_1644_g84955 );
				#else
				float4 staticSwitch40_g84955 = Layer_045_g84955;
				#endif
				half4 Blend_Masks7420_g84942 = staticSwitch40_g84955;
				half4 Normal_Packed45_g85036 = Blend_Masks7420_g84942;
				half2 Normal_NO_DTX544_g85036 = (Normal_Packed45_g85036).wy;
				#ifdef TVE_PACKED_TEX
				float2 staticSwitch9080_g84942 = (Normal_NO_DTX544_g85036*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g84942 = (staticSwitch37_g85037*2.0 + -1.0);
				#endif
				half4 Weights52_g84949 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84949 = _Params1;
				half4 Layer237_g84949 = _Params2;
				half4 Layer338_g84949 = _Params3;
				half4 Layer439_g84949 = _Params4;
				float4 weightedBlendVar31_g84949 = Weights52_g84949;
				float4 weightedBlend31_g84949 = ( weightedBlendVar31_g84949.x*Layer133_g84949 + weightedBlendVar31_g84949.y*Layer237_g84949 + weightedBlendVar31_g84949.z*Layer338_g84949 + weightedBlendVar31_g84949.w*Layer439_g84949 );
				half4 Terrain_Params_047533_g84942 = weightedBlend31_g84949;
				half4 Layer_045_g84956 = Terrain_Params_047533_g84942;
				half4 Weights52_g84966 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84966 = _Params5;
				half4 Layer237_g84966 = _Params6;
				half4 Layer338_g84966 = _Params7;
				half4 Layer439_g84966 = _Params8;
				float4 weightedBlendVar31_g84966 = Weights52_g84966;
				float4 weightedBlend31_g84966 = ( weightedBlendVar31_g84966.x*Layer133_g84966 + weightedBlendVar31_g84966.y*Layer237_g84966 + weightedBlendVar31_g84966.z*Layer338_g84966 + weightedBlendVar31_g84966.w*Layer439_g84966 );
				half4 Terrain_Params_088739_g84942 = weightedBlend31_g84966;
				half4 Layer_0810_g84956 = Terrain_Params_088739_g84942;
				half4 Weights52_g84976 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84976 = _Params9;
				half4 Layer237_g84976 = _Params10;
				half4 Layer338_g84976 = _Params11;
				half4 Layer439_g84976 = _Params12;
				float4 weightedBlendVar31_g84976 = Weights52_g84976;
				float4 weightedBlend31_g84976 = ( weightedBlendVar31_g84976.x*Layer133_g84976 + weightedBlendVar31_g84976.y*Layer237_g84976 + weightedBlendVar31_g84976.z*Layer338_g84976 + weightedBlendVar31_g84976.w*Layer439_g84976 );
				half4 Terrain_Params_128867_g84942 = weightedBlend31_g84976;
				half4 Layer_1243_g84956 = Terrain_Params_128867_g84942;
				half4 Weights52_g84986 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84986 = _Params13;
				half4 Layer237_g84986 = _Params14;
				half4 Layer338_g84986 = _Params15;
				half4 Layer439_g84986 = _Params16;
				float4 weightedBlendVar31_g84986 = Weights52_g84986;
				float4 weightedBlend31_g84986 = ( weightedBlendVar31_g84986.x*Layer133_g84986 + weightedBlendVar31_g84986.y*Layer237_g84986 + weightedBlendVar31_g84986.z*Layer338_g84986 + weightedBlendVar31_g84986.w*Layer439_g84986 );
				half4 Terrain_Params_169017_g84942 = weightedBlend31_g84986;
				half4 Layer_1644_g84956 = Terrain_Params_169017_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84956 = Layer_045_g84956;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 + Layer_1243_g84956 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 + Layer_1243_g84956 + Layer_1644_g84956 );
				#else
				float4 staticSwitch40_g84956 = Layer_045_g84956;
				#endif
				half4 Blend_Params7547_g84942 = staticSwitch40_g84956;
				half2 Normal_Planar45_g85038 = ( staticSwitch9080_g84942 * (Blend_Params7547_g84942).z );
				float2 break64_g85038 = Normal_Planar45_g85038;
				float3 appendResult65_g85038 = (float3(break64_g85038.x , 0.0 , break64_g85038.y));
				half2 Terrain_Normal8038_g84806 = ( (mul( ase_worldToTangent, appendResult65_g85038 )).xy * _TerrainNormalValue );
				float2 lerpResult7797_g84806 = lerp( Blend_Normal_Detail312_g84806 , Terrain_Normal8038_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float2 staticSwitch7796_g84806 = lerpResult7797_g84806;
				#else
				float2 staticSwitch7796_g84806 = Blend_Normal_Detail312_g84806;
				#endif
				half2 Blend_Normal_Terrain7762_g84806 = staticSwitch7796_g84806;
				float3 appendResult7377_g84806 = (float3(Blend_Normal_Terrain7762_g84806 , 1.0));
				float3 tanNormal7376_g84806 = appendResult7377_g84806;
				float3 worldNormal7376_g84806 = float3(dot(tanToWorld0,tanNormal7376_g84806), dot(tanToWorld1,tanNormal7376_g84806), dot(tanToWorld2,tanNormal7376_g84806));
				half3 Blend_NormalWS_Terrain7375_g84806 = worldNormal7376_g84806;
				float lerpResult7446_g84806 = lerp( (Blend_NormalWS_Terrain7375_g84806).y , IN.ase_normal.y , Vertex_DynamicMode5112_g84806);
				float lerpResult6757_g84806 = lerp( 1.0 , saturate( lerpResult7446_g84806 ) , _OverlayProjectionValue);
				half Overlay_Projection6081_g84806 = lerpResult6757_g84806;
				half Overlay_Shading6688_g84806 = Blend_Albedo_Globals6410_g84806;
				half Overlay_Custom6707_g84806 = 1.0;
				float lerpResult8034_g84806 = lerp( Occlusion_Mask6432_g84806 , ( 1.0 - Occlusion_Mask6432_g84806 ) , _VertexOcclusionOverlayMode);
				float lerpResult8032_g84806 = lerp( Occlusion_Alpha6463_g84806 , 1.0 , lerpResult8034_g84806);
				half Occlusion_Overlay6471_g84806 = lerpResult8032_g84806;
				float temp_output_7_0_g84929 = 0.1;
				float temp_output_10_0_g84929 = ( 0.2 - temp_output_7_0_g84929 );
				half Overlay_Mask_High6064_g84806 = saturate( ( ( ( Overlay_Value5738_g84806 * Overlay_Projection6081_g84806 * Overlay_Shading6688_g84806 * Overlay_Custom6707_g84806 * Occlusion_Overlay6471_g84806 ) - temp_output_7_0_g84929 ) / ( temp_output_10_0_g84929 + 0.0001 ) ) );
				half Overlay_Mask269_g84806 = Overlay_Mask_High6064_g84806;
				float3 lerpResult336_g84806 = lerp( Blend_Albedo_Colored863_g84806 , Global_OverlayColor1758_g84806 , Overlay_Mask269_g84806);
				half3 Blend_Albedo_Overlay359_g84806 = lerpResult336_g84806;
				half Global_WetnessContrast6502_g84806 = TVE_WetnessContrast;
				half Global_Extras_Wetness305_g84806 = break456_g84833.y;
				half Wetness_Value6343_g84806 = ( Global_Extras_Wetness305_g84806 * _GlobalWetness );
				float3 lerpResult6367_g84806 = lerp( Blend_Albedo_Overlay359_g84806 , ( Blend_Albedo_Overlay359_g84806 * Blend_Albedo_Overlay359_g84806 ) , ( Global_WetnessContrast6502_g84806 * Wetness_Value6343_g84806 ));
				half3 Blend_Albedo_Wetness6351_g84806 = lerpResult6367_g84806;
				float vertexToFrag11_g84914 = IN.ase_texcoord10.w;
				half3 Tint_Highlight_Color5771_g84806 = ( ( (_MotionHighlightColor).rgb * vertexToFrag11_g84914 ) + float3( 1,1,1 ) );
				float3 temp_output_6309_0_g84806 = ( Blend_Albedo_Wetness6351_g84806 * Tint_Highlight_Color5771_g84806 );
				half3 Subsurface_Color1722_g84806 = ( (_SubsurfaceColor).rgb * Blend_Albedo_Wetness6351_g84806 );
				half Global_Subsurface4041_g84806 = TVE_SubsurfaceValue;
				half Global_OverlaySubsurface5667_g84806 = TVE_OverlaySubsurface;
				float lerpResult7362_g84806 = lerp( 1.0 , Global_OverlaySubsurface5667_g84806 , Overlay_Value5738_g84806);
				half Overlay_Subsurface7361_g84806 = lerpResult7362_g84806;
				half Subsurface_Intensity1752_g84806 = ( _SubsurfaceValue * Global_Subsurface4041_g84806 * Overlay_Subsurface7361_g84806 );
				float lerpResult8014_g84806 = lerp( 1.0 , Blend_MaskRemap_Detail6621_g84806 , _SubsurfaceMaskValue);
				half Subsurface_Mask1557_g84806 = lerpResult8014_g84806;
				half3 MainLight_Direction3926_g84806 = TVE_MainLightDirection;
				float3 normalizeResult2169_g84806 = normalize( worldViewDir );
				float3 ViewDirection3963_g84806 = normalizeResult2169_g84806;
				float dotResult785_g84806 = dot( -MainLight_Direction3926_g84806 , ViewDirection3963_g84806 );
				float saferPower1624_g84806 = abs( saturate( dotResult785_g84806 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch1602_g84806 = 0.0;
				#else
				float staticSwitch1602_g84806 = ( pow( saferPower1624_g84806 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View782_g84806 = staticSwitch1602_g84806;
				half3 Subsurface_Approximation1693_g84806 = ( Subsurface_Color1722_g84806 * Subsurface_Intensity1752_g84806 * Subsurface_Mask1557_g84806 * Mask_Subsurface_View782_g84806 );
				half3 Blend_Albedo_Subsurface149_g84806 = ( temp_output_6309_0_g84806 + Subsurface_Approximation1693_g84806 );
				half3 Blend_Albedo_RimLight7316_g84806 = Blend_Albedo_Subsurface149_g84806;
				
				half Global_OverlayNormalScale6581_g84806 = TVE_OverlayNormalValue;
				float lerpResult6585_g84806 = lerp( 1.0 , Global_OverlayNormalScale6581_g84806 , Overlay_Mask269_g84806);
				half2 Blend_Normal_Overlay366_g84806 = ( Blend_Normal_Terrain7762_g84806 * lerpResult6585_g84806 );
				half Global_WetnessNormalScale6571_g84806 = TVE_WetnessNormalValue;
				float lerpResult6579_g84806 = lerp( 1.0 , Global_WetnessNormalScale6571_g84806 , ( Wetness_Value6343_g84806 * Wetness_Value6343_g84806 ));
				half2 Blend_Normal_Wetness6372_g84806 = ( Blend_Normal_Overlay366_g84806 * lerpResult6579_g84806 );
				float3 appendResult6568_g84806 = (float3(Blend_Normal_Wetness6372_g84806 , 1.0));
				float3 temp_output_13_0_g84834 = appendResult6568_g84806;
				float3 temp_output_33_0_g84834 = ( temp_output_13_0_g84834 * _render_normals );
				float3 switchResult12_g84834 = (((ase_vface>0)?(temp_output_13_0_g84834):(temp_output_33_0_g84834)));
				
				float3 temp_cast_19 = (0.0).xxx;
				half3 Emissive_Color7162_g84806 = (_EmissiveColor).rgb;
				half2 Emissive_UVs2468_g84806 = ( ( IN.ase_texcoord9.xy * (_EmissiveUVs).xy ) + (_EmissiveUVs).zw );
				float temp_output_7_0_g84938 = _EmissiveTexMinValue;
				float3 temp_cast_20 = (temp_output_7_0_g84938).xxx;
				float temp_output_10_0_g84938 = ( _EmissiveTexMaxValue - temp_output_7_0_g84938 );
				half3 Emissive_Texture7022_g84806 = saturate( ( ( (SAMPLE_TEXTURE2D( _EmissiveTex, sampler_Linear_Repeat, Emissive_UVs2468_g84806 )).rgb - temp_cast_20 ) / ( temp_output_10_0_g84938 + 0.0001 ) ) );
				half Global_Extras_Emissive4203_g84806 = break456_g84833.x;
				float lerpResult4206_g84806 = lerp( 1.0 , Global_Extras_Emissive4203_g84806 , _GlobalEmissive);
				half Emissive_Value7024_g84806 = ( ( lerpResult4206_g84806 * _EmissivePhaseValue ) - 1.0 );
				half3 Emissive_Mask6968_g84806 = saturate( ( Emissive_Texture7022_g84806 + Emissive_Value7024_g84806 ) );
				float3 temp_output_3_0_g84937 = ( Emissive_Color7162_g84806 * Emissive_Mask6968_g84806 );
				float temp_output_15_0_g84937 = _emissive_intensity_value;
				float3 temp_output_23_0_g84937 = ( temp_output_3_0_g84937 * temp_output_15_0_g84937 );
				#ifdef TVE_EMISSIVE
				float3 staticSwitch8018_g84806 = temp_output_23_0_g84937;
				#else
				float3 staticSwitch8018_g84806 = temp_cast_19;
				#endif
				half3 Blend_Emissive2476_g84806 = staticSwitch8018_g84806;
				half3 Terrain_Emissive7933_g84806 = ( (Blend_Specular7446_g84942).rgb * (Blend_Albedo7468_g84942).xyz );
				float3 lerpResult7927_g84806 = lerp( Blend_Emissive2476_g84806 , Terrain_Emissive7933_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7912_g84806 = lerpResult7927_g84806;
				#else
				float3 staticSwitch7912_g84806 = Blend_Emissive2476_g84806;
				#endif
				half3 Blend_Emissive_Terrain7909_g84806 = staticSwitch7912_g84806;
				
				half Render_Specular4861_g84806 = _RenderSpecular;
				float3 temp_cast_21 = (( 0.04 * Render_Specular4861_g84806 )).xxx;
				
				float lerpResult240_g84806 = lerp( 1.0 , tex2DNode35_g84806.g , _MainOcclusionValue);
				half Main_Occlusion247_g84806 = lerpResult240_g84806;
				float lerpResult239_g84806 = lerp( 1.0 , tex2DNode33_g84806.g , _SecondOcclusionValue);
				half Second_Occlusion251_g84806 = lerpResult239_g84806;
				float lerpResult294_g84806 = lerp( Main_Occlusion247_g84806 , Second_Occlusion251_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch310_g84806 = lerpResult294_g84806;
				#else
				float staticSwitch310_g84806 = Main_Occlusion247_g84806;
				#endif
				half Blend_Occlusion_Detail323_g84806 = staticSwitch310_g84806;
				#ifdef TVE_PACKED_TEX
				float staticSwitch9097_g84942 = 1.0;
				#else
				float staticSwitch9097_g84942 = ( (Blend_Masks7420_g84942).y * _TerrainOcclusionValue );
				#endif
				half Terrain_Occlusion8041_g84806 = staticSwitch9097_g84942;
				float lerpResult7815_g84806 = lerp( Blend_Occlusion_Detail323_g84806 , Terrain_Occlusion8041_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float staticSwitch7814_g84806 = lerpResult7815_g84806;
				#else
				float staticSwitch7814_g84806 = Blend_Occlusion_Detail323_g84806;
				#endif
				half Blend_Occlusion_Terrain7820_g84806 = staticSwitch7814_g84806;
				
				half Main_Smoothness227_g84806 = ( tex2DNode35_g84806.a * _MainSmoothnessValue );
				half Second_Smoothness236_g84806 = ( tex2DNode33_g84806.a * _SecondSmoothnessValue );
				float lerpResult266_g84806 = lerp( Main_Smoothness227_g84806 , Second_Smoothness236_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch297_g84806 = lerpResult266_g84806;
				#else
				float staticSwitch297_g84806 = Main_Smoothness227_g84806;
				#endif
				half Blend_Smoothness_Detail314_g84806 = staticSwitch297_g84806;
				#ifdef TVE_PACKED_TEX
				float staticSwitch9105_g84942 = (Blend_Masks7420_g84942).x;
				#else
				float staticSwitch9105_g84942 = (Blend_Masks7420_g84942).w;
				#endif
				half Terrain_Smoothness8042_g84806 = ( staticSwitch9105_g84942 * (Blend_Params7547_g84942).w * _TerrainSmoothnessValue );
				float lerpResult7801_g84806 = lerp( Blend_Smoothness_Detail314_g84806 , Terrain_Smoothness8042_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float staticSwitch7800_g84806 = lerpResult7801_g84806;
				#else
				float staticSwitch7800_g84806 = Blend_Smoothness_Detail314_g84806;
				#endif
				half Blend_Smoothness_Terrain7806_g84806 = staticSwitch7800_g84806;
				half Global_OverlaySmoothness311_g84806 = TVE_OverlaySmoothness;
				float lerpResult343_g84806 = lerp( Blend_Smoothness_Terrain7806_g84806 , Global_OverlaySmoothness311_g84806 , Overlay_Mask269_g84806);
				half Blend_Smoothness_Overlay371_g84806 = lerpResult343_g84806;
				float temp_output_6499_0_g84806 = ( 1.0 - Wetness_Value6343_g84806 );
				half Blend_Smoothness_Wetness4130_g84806 = saturate( ( Blend_Smoothness_Overlay371_g84806 + ( 1.0 - ( temp_output_6499_0_g84806 * temp_output_6499_0_g84806 ) ) ) );
				
				float localCustomAlphaClip19_g84928 = ( 0.0 );
				half Main_Alpha316_g84806 = tex2DNode29_g84806.a;
				half Second_Alpha5007_g84806 = tex2DNode89_g84806.a;
				float lerpResult6153_g84806 = lerp( Main_Alpha316_g84806 , Second_Alpha5007_g84806 , Detail_Mask147_g84806);
				float lerpResult6785_g84806 = lerp( ( Main_Alpha316_g84806 * Second_Alpha5007_g84806 ) , lerpResult6153_g84806 , _DetailAlphaMode);
				#ifdef TVE_DETAIL
				float staticSwitch6158_g84806 = lerpResult6785_g84806;
				#else
				float staticSwitch6158_g84806 = Main_Alpha316_g84806;
				#endif
				half Blend_Alpha_Detail6157_g84806 = staticSwitch6158_g84806;
				half AlphaTreshold2132_g84806 = _AlphaClipValue;
				half Global_Extras_Alpha1033_g84806 = saturate( break456_g84833.w );
				float lerpResult5154_g84806 = lerp( 0.0 , Global_MeshVariation5104_g84806 , _AlphaVariationValue);
				half Global_Alpha_Variation5158_g84806 = lerpResult5154_g84806;
				float Emissive_Alpha7942_g84806 = 0.0;
				float lerpResult6866_g84806 = lerp( ( 1.0 - Detail_Mask147_g84806 ) , 1.0 , _DetailFadeMode);
				#ifdef TVE_DETAIL
				float staticSwitch6612_g84806 = lerpResult6866_g84806;
				#else
				float staticSwitch6612_g84806 = 1.0;
				#endif
				half Detail_Mask_Invert6260_g84806 = staticSwitch6612_g84806;
				half Alpha_Mask6234_g84806 = ( 1.0 * Detail_Mask_Invert6260_g84806 );
				float lerpResult5203_g84806 = lerp( 1.0 , saturate( ( ( Global_Extras_Alpha1033_g84806 - saturate( ( Global_Alpha_Variation5158_g84806 + Emissive_Alpha7942_g84806 ) ) ) + ( Global_Extras_Alpha1033_g84806 * 0.1 ) ) ) , ( Alpha_Mask6234_g84806 * _GlobalAlpha ));
				float lerpResult16_g84925 = lerp( 1.0 , lerpResult5203_g84806 , TVE_IsEnabled);
				half Global_Alpha315_g84806 = lerpResult16_g84925;
				half Fade_Alpha3727_g84806 = 1.0;
				half Final_Alpha7344_g84806 = min( ( ( Blend_Alpha_Detail6157_g84806 - AlphaTreshold2132_g84806 ) * Global_Alpha315_g84806 ) , Fade_Alpha3727_g84806 );
				float temp_output_3_0_g84928 = Final_Alpha7344_g84806;
				float Alpha19_g84928 = temp_output_3_0_g84928;
				float temp_output_15_0_g84928 = 0.01;
				float Treshold19_g84928 = temp_output_15_0_g84928;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_ALPHA_FADE) || defined (TVE_ALPHA_GLOBAL)
				#if defined (TVE_IS_HD_PIPELINE)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g84928 - Treshold19_g84928);
				#endif
				#else
				clip(Alpha19_g84928 - Treshold19_g84928);
				#endif
				#endif
				}
				half Main_Color_Alpha6121_g84806 = (lerpResult7986_g84806).a;
				half Second_Color_Alpha6152_g84806 = (lerpResult7997_g84806).a;
				float lerpResult6168_g84806 = lerp( Main_Color_Alpha6121_g84806 , Second_Color_Alpha6152_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch6174_g84806 = lerpResult6168_g84806;
				#else
				float staticSwitch6174_g84806 = Main_Color_Alpha6121_g84806;
				#endif
				half Blend_ColorAlpha_Detail6167_g84806 = staticSwitch6174_g84806;
				half Final_Clip914_g84806 = saturate( ( Alpha19_g84928 * Blend_ColorAlpha_Detail6167_g84806 ) );
				
				o.Albedo = Blend_Albedo_RimLight7316_g84806;
				o.Normal = switchResult12_g84834;
				o.Emission = Blend_Emissive_Terrain7909_g84806;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = fixed3( 0, 0, 0 );
					o.Gloss = 0;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = temp_cast_21;
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = Blend_Occlusion_Terrain7820_g84806;
					o.Smoothness = Blend_Smoothness_Wetness4130_g84806;
				#endif

				o.Alpha = Final_Clip914_g84806;
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;
				float3 BakedGI = 0;
				float3 RefractionColor = 1;
				float RefractionIndex = 1;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;

				UnityGIInput giInput;
				UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
				giInput.light = gi.light;
				giInput.worldPos = worldPos;
				giInput.worldViewDir = worldViewDir;
				giInput.atten = atten;
				#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
					giInput.lightmapUV = IN.lmap;
				#else
					giInput.lightmapUV = 0.0;
				#endif
				#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
					giInput.ambient = IN.sh;
				#else
					giInput.ambient.rgb = 0.0;
				#endif
				giInput.probeHDR[0] = unity_SpecCube0_HDR;
				giInput.probeHDR[1] = unity_SpecCube1_HDR;
				#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
					giInput.boxMin[0] = unity_SpecCube0_BoxMin;
				#endif
				#ifdef UNITY_SPECCUBE_BOX_PROJECTION
					giInput.boxMax[0] = unity_SpecCube0_BoxMax;
					giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
					giInput.boxMax[1] = unity_SpecCube1_BoxMax;
					giInput.boxMin[1] = unity_SpecCube1_BoxMin;
					giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						LightingBlinnPhong_GI(o, giInput, gi);
					#else
						LightingLambert_GI(o, giInput, gi);
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						LightingStandardSpecular_GI(o, giInput, gi);
					#else
						LightingStandard_GI(o, giInput, gi);
					#endif
				#endif

				#ifdef ASE_BAKEDGI
					gi.indirect.diffuse = BakedGI;
				#endif

				#if UNITY_SHOULD_SAMPLE_SH && !defined(LIGHTMAP_ON) && defined(ASE_NO_AMBIENT)
					gi.indirect.diffuse = 0;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard(o, worldViewDir, gi);
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				c.rgb += o.Emission;

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ForwardAdd"
			Tags { "LightMode"="ForwardAdd" }
			ZWrite Off
			Blend One One

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants INSTANCING_ON
			#pragma multi_compile_fwdadd_fullshadows
			#ifndef UNITY_PASS_FORWARDADD
				#define UNITY_PASS_FORWARDADD
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_COLOR
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_FRAG_WORLD_VIEW_DIR
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local TVE_TERRAIN
			#pragma shader_feature_local TVE_DETAIL
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_HEIGHT_BLEND
			#pragma shader_feature_local_fragment TVE_SAMPLE_01_PLANAR_2D TVE_SAMPLE_01_PLANAR_3D TVE_SAMPLE_01_STOCHASTIC_2D TVE_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_02_PLANAR_2D TVE_SAMPLE_02_PLANAR_3D TVE_SAMPLE_02_STOCHASTIC_2D TVE_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_03_PLANAR_2D TVE_SAMPLE_03_PLANAR_3D TVE_SAMPLE_03_STOCHASTIC_2D TVE_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_04_PLANAR_2D TVE_SAMPLE_04_PLANAR_3D TVE_SAMPLE_04_STOCHASTIC_2D TVE_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_05_PLANAR_2D TVE_SAMPLE_05_PLANAR_3D TVE_SAMPLE_05_STOCHASTIC_2D TVE_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_06_PLANAR_2D TVE_SAMPLE_06_PLANAR_3D TVE_SAMPLE_06_STOCHASTIC_2D TVE_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_07_PLANAR_2D TVE_SAMPLE_07_PLANAR_3D TVE_SAMPLE_07_STOCHASTIC_2D TVE_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_08_PLANAR_2D TVE_SAMPLE_08_PLANAR_3D TVE_SAMPLE_08_STOCHASTIC_2D TVE_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_09_PLANAR_2D TVE_SAMPLE_09_PLANAR_3D TVE_SAMPLE_09_STOCHASTIC_2D TVE_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_10_PLANAR_2D TVE_SAMPLE_10_PLANAR_3D TVE_SAMPLE_10_STOCHASTIC_2D TVE_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_11_PLANAR_2D TVE_SAMPLE_11_PLANAR_3D TVE_SAMPLE_11_STOCHASTIC_2D TVE_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_12_PLANAR_2D TVE_SAMPLE_12_PLANAR_3D TVE_SAMPLE_12_STOCHASTIC_2D TVE_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_13_PLANAR_2D TVE_SAMPLE_13_PLANAR_3D TVE_SAMPLE_13_STOCHASTIC_2D TVE_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_14_PLANAR_2D TVE_SAMPLE_14_PLANAR_3D TVE_SAMPLE_14_STOCHASTIC_2D TVE_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_15_PLANAR_2D TVE_SAMPLE_15_PLANAR_3D TVE_SAMPLE_15_STOCHASTIC_2D TVE_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_16_PLANAR_2D TVE_SAMPLE_16_PLANAR_3D TVE_SAMPLE_16_STOCHASTIC_2D TVE_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_PACKED_TEX
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#define THE_VEGETATION_ENGINE
			#define TVE_IS_STANDARD_PIPELINE
			#define TVE_IS_STANDARD_SHADER
			#define TVE_IS_PLANT_SHADER
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(1,2)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(1)
					#else
						SHADOW_COORDS(1)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(3)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_color : COLOR;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float3 ase_normal : NORMAL;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _render_cull;
			uniform half _render_coverage;
			uniform half _render_zw;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _IsStandardShader;
			uniform float _IsPlantShader;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform float _SubsurfaceDiffusion;
			uniform half _Cutoff;
			uniform float4 _MaxBoundsInfo;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderZWrite;
			uniform half _RenderClip;
			uniform half _RenderCull;
			uniform half _RenderQueue;
			uniform half _RenderPriority;
			uniform half _RenderMode;
			uniform half _CategoryRender;
			uniform half _RenderNormals;
			uniform half _MessageGlobalsVariation;
			uniform half _IsTVEShader;
			uniform half _HasOcclusion;
			uniform half _IsIdentifier;
			uniform half _IsCollected;
			uniform half _IsShared;
			uniform half _IsCustomShader;
			uniform half _HasGradient;
			uniform half _HasEmissive;
			uniform half _VertexVariationMode;
			uniform half _IsVersion;
			uniform half _RenderCoverage;
			uniform half _DetailTypeMode;
			uniform half _DetailOpaqueMode;
			uniform half _DetailCoordMode;
			uniform half _SpaceGlobalLocals;
			uniform half _SpaceSubsurface;
			uniform half _CategoryGlobals;
			uniform half _CategoryMain;
			uniform half _CategoryPerspective;
			uniform half _CategorySizeFade;
			uniform half _SpaceRenderFade;
			uniform half _RenderDirect;
			uniform half _RenderAmbient;
			uniform half _RenderShadow;
			uniform half _IsBlanketShader;
			uniform half4 _Color;
			uniform half _CategoryMotion;
			uniform half _MessageMotionVariation;
			uniform half4 _MainMaskRemap;
			uniform half4 _SecondMaskRemap;
			uniform half _CategoryDetail;
			uniform half _CategoryTerrain;
			uniform half _CategoryOcclusion;
			uniform half _CategoryGradient;
			uniform half _CategoryNoise;
			uniform half _CategoryRimLight;
			uniform half _CategoryMatcap;
			uniform half _CategorySubsurface;
			uniform half _CategoryEmissive;
			uniform half _SpaceGlobalLayers;
			uniform half _SpaceGlobalOptions;
			uniform half _SpaceMotionGlobals;
			uniform half _ColorsMaskMinValue;
			uniform half _ColorsMaskMaxValue;
			uniform half _DetailMeshInvertMode;
			uniform half _DetailMaskInvertMode;
			uniform half _MotionValue_31;
			uniform half _MotionValue_21;
			uniform half _MessageMainMask;
			uniform half _MessageSecondMask;
			uniform half4 _DetailBlendRemap;
			uniform half4 _DetailMeshRemap;
			uniform half4 _DetailMaskRemap;
			uniform half4 _VertexOcclusionRemap;
			uniform half4 _GradientMaskRemap;
			uniform half4 _NoiseMaskRemap;
			uniform half4 _RimLightRemap;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceAngleValue;
			uniform half _SubsurfaceScatteringValue;
			uniform half4 _EmissiveTexRemap;
			uniform half _EmissiveMode;
			uniform half _EmissiveIntensityValue;
			uniform half _EmissiveFlagMode;
			uniform half _EmissiveIntensityMode;
			uniform half _MessageSubsurface;
			uniform half _MessageOcclusion;
			uniform half _MessageTerrain;
			uniform half4 _TerrainBlendRemap;
			uniform half _TerrainTexMode;
			uniform half _TerrainBlendMode;
			uniform half _TerrainLayersMode;
			uniform half _LayerSampleMode1;
			uniform half _LayerSampleMode2;
			uniform half _LayerSampleMode3;
			uniform half _LayerSampleMode4;
			uniform half _LayerSampleMode5;
			uniform half _LayerSampleMode6;
			uniform half _LayerSampleMode7;
			uniform half _LayerSampleMode8;
			uniform half _LayerSampleMode9;
			uniform half _LayerSampleMode10;
			uniform half _LayerSampleMode11;
			uniform half _LayerSampleMode12;
			uniform half _LayerSampleMode13;
			uniform half _LayerSampleMode14;
			uniform half _LayerSampleMode15;
			uniform half _LayerSampleMode16;
			uniform half _VertexPivotMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(TVE_NoiseTex);
			uniform float3 TVE_WorldOrigin;
			uniform half _MotionPosition_10;
			uniform float _MotionScale_10;
			uniform half TVE_NoiseTexTilling;
			uniform half4 TVE_MotionParams;
			uniform half4 TVE_TimeParams;
			uniform float _MotionSpeed_10;
			uniform half _MotionVariation_10;
			uniform half _VertexDynamicMode;
			SamplerState sampler_Linear_Repeat;
			uniform half _LayerMotionValue;
			uniform float TVE_MotionUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_MotionTex);
			uniform half4 TVE_MotionCoords;
			SamplerState sampler_Linear_Clamp;
			uniform half4 TVE_WindEditor;
			uniform half _MotionAmplitude_10;
			uniform half TVE_MotionValue_10;
			uniform half _InteractionMaskValue;
			uniform half _InteractionAmplitude;
			uniform half _LayerVertexValue;
			uniform float TVE_VertexUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_VertexTex);
			uniform half4 TVE_VertexCoords;
			uniform half _VertexPositionMode;
			uniform half4 TVE_VertexParams;
			uniform half _GlobalOrientation;
			uniform half _MotionScale_20;
			uniform half _MotionVariation_20;
			uniform half _MotionSpeed_20;
			uniform half _MotionFacingValue;
			uniform half _MotionAmplitude_20;
			uniform half TVE_MotionValue_20;
			uniform half _MotionAmplitude_22;
			uniform float _MotionScale_32;
			uniform float _MotionVariation_32;
			uniform float _MotionSpeed_32;
			uniform half _MotionAmplitude_32;
			uniform half TVE_MotionFadeEnd;
			uniform half TVE_MotionFadeStart;
			uniform half TVE_MotionValue_30;
			uniform half _PerspectivePushValue;
			uniform half _PerspectiveNoiseValue;
			uniform half _PerspectiveAngleValue;
			uniform half _GlobalSize;
			uniform half TVE_DistanceFadeBias;
			uniform half _SizeFadeEndValue;
			uniform half _SizeFadeStartValue;
			uniform half _ConformOffsetMode;
			uniform half _ConformOffsetValue;
			uniform half _GlobalConform;
			uniform half TVE_IsEnabled;
			uniform half _DisableSRPBatcher;
			uniform float _TerrainBlendOffsetValue;
			uniform float _TerrainBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			uniform half4 _MainUVs;
			SamplerState sampler_MainAlbedoTex;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainMaskTex);
			uniform half _MainMaskMinValue;
			uniform half _MainMaskMaxValue;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_uvs_mode;
			uniform half4 _SecondUVs;
			uniform half _SecondUVsScaleMode;
			SamplerState sampler_SecondAlbedoTex;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half _SecondMaskMinValue;
			uniform half _SecondMaskMaxValue;
			uniform half _SecondColorMode;
			uniform half _DetailBlendMode;
			uniform half _DetailMaskMode;
			uniform half _DetailMaskMinValue;
			uniform half _DetailMaskMaxValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _DetailMeshMode;
			uniform half _DetailMeshMinValue;
			uniform half _DetailMeshMaxValue;
			uniform half _DetailBlendMinValue;
			uniform half _DetailBlendMaxValue;
			uniform half _DetailMode;
			uniform half _DetailValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMinValue;
			uniform half _GradientMaxValue;
			uniform half4 _VertexOcclusionColor;
			uniform half _VertexOcclusionMinValue;
			uniform half _VertexOcclusionMaxValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex1);
			uniform half4 _TerrainPosition;
			uniform half4 _TerrainSize;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex1);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _Coords1;
			uniform half4 _MaskMin1;
			uniform half4 _MaskMax1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex2);
			uniform half4 _Coords2;
			uniform half4 _MaskMin2;
			uniform half4 _MaskMax2;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex3);
			uniform half4 _Coords3;
			uniform half4 _MaskMin3;
			uniform half4 _MaskMax3;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex4);
			uniform half4 _Coords4;
			uniform half4 _MaskMin4;
			uniform half4 _MaskMax4;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex5);
			uniform half4 _Coords5;
			uniform half4 _MaskMin5;
			uniform half4 _MaskMax5;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex6);
			uniform half4 _Coords6;
			uniform half4 _MaskMin6;
			uniform half4 _MaskMax6;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex7);
			uniform half4 _Coords7;
			uniform half4 _MaskMin7;
			uniform half4 _MaskMax7;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex8);
			uniform half4 _Coords8;
			uniform half4 _MaskMin8;
			uniform half4 _MaskMax8;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex9);
			uniform half4 _Coords9;
			uniform half4 _MaskMin9;
			uniform half4 _MaskMax9;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex10);
			uniform half4 _Coords10;
			uniform half4 _MaskMin10;
			uniform half4 _MaskMax10;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex11);
			uniform half4 _Coords11;
			uniform half4 _MaskMin11;
			uniform half4 _MaskMax11;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex12);
			uniform half4 _Coords12;
			uniform half4 _MaskMin12;
			uniform half4 _MaskMax12;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex13);
			uniform half4 _Coords13;
			uniform half4 _MaskMin13;
			uniform half4 _MaskMax13;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex14);
			uniform half4 _Coords14;
			uniform half4 _MaskMin14;
			uniform half4 _MaskMax14;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex15);
			uniform half4 _Coords15;
			uniform half4 _MaskMin15;
			uniform half4 _MaskMax15;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex16);
			uniform half4 _Coords16;
			uniform half4 _MaskMin16;
			uniform half4 _MaskMax16;
			uniform half _TerrainHeightBlendValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex1);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex5);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex6);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex7);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex8);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex9);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex10);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex11);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex12);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex13);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex14);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex15);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex16);
			uniform half4 _TerrainColor;
			uniform half _DetailNormalValue;
			uniform half _SecondUVsMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _TerrainMode;
			uniform half _TerrainBlendMinValue;
			uniform half _TerrainBlendMaxValue;
			uniform half _LayerColorsValue;
			uniform float TVE_ColorsUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_ColorsTex);
			uniform half4 TVE_ColorsCoords;
			uniform half _ColorsPositionMode;
			uniform half4 TVE_ColorsParams;
			uniform half _ColorsIntensityValue;
			uniform half4 _Specular1;
			uniform half4 _Specular2;
			uniform half4 _Specular3;
			uniform half4 _Specular4;
			uniform half4 _Specular5;
			uniform half4 _Specular6;
			uniform half4 _Specular7;
			uniform half4 _Specular8;
			uniform half4 _Specular9;
			uniform half4 _Specular10;
			uniform half4 _Specular11;
			uniform half4 _Specular12;
			uniform half4 _Specular13;
			uniform half4 _Specular14;
			uniform half4 _Specular15;
			uniform half4 _Specular16;
			uniform half _GlobalColors;
			uniform half _ColorsVariationValue;
			uniform half _VertexOcclusionColorsMode;
			uniform half4 TVE_OverlayColor;
			uniform half _GlobalOverlay;
			uniform half _LayerExtrasValue;
			uniform float TVE_ExtrasUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_ExtrasTex);
			uniform half4 TVE_ExtrasCoords;
			uniform half _ExtrasPositionMode;
			uniform half4 TVE_ExtrasParams;
			uniform half _OverlayVariationValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex1);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex5);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex6);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex7);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex8);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex9);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex10);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex11);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex12);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex13);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex14);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex15);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex16);
			uniform half4 _Params1;
			uniform half4 _Params2;
			uniform half4 _Params3;
			uniform half4 _Params4;
			uniform half4 _Params5;
			uniform half4 _Params6;
			uniform half4 _Params7;
			uniform half4 _Params8;
			uniform half4 _Params9;
			uniform half4 _Params10;
			uniform half4 _Params11;
			uniform half4 _Params12;
			uniform half4 _Params13;
			uniform half4 _Params14;
			uniform half4 _Params15;
			uniform half4 _Params16;
			uniform half _TerrainNormalValue;
			uniform half _OverlayProjectionValue;
			uniform half _VertexOcclusionOverlayMode;
			uniform half TVE_WetnessContrast;
			uniform half _GlobalWetness;
			uniform half4 _MotionHighlightColor;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceValue;
			uniform half TVE_SubsurfaceValue;
			uniform half TVE_OverlaySubsurface;
			uniform half _SubsurfaceMaskValue;
			uniform half3 TVE_MainLightDirection;
			uniform half TVE_OverlayNormalValue;
			uniform half TVE_WetnessNormalValue;
			uniform half3 _render_normals;
			uniform half4 _EmissiveColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveTex);
			uniform half4 _EmissiveUVs;
			uniform half _EmissiveTexMinValue;
			uniform half _EmissiveTexMaxValue;
			uniform half _GlobalEmissive;
			uniform half _EmissivePhaseValue;
			uniform float _emissive_intensity_value;
			uniform half _RenderSpecular;
			uniform half _MainOcclusionValue;
			uniform half _SecondOcclusionValue;
			uniform half _TerrainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half _SecondSmoothnessValue;
			uniform half _TerrainSmoothnessValue;
			uniform half TVE_OverlaySmoothness;
			uniform half _DetailAlphaMode;
			uniform half _AlphaClipValue;
			uniform half _AlphaVariationValue;
			uniform half _DetailFadeMode;
			uniform half _GlobalAlpha;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xy + Coords.zw;
				ZY = WorldPosition.zy * Coords.xy + Coords.zw; 
				XY = WorldPosition.xy * Coords.xy + Coords.zw;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float3 VertexPosition3588_g84806 = v.vertex.xyz;
				float3 appendResult60_g84814 = (float3(v.ase_texcoord3.x , v.ase_texcoord3.z , v.ase_texcoord3.y));
				half3 Mesh_PivotsData2831_g84806 = ( appendResult60_g84814 * _VertexPivotMode );
				half3 Mesh_PivotsOS2291_g84806 = Mesh_PivotsData2831_g84806;
				float3 temp_output_2283_0_g84806 = ( VertexPosition3588_g84806 - Mesh_PivotsOS2291_g84806 );
				half3 VertexPos40_g84886 = temp_output_2283_0_g84806;
				half3 VertexPos40_g84887 = VertexPos40_g84886;
				float3 appendResult74_g84887 = (float3(VertexPos40_g84887.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g84887 = appendResult74_g84887;
				float3 break84_g84887 = VertexPos40_g84887;
				float3 appendResult81_g84887 = (float3(0.0 , break84_g84887.y , break84_g84887.z));
				half3 VertexPosOtherAxis82_g84887 = appendResult81_g84887;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag3890_g84806 = ase_worldPos;
				float3 WorldPosition3905_g84806 = vertexToFrag3890_g84806;
				float3 WorldPosition_Shifted7477_g84806 = ( WorldPosition3905_g84806 - TVE_WorldOrigin );
				float4x4 break19_g84843 = unity_ObjectToWorld;
				float3 appendResult20_g84843 = (float3(break19_g84843[ 0 ][ 3 ] , break19_g84843[ 1 ][ 3 ] , break19_g84843[ 2 ][ 3 ]));
				float3 temp_output_122_0_g84843 = Mesh_PivotsData2831_g84806;
				float3 PivotsOnly105_g84843 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g84843 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g84845 = ( appendResult20_g84843 + PivotsOnly105_g84843 );
				half3 WorldData19_g84845 = ase_worldPos;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84845 = WorldData19_g84845;
				#else
				float3 staticSwitch14_g84845 = ObjectData20_g84845;
				#endif
				float3 temp_output_114_0_g84843 = staticSwitch14_g84845;
				float3 vertexToFrag4224_g84806 = temp_output_114_0_g84843;
				float3 ObjectPosition4223_g84806 = vertexToFrag4224_g84806;
				float3 ObjectPosition_Shifted7481_g84806 = ( ObjectPosition4223_g84806 - TVE_WorldOrigin );
				float3 lerpResult6766_g84806 = lerp( WorldPosition_Shifted7477_g84806 , ObjectPosition_Shifted7481_g84806 , _MotionPosition_10);
				float3 Motion_10_Position6738_g84806 = lerpResult6766_g84806;
				half3 Input_Position419_g84851 = Motion_10_Position6738_g84806;
				float Input_MotionScale287_g84851 = ( _MotionScale_10 + 0.2 );
				half NoiseTex_Tilling735_g84851 = TVE_NoiseTexTilling;
				float2 temp_output_597_0_g84851 = (( Input_Position419_g84851 * Input_MotionScale287_g84851 * NoiseTex_Tilling735_g84851 * 0.0075 )).xz;
				float2 temp_output_447_0_g84811 = ((TVE_MotionParams).xy*2.0 + -1.0);
				half2 Global_Wind_DirectionWS4683_g84806 = temp_output_447_0_g84811;
				half2 Input_DirectionWS423_g84851 = Global_Wind_DirectionWS4683_g84806;
				float lerpResult128_g84852 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84851 = _MotionSpeed_10;
				half Input_MotionVariation284_g84851 = _MotionVariation_10;
				half3 Input_Position167_g84900 = ObjectPosition_Shifted7481_g84806;
				float dotResult156_g84900 = dot( (Input_Position167_g84900).xz , float2( 12.9898,78.233 ) );
				half Vertex_DynamicMode5112_g84806 = _VertexDynamicMode;
				half Input_DynamicMode120_g84900 = Vertex_DynamicMode5112_g84806;
				float Postion_Random162_g84900 = ( sin( dotResult156_g84900 ) * ( 1.0 - Input_DynamicMode120_g84900 ) );
				float Mesh_Variation16_g84806 = v.ase_color.r;
				half Input_Variation124_g84900 = Mesh_Variation16_g84806;
				half ObjectData20_g84902 = frac( ( Postion_Random162_g84900 + Input_Variation124_g84900 ) );
				half WorldData19_g84902 = Input_Variation124_g84900;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84902 = WorldData19_g84902;
				#else
				float staticSwitch14_g84902 = ObjectData20_g84902;
				#endif
				float temp_output_112_0_g84900 = staticSwitch14_g84902;
				float clampResult171_g84900 = clamp( temp_output_112_0_g84900 , 0.01 , 0.99 );
				float Global_MeshVariation5104_g84806 = clampResult171_g84900;
				half Input_GlobalMeshVariation569_g84851 = Global_MeshVariation5104_g84806;
				float temp_output_630_0_g84851 = ( ( ( lerpResult128_g84852 * Input_MotionSpeed62_g84851 ) + ( Input_MotionVariation284_g84851 * Input_GlobalMeshVariation569_g84851 ) ) * 0.03 );
				float temp_output_607_0_g84851 = frac( temp_output_630_0_g84851 );
				float4 lerpResult590_g84851 = lerp( SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( temp_output_597_0_g84851 + ( -Input_DirectionWS423_g84851 * temp_output_607_0_g84851 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( temp_output_597_0_g84851 + ( -Input_DirectionWS423_g84851 * frac( ( temp_output_630_0_g84851 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_607_0_g84851 - 0.5 ) ) / 0.5 ));
				half4 Noise_Complex703_g84851 = lerpResult590_g84851;
				float2 temp_output_645_0_g84851 = ((Noise_Complex703_g84851).rg*2.0 + -1.0);
				float2 break650_g84851 = temp_output_645_0_g84851;
				float3 appendResult649_g84851 = (float3(break650_g84851.x , 0.0 , break650_g84851.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Global_Noise_OS5548_g84806 = (( mul( unity_WorldToObject, float4( appendResult649_g84851 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_Noise_DirectionOS487_g84866 = Global_Noise_OS5548_g84806;
				float2 break448_g84811 = temp_output_447_0_g84811;
				float3 appendResult452_g84811 = (float3(break448_g84811.x , 0.0 , break448_g84811.y));
				half2 Global_Wind_DirectionOS5692_g84806 = (( mul( unity_WorldToObject, float4( appendResult452_g84811 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_Wind_DirectionOS458_g84866 = Global_Wind_DirectionOS5692_g84806;
				float temp_output_84_0_g84815 = _LayerMotionValue;
				float temp_output_19_0_g84819 = TVE_MotionUsage[(int)temp_output_84_0_g84815];
				float4 temp_output_91_19_g84815 = TVE_MotionCoords;
				half2 UV94_g84815 = ( (temp_output_91_19_g84815).zw + ( (temp_output_91_19_g84815).xy * (ObjectPosition4223_g84806).xz ) );
				float4 tex2DArrayNode50_g84815 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_MotionTex, sampler_Linear_Clamp, float3(UV94_g84815,temp_output_84_0_g84815), 0.0 );
				float4 temp_output_17_0_g84819 = tex2DArrayNode50_g84815;
				float4 temp_output_112_19_g84815 = TVE_MotionParams;
				float4 temp_output_3_0_g84819 = temp_output_112_19_g84815;
				float4 ifLocalVar18_g84819 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84819 >= 0.5 )
				ifLocalVar18_g84819 = temp_output_17_0_g84819;
				else
				ifLocalVar18_g84819 = temp_output_3_0_g84819;
				float4 lerpResult22_g84819 = lerp( temp_output_3_0_g84819 , temp_output_17_0_g84819 , temp_output_19_0_g84819);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84819 = lerpResult22_g84819;
				#else
				float4 staticSwitch24_g84819 = ifLocalVar18_g84819;
				#endif
				half4 Global_Motion_Params3909_g84806 = staticSwitch24_g84819;
				float4 break322_g84811 = Global_Motion_Params3909_g84806;
				float lerpResult457_g84811 = lerp( break322_g84811.z , TVE_WindEditor.z , TVE_WindEditor.w);
				float temp_output_459_0_g84811 = ( 1.0 - lerpResult457_g84811 );
				half Global_Wind_Power2223_g84806 = ( 1.0 - ( temp_output_459_0_g84811 * temp_output_459_0_g84811 ) );
				half Input_WindPower449_g84866 = Global_Wind_Power2223_g84806;
				float2 lerpResult516_g84866 = lerp( Input_Noise_DirectionOS487_g84866 , Input_Wind_DirectionOS458_g84866 , ( Input_WindPower449_g84866 * 0.6 ));
				half Mesh_Motion_107613_g84806 = v.ase_color.a;
				half Input_MeshHeight388_g84866 = Mesh_Motion_107613_g84806;
				half ObjectData20_g84867 = Input_MeshHeight388_g84866;
				float enc62_g84861 = v.ase_texcoord.w;
				float2 localDecodeFloatToVector262_g84861 = DecodeFloatToVector2( enc62_g84861 );
				float2 break63_g84861 = ( localDecodeFloatToVector262_g84861 * 100.0 );
				float Bounds_Height5230_g84806 = break63_g84861.x;
				half Input_BoundsHeight390_g84866 = Bounds_Height5230_g84806;
				half WorldData19_g84867 = ( Input_MeshHeight388_g84866 * Input_MeshHeight388_g84866 * Input_BoundsHeight390_g84866 );
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84867 = WorldData19_g84867;
				#else
				float staticSwitch14_g84867 = ObjectData20_g84867;
				#endif
				half Final_Motion10_Mask321_g84866 = ( staticSwitch14_g84867 * 2.0 );
				half Motion_10_Amplitude2258_g84806 = _MotionAmplitude_10;
				half Input_BendingAmplitude376_g84866 = Motion_10_Amplitude2258_g84806;
				half Global_MotionValue640_g84866 = TVE_MotionValue_10;
				half2 Final_Bending631_g84866 = ( lerpResult516_g84866 * ( Final_Motion10_Mask321_g84866 * Input_BendingAmplitude376_g84866 * Input_WindPower449_g84866 * Input_WindPower449_g84866 * Global_MotionValue640_g84866 ) );
				float2 appendResult433_g84811 = (float2(break322_g84811.x , break322_g84811.y));
				float2 temp_output_436_0_g84811 = (appendResult433_g84811*2.0 + -1.0);
				float2 break441_g84811 = temp_output_436_0_g84811;
				float3 appendResult440_g84811 = (float3(break441_g84811.x , 0.0 , break441_g84811.y));
				half2 Global_React_DirectionOS39_g84806 = (( mul( unity_WorldToObject, float4( appendResult440_g84811 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_React_DirectionOS358_g84866 = Global_React_DirectionOS39_g84806;
				float clampResult17_g84869 = clamp( Input_MeshHeight388_g84866 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84868 = 0.0;
				half Input_InteractionUseMask62_g84866 = _InteractionMaskValue;
				float temp_output_10_0_g84868 = ( Input_InteractionUseMask62_g84866 - temp_output_7_0_g84868 );
				half Final_InteractionRemap594_g84866 = saturate( ( ( clampResult17_g84869 - temp_output_7_0_g84868 ) / ( temp_output_10_0_g84868 + 0.0001 ) ) );
				half ObjectData20_g84870 = Final_InteractionRemap594_g84866;
				half WorldData19_g84870 = ( Final_InteractionRemap594_g84866 * Final_InteractionRemap594_g84866 * Input_BoundsHeight390_g84866 );
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84870 = WorldData19_g84870;
				#else
				float staticSwitch14_g84870 = ObjectData20_g84870;
				#endif
				half Final_InteractionMask373_g84866 = ( staticSwitch14_g84870 * 2.0 );
				half Interaction_Amplitude7501_g84806 = _InteractionAmplitude;
				half Input_InteractionAmplitude58_g84866 = Interaction_Amplitude7501_g84806;
				half2 Final_Interaction632_g84866 = ( Input_React_DirectionOS358_g84866 * Final_InteractionMask373_g84866 * Input_InteractionAmplitude58_g84866 );
				half Global_Interaction_Mask66_g84806 = ( break322_g84811.w * break322_g84811.w * break322_g84811.w * break322_g84811.w );
				float Input_InteractionGlobalMask330_g84866 = Global_Interaction_Mask66_g84806;
				half Final_InteractionValue525_g84866 = saturate( ( Input_InteractionAmplitude58_g84866 * Input_InteractionGlobalMask330_g84866 ) );
				float2 lerpResult551_g84866 = lerp( Final_Bending631_g84866 , Final_Interaction632_g84866 , Final_InteractionValue525_g84866);
				float2 break364_g84866 = lerpResult551_g84866;
				float3 appendResult638_g84866 = (float3(break364_g84866.x , 0.0 , break364_g84866.y));
				half3 Motion_10_Interaction7519_g84806 = appendResult638_g84866;
				float temp_output_84_0_g84835 = _LayerVertexValue;
				float temp_output_19_0_g84839 = TVE_VertexUsage[(int)temp_output_84_0_g84835];
				float4 temp_output_94_19_g84835 = TVE_VertexCoords;
				float3 lerpResult7575_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _VertexPositionMode);
				half2 UV97_g84835 = ( (temp_output_94_19_g84835).zw + ( (temp_output_94_19_g84835).xy * (lerpResult7575_g84806).xz ) );
				float4 tex2DArrayNode50_g84835 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_VertexTex, sampler_Linear_Clamp, float3(UV97_g84835,temp_output_84_0_g84835), 0.0 );
				float4 temp_output_17_0_g84839 = tex2DArrayNode50_g84835;
				float4 temp_output_111_19_g84835 = TVE_VertexParams;
				float4 temp_output_3_0_g84839 = temp_output_111_19_g84835;
				float4 ifLocalVar18_g84839 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84839 >= 0.5 )
				ifLocalVar18_g84839 = temp_output_17_0_g84839;
				else
				ifLocalVar18_g84839 = temp_output_3_0_g84839;
				float4 lerpResult22_g84839 = lerp( temp_output_3_0_g84839 , temp_output_17_0_g84839 , temp_output_19_0_g84839);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84839 = lerpResult22_g84839;
				#else
				float4 staticSwitch24_g84839 = ifLocalVar18_g84839;
				#endif
				half4 Global_Vertex_Params4173_g84806 = staticSwitch24_g84839;
				float4 break322_g84873 = Global_Vertex_Params4173_g84806;
				float2 appendResult355_g84873 = (float2(break322_g84873.x , break322_g84873.y));
				float2 temp_output_356_0_g84873 = (appendResult355_g84873*2.0 + -1.0);
				float2 break357_g84873 = temp_output_356_0_g84873;
				float3 appendResult361_g84873 = (float3(break357_g84873.x , 0.0 , break357_g84873.y));
				half2 Global_VertexOrientationOS7550_g84806 = (( mul( unity_WorldToObject, float4( appendResult361_g84873 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult7535_g84806 = lerp( float2( 0,0 ) , Global_VertexOrientationOS7550_g84806 , _GlobalOrientation);
				float2 break7552_g84806 = lerpResult7535_g84806;
				float3 appendResult7553_g84806 = (float3(break7552_g84806.x , 0.0 , break7552_g84806.y));
				half3 Vertex_Orientation7542_g84806 = appendResult7553_g84806;
				half3 Angle44_g84886 = ( Motion_10_Interaction7519_g84806 + Vertex_Orientation7542_g84806 );
				half Angle44_g84887 = (Angle44_g84886).z;
				half3 VertexPos40_g84888 = ( VertexPosRotationAxis50_g84887 + ( VertexPosOtherAxis82_g84887 * cos( Angle44_g84887 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g84887 ) * sin( Angle44_g84887 ) ) );
				float3 appendResult74_g84888 = (float3(0.0 , 0.0 , VertexPos40_g84888.z));
				half3 VertexPosRotationAxis50_g84888 = appendResult74_g84888;
				float3 break84_g84888 = VertexPos40_g84888;
				float3 appendResult81_g84888 = (float3(break84_g84888.x , break84_g84888.y , 0.0));
				half3 VertexPosOtherAxis82_g84888 = appendResult81_g84888;
				half Angle44_g84888 = -(Angle44_g84886).x;
				half3 Input_Position419_g84859 = WorldPosition_Shifted7477_g84806;
				float3 break459_g84859 = Input_Position419_g84859;
				float Sum_Position446_g84859 = ( break459_g84859.x + break459_g84859.y + break459_g84859.z );
				half Input_MotionScale321_g84859 = ( _MotionScale_20 * 0.1 );
				half Input_MotionVariation330_g84859 = _MotionVariation_20;
				half Input_GlobalVariation400_g84859 = Global_MeshVariation5104_g84806;
				float lerpResult128_g84860 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84859 = _MotionSpeed_20;
				float temp_output_404_0_g84859 = ( lerpResult128_g84860 * Input_MotionSpeed62_g84859 );
				half Motion_SineA450_g84859 = sin( ( ( Sum_Position446_g84859 * Input_MotionScale321_g84859 ) + ( Input_MotionVariation330_g84859 * Input_GlobalVariation400_g84859 ) + temp_output_404_0_g84859 ) );
				half Motion_SineB395_g84859 = sin( ( ( temp_output_404_0_g84859 * 0.6842 ) + ( Sum_Position446_g84859 * Input_MotionScale321_g84859 ) ) );
				half3 Input_Position419_g84898 = VertexPosition3588_g84806;
				float3 normalizeResult518_g84898 = normalize( Input_Position419_g84898 );
				half2 Input_DirectionOS423_g84898 = Global_React_DirectionOS39_g84806;
				float2 break521_g84898 = -Input_DirectionOS423_g84898;
				float3 appendResult522_g84898 = (float3(break521_g84898.x , 0.0 , break521_g84898.y));
				float dotResult519_g84898 = dot( normalizeResult518_g84898 , appendResult522_g84898 );
				half Input_Value62_g84898 = _MotionFacingValue;
				float lerpResult524_g84898 = lerp( 1.0 , (dotResult519_g84898*0.5 + 0.5) , Input_Value62_g84898);
				half ObjectData20_g84899 = max( lerpResult524_g84898 , 0.001 );
				half WorldData19_g84899 = 1.0;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84899 = WorldData19_g84899;
				#else
				float staticSwitch14_g84899 = ObjectData20_g84899;
				#endif
				half Motion_FacingMask5214_g84806 = staticSwitch14_g84899;
				half Motion_20_Amplitude4381_g84806 = Motion_FacingMask5214_g84806;
				half Input_MotionAmplitude384_g84859 = Motion_20_Amplitude4381_g84806;
				half Input_GlobalWind407_g84859 = Global_Wind_Power2223_g84806;
				float4 break638_g84851 = abs( Noise_Complex703_g84851 );
				half Global_Noise_B5526_g84806 = break638_g84851.b;
				half Input_GlobalNoise411_g84859 = Global_Noise_B5526_g84806;
				float lerpResult413_g84859 = lerp( 1.8 , 0.4 , Input_GlobalWind407_g84859);
				half Motion_Amplitude418_g84859 = ( Input_MotionAmplitude384_g84859 * Input_GlobalWind407_g84859 * pow( Input_GlobalNoise411_g84859 , lerpResult413_g84859 ) );
				half Input_Squash58_g84859 = _MotionAmplitude_20;
				float enc59_g84861 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector259_g84861 = DecodeFloatToVector2( enc59_g84861 );
				float2 break61_g84861 = localDecodeFloatToVector259_g84861;
				half Mesh_Motion_2060_g84806 = break61_g84861.x;
				half Input_MeshMotion_20388_g84859 = Mesh_Motion_2060_g84806;
				float Bounds_Radius5231_g84806 = break63_g84861.y;
				half Input_BoundsRadius390_g84859 = Bounds_Radius5231_g84806;
				half Global_MotionValue462_g84859 = TVE_MotionValue_20;
				half2 Input_DirectionOS366_g84859 = Global_React_DirectionOS39_g84806;
				float2 break371_g84859 = Input_DirectionOS366_g84859;
				float3 appendResult372_g84859 = (float3(break371_g84859.x , ( Motion_SineA450_g84859 * 0.3 ) , break371_g84859.y));
				half3 Motion_20_Squash4418_g84806 = ( ( (max( Motion_SineA450_g84859 , Motion_SineB395_g84859 )*0.5 + 0.5) * Motion_Amplitude418_g84859 * Input_Squash58_g84859 * Input_MeshMotion_20388_g84859 * Input_BoundsRadius390_g84859 * Global_MotionValue462_g84859 ) * appendResult372_g84859 );
				half3 VertexPos40_g84876 = ( ( VertexPosRotationAxis50_g84888 + ( VertexPosOtherAxis82_g84888 * cos( Angle44_g84888 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g84888 ) * sin( Angle44_g84888 ) ) ) + Motion_20_Squash4418_g84806 );
				float3 appendResult74_g84876 = (float3(0.0 , VertexPos40_g84876.y , 0.0));
				float3 VertexPosRotationAxis50_g84876 = appendResult74_g84876;
				float3 break84_g84876 = VertexPos40_g84876;
				float3 appendResult81_g84876 = (float3(break84_g84876.x , 0.0 , break84_g84876.z));
				float3 VertexPosOtherAxis82_g84876 = appendResult81_g84876;
				half Input_Rolling379_g84859 = _MotionAmplitude_22;
				half Motion_20_Rolling5257_g84806 = ( Motion_SineA450_g84859 * Motion_Amplitude418_g84859 * Input_Rolling379_g84859 * Input_MeshMotion_20388_g84859 * Global_MotionValue462_g84859 );
				half Angle44_g84876 = Motion_20_Rolling5257_g84806;
				half3 Input_Position500_g84855 = WorldPosition_Shifted7477_g84806;
				half Input_MotionScale321_g84855 = _MotionScale_32;
				half Input_MotionVariation330_g84855 = _MotionVariation_32;
				half Input_GlobalVariation372_g84855 = Global_MeshVariation5104_g84806;
				float lerpResult128_g84856 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84855 = _MotionSpeed_32;
				float4 tex2DNode460_g84855 = SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g84855).xz * Input_MotionScale321_g84855 * 0.03 ) + ( Input_MotionVariation330_g84855 * Input_GlobalVariation372_g84855 ) + ( lerpResult128_g84856 * Input_MotionSpeed62_g84855 * 0.02 ) ), 0.0 );
				float3 appendResult462_g84855 = (float3(tex2DNode460_g84855.r , tex2DNode460_g84855.g , tex2DNode460_g84855.b));
				half3 Flutter_Texture489_g84855 = (appendResult462_g84855*2.0 + -1.0);
				float temp_output_7_0_g84841 = TVE_MotionFadeEnd;
				float temp_output_10_0_g84841 = ( TVE_MotionFadeStart - temp_output_7_0_g84841 );
				half Motion_FadeOut4005_g84806 = saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g84841 ) / ( temp_output_10_0_g84841 + 0.0001 ) ) );
				half Motion_30_Amplitude4960_g84806 = ( _MotionAmplitude_32 * Motion_FacingMask5214_g84806 * Motion_FadeOut4005_g84806 );
				half Input_MotionAmplitude58_g84855 = Motion_30_Amplitude4960_g84806;
				half Mesh_Motion_30144_g84806 = break61_g84861.y;
				half Input_MeshMotion_30374_g84855 = Mesh_Motion_30144_g84806;
				half Input_GlobalWind471_g84855 = Global_Wind_Power2223_g84806;
				half Global_MotionValue503_g84855 = TVE_MotionValue_30;
				half Input_GlobalNoise472_g84855 = Global_Noise_B5526_g84806;
				float lerpResult466_g84855 = lerp( 2.4 , 0.6 , Input_GlobalWind471_g84855);
				half Flutter_Amplitude491_g84855 = ( Input_MotionAmplitude58_g84855 * Input_MeshMotion_30374_g84855 * Input_GlobalWind471_g84855 * Global_MotionValue503_g84855 * pow( Input_GlobalNoise472_g84855 , lerpResult466_g84855 ) );
				half3 Motion_30_Flutter263_g84806 = ( Flutter_Texture489_g84855 * Flutter_Amplitude491_g84855 );
				float3 Vertex_Motion_Object833_g84806 = ( ( VertexPosRotationAxis50_g84876 + ( VertexPosOtherAxis82_g84876 * cos( Angle44_g84876 ) ) + ( cross( float3(0,1,0) , VertexPosOtherAxis82_g84876 ) * sin( Angle44_g84876 ) ) ) + Motion_30_Flutter263_g84806 );
				half3 ObjectData20_g84877 = Vertex_Motion_Object833_g84806;
				float3 temp_output_3474_0_g84806 = ( VertexPosition3588_g84806 - Mesh_PivotsOS2291_g84806 );
				float3 Vertex_Motion_World1118_g84806 = ( ( ( temp_output_3474_0_g84806 + ( Motion_10_Interaction7519_g84806 + Vertex_Orientation7542_g84806 ) ) + Motion_20_Squash4418_g84806 ) + Motion_30_Flutter263_g84806 );
				half3 WorldData19_g84877 = Vertex_Motion_World1118_g84806;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84877 = WorldData19_g84877;
				#else
				float3 staticSwitch14_g84877 = ObjectData20_g84877;
				#endif
				float3 temp_output_7495_0_g84806 = staticSwitch14_g84877;
				float3 Vertex_Motion7493_g84806 = temp_output_7495_0_g84806;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = normalize(ase_worldViewDir);
				float3 normalizeResult2169_g84806 = normalize( ase_worldViewDir );
				float3 ViewDirection3963_g84806 = normalizeResult2169_g84806;
				float3 break2709_g84806 = cross( ViewDirection3963_g84806 , half3(0,1,0) );
				float3 appendResult2710_g84806 = (float3(-break2709_g84806.z , 0.0 , break2709_g84806.x));
				float3 appendResult2667_g84806 = (float3(Global_MeshVariation5104_g84806 , 0.5 , Global_MeshVariation5104_g84806));
				half Mesh_Height1524_g84806 = v.ase_color.a;
				float dotResult2212_g84806 = dot( ViewDirection3963_g84806 , float3(0,1,0) );
				half Mask_HView2656_g84806 = dotResult2212_g84806;
				float saferPower2652_g84806 = abs( Mask_HView2656_g84806 );
				half3 Grass_Perspective2661_g84806 = ( ( ( mul( unity_WorldToObject, float4( appendResult2710_g84806 , 0.0 ) ).xyz * _PerspectivePushValue ) + ( (appendResult2667_g84806*2.0 + -1.0) * _PerspectiveNoiseValue ) ) * Mesh_Height1524_g84806 * pow( saferPower2652_g84806 , _PerspectiveAngleValue ) );
				half Global_VertexSize174_g84806 = saturate( break322_g84873.w );
				float lerpResult346_g84806 = lerp( 1.0 , Global_VertexSize174_g84806 , _GlobalSize);
				float3 appendResult3480_g84806 = (float3(lerpResult346_g84806 , lerpResult346_g84806 , lerpResult346_g84806));
				half3 ObjectData20_g84880 = appendResult3480_g84806;
				half3 _Vector11 = half3(1,1,1);
				half3 WorldData19_g84880 = _Vector11;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84880 = WorldData19_g84880;
				#else
				float3 staticSwitch14_g84880 = ObjectData20_g84880;
				#endif
				half3 Vertex_Size1741_g84806 = staticSwitch14_g84880;
				float temp_output_7_0_g84881 = _SizeFadeEndValue;
				float temp_output_10_0_g84881 = ( _SizeFadeStartValue - temp_output_7_0_g84881 );
				float temp_output_7453_0_g84806 = saturate( ( ( ( distance( _WorldSpaceCameraPos , ObjectPosition4223_g84806 ) * ( 1.0 / TVE_DistanceFadeBias ) ) - temp_output_7_0_g84881 ) / ( temp_output_10_0_g84881 + 0.0001 ) ) );
				float3 appendResult3482_g84806 = (float3(temp_output_7453_0_g84806 , temp_output_7453_0_g84806 , temp_output_7453_0_g84806));
				half3 ObjectData20_g84879 = appendResult3482_g84806;
				half3 _Vector5 = half3(1,1,1);
				half3 WorldData19_g84879 = _Vector5;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84879 = WorldData19_g84879;
				#else
				float3 staticSwitch14_g84879 = ObjectData20_g84879;
				#endif
				float3 Vertex_SizeFade1740_g84806 = staticSwitch14_g84879;
				half Global_VertexOffset7549_g84806 = break322_g84873.z;
				float3 ase_objectScale = float3( length( unity_ObjectToWorld[ 0 ].xyz ), length( unity_ObjectToWorld[ 1 ].xyz ), length( unity_ObjectToWorld[ 2 ].xyz ) );
				float3 appendResult7547_g84806 = (float3(0.0 , ( ( ( ( Global_VertexOffset7549_g84806 - ( (ObjectPosition_Shifted7481_g84806).y * _ConformOffsetMode ) ) + _ConformOffsetValue ) / ase_objectScale.y ) * _GlobalConform ) , 0.0));
				half3 Vertex_Offset7544_g84806 = appendResult7547_g84806;
				float3 lerpResult16_g84882 = lerp( VertexPosition3588_g84806 , ( ( ( Vertex_Motion7493_g84806 + Grass_Perspective2661_g84806 ) * Vertex_Size1741_g84806 * Vertex_SizeFade1740_g84806 ) + Mesh_PivotsOS2291_g84806 + Vertex_Offset7544_g84806 ) , TVE_IsEnabled);
				float3 temp_output_4912_0_g84806 = lerpResult16_g84882;
				float3 Final_VertexPosition890_g84806 = ( temp_output_4912_0_g84806 + _DisableSRPBatcher );
				
				half2 Global_VertexOrientationWS7551_g84806 = temp_output_356_0_g84873;
				float2 break7779_g84806 = Global_VertexOrientationWS7551_g84806;
				float dotResult8067_g84806 = dot( Global_VertexOrientationWS7551_g84806 , Global_VertexOrientationWS7551_g84806 );
				float3 appendResult7781_g84806 = (float3(break7779_g84806.x , sqrt( ( 1.0 - saturate( dotResult8067_g84806 ) ) ) , break7779_g84806.y));
				float3 normalizeResult8063_g84806 = normalize( appendResult7781_g84806 );
				float3 worldToObjDir7782_g84806 = ASESafeNormalize( mul( unity_WorldToObject, float4( normalizeResult8063_g84806, 0 ) ).xyz );
				half Terrain_Blend_Offset8086_g84806 = _TerrainBlendOffsetValue;
				half Terrain_Mask_Vertex8085_g84806 = saturate( ( ( Global_VertexOffset7549_g84806 + ( Terrain_Blend_Offset8086_g84806 * _TerrainBlendNormalValue ) ) - (WorldPosition_Shifted7477_g84806).y ) );
				float3 lerpResult7784_g84806 = lerp( v.normal , worldToObjDir7782_g84806 , Terrain_Mask_Vertex8085_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7896_g84806 = lerpResult7784_g84806;
				#else
				float3 staticSwitch7896_g84806 = v.normal;
				#endif
				
				float4 break33_g84872 = _second_uvs_mode;
				float2 temp_output_30_0_g84872 = ( v.ase_texcoord.xy * break33_g84872.x );
				float2 appendResult21_g84861 = (float2(v.texcoord1.xyzw.z , v.texcoord1.xyzw.w));
				float2 Mesh_DetailCoord3_g84806 = appendResult21_g84861;
				float2 temp_output_29_0_g84872 = ( Mesh_DetailCoord3_g84806 * break33_g84872.y );
				float2 temp_output_31_0_g84872 = ( (WorldPosition_Shifted7477_g84806).xz * break33_g84872.z );
				half2 Second_UVs_Tilling7656_g84806 = (_SecondUVs).xy;
				half2 Second_UVs_Scale7664_g84806 = ( 1.0 / Second_UVs_Tilling7656_g84806 );
				float2 lerpResult7660_g84806 = lerp( Second_UVs_Tilling7656_g84806 , Second_UVs_Scale7664_g84806 , _SecondUVsScaleMode);
				half2 Second_UVs_Offset7657_g84806 = (_SecondUVs).zw;
				float2 vertexToFrag11_g84871 = ( ( ( temp_output_30_0_g84872 + temp_output_29_0_g84872 + temp_output_31_0_g84872 ) * lerpResult7660_g84806 ) + Second_UVs_Offset7657_g84806 );
				o.ase_texcoord10.xy = vertexToFrag11_g84871;
				float vertexToFrag11_g84941 = saturate( ( ( Global_VertexOffset7549_g84806 + Terrain_Blend_Offset8086_g84806 ) - (WorldPosition_Shifted7477_g84806).y ) );
				o.ase_texcoord10.z = vertexToFrag11_g84941;
				o.ase_texcoord11.xyz = vertexToFrag3890_g84806;
				o.ase_texcoord12.xyz = vertexToFrag4224_g84806;
				half Global_Noise_A4860_g84806 = break638_g84851.a;
				half Tint_Highlight_Value3231_g84806 = ( Global_Noise_A4860_g84806 * Global_Wind_Power2223_g84806 * Motion_FadeOut4005_g84806 * Mesh_Height1524_g84806 );
				float vertexToFrag11_g84914 = Tint_Highlight_Value3231_g84806;
				o.ase_texcoord10.w = vertexToFrag11_g84914;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_color = v.ase_color;
				o.ase_normal = v.normal;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = Final_VertexPosition890_g84806;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = staticSwitch7896_g84806;
				v.tangent = v.tangent;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag ( v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif


				half2 Main_UVs15_g84806 = ( ( IN.ase_texcoord9.xy * (_MainUVs).xy ) + (_MainUVs).zw );
				float4 tex2DNode29_g84806 = SAMPLE_TEXTURE2D( _MainAlbedoTex, sampler_MainAlbedoTex, Main_UVs15_g84806 );
				float3 lerpResult6223_g84806 = lerp( float3( 1,1,1 ) , (tex2DNode29_g84806).rgb , _MainAlbedoValue);
				float4 tex2DNode35_g84806 = SAMPLE_TEXTURE2D( _MainMaskTex, sampler_Linear_Repeat, Main_UVs15_g84806 );
				half Main_Mask57_g84806 = tex2DNode35_g84806.b;
				float clampResult17_g84892 = clamp( Main_Mask57_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84893 = _MainMaskMinValue;
				float temp_output_10_0_g84893 = ( _MainMaskMaxValue - temp_output_7_0_g84893 );
				half Main_Mask_Remap5765_g84806 = saturate( ( ( clampResult17_g84892 - temp_output_7_0_g84893 ) / ( temp_output_10_0_g84893 + 0.0001 ) ) );
				float lerpResult8007_g84806 = lerp( 1.0 , Main_Mask_Remap5765_g84806 , _MainColorMode);
				float4 lerpResult7986_g84806 = lerp( _MainColorTwo , _MainColor , lerpResult8007_g84806);
				half3 Main_Color_RGB7994_g84806 = (lerpResult7986_g84806).rgb;
				half3 Main_Albedo99_g84806 = ( lerpResult6223_g84806 * Main_Color_RGB7994_g84806 );
				float2 vertexToFrag11_g84871 = IN.ase_texcoord10.xy;
				half2 Second_UVs17_g84806 = vertexToFrag11_g84871;
				float4 tex2DNode89_g84806 = SAMPLE_TEXTURE2D( _SecondAlbedoTex, sampler_SecondAlbedoTex, Second_UVs17_g84806 );
				float3 lerpResult6225_g84806 = lerp( float3( 1,1,1 ) , (tex2DNode89_g84806).rgb , _SecondAlbedoValue);
				float4 tex2DNode33_g84806 = SAMPLE_TEXTURE2D( _SecondMaskTex, sampler_Linear_Repeat, Second_UVs17_g84806 );
				half Second_Mask81_g84806 = tex2DNode33_g84806.b;
				float clampResult17_g84895 = clamp( Second_Mask81_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84896 = _SecondMaskMinValue;
				float temp_output_10_0_g84896 = ( _SecondMaskMaxValue - temp_output_7_0_g84896 );
				half Second_Mask_Remap6130_g84806 = saturate( ( ( clampResult17_g84895 - temp_output_7_0_g84896 ) / ( temp_output_10_0_g84896 + 0.0001 ) ) );
				float lerpResult8008_g84806 = lerp( 1.0 , Second_Mask_Remap6130_g84806 , _SecondColorMode);
				float4 lerpResult7997_g84806 = lerp( _SecondColorTwo , _SecondColor , lerpResult8008_g84806);
				half3 Second_Color_RGB8005_g84806 = (lerpResult7997_g84806).rgb;
				half3 Second_Albedo153_g84806 = ( lerpResult6225_g84806 * Second_Color_RGB8005_g84806 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g84905 = 2.0;
				#else
				float staticSwitch1_g84905 = 4.594794;
				#endif
				float3 lerpResult4834_g84806 = lerp( ( Main_Albedo99_g84806 * Second_Albedo153_g84806 * staticSwitch1_g84905 ) , Second_Albedo153_g84806 , _DetailBlendMode);
				float lerpResult6885_g84806 = lerp( Main_Mask57_g84806 , Second_Mask81_g84806 , _DetailMaskMode);
				float clampResult17_g84911 = clamp( lerpResult6885_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84910 = _DetailMaskMinValue;
				float temp_output_10_0_g84910 = ( _DetailMaskMaxValue - temp_output_7_0_g84910 );
				half Detail_Mask_Texture6794_g84806 = saturate( ( ( clampResult17_g84911 - temp_output_7_0_g84910 ) / ( temp_output_10_0_g84910 + 0.0001 ) ) );
				half Mesh_DetailMask90_g84806 = IN.ase_color.b;
				half4 Normal_Packed45_g84891 = SAMPLE_TEXTURE2D( _MainNormalTex, sampler_Linear_Repeat, Main_UVs15_g84806 );
				float2 appendResult58_g84891 = (float2(( (Normal_Packed45_g84891).x * (Normal_Packed45_g84891).w ) , (Normal_Packed45_g84891).y));
				half2 Normal_Default50_g84891 = appendResult58_g84891;
				half2 Normal_ASTC41_g84891 = (Normal_Packed45_g84891).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g84891 = Normal_ASTC41_g84891;
				#else
				float2 staticSwitch38_g84891 = Normal_Default50_g84891;
				#endif
				half2 Normal_NO_DTX544_g84891 = (Normal_Packed45_g84891).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g84891 = Normal_NO_DTX544_g84891;
				#else
				float2 staticSwitch37_g84891 = staticSwitch38_g84891;
				#endif
				float2 temp_output_6555_0_g84806 = ( (staticSwitch37_g84891*2.0 + -1.0) * _MainNormalValue );
				float3 appendResult7388_g84806 = (float3(temp_output_6555_0_g84806 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal7389_g84806 = appendResult7388_g84806;
				float3 worldNormal7389_g84806 = float3(dot(tanToWorld0,tanNormal7389_g84806), dot(tanToWorld1,tanNormal7389_g84806), dot(tanToWorld2,tanNormal7389_g84806));
				half3 Main_NormalWS7390_g84806 = worldNormal7389_g84806;
				float lerpResult6884_g84806 = lerp( Mesh_DetailMask90_g84806 , ((Main_NormalWS7390_g84806).y*0.5 + 0.5) , _DetailMeshMode);
				float clampResult17_g84909 = clamp( lerpResult6884_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84908 = _DetailMeshMinValue;
				float temp_output_10_0_g84908 = ( _DetailMeshMaxValue - temp_output_7_0_g84908 );
				half Detail_Mask_Surface1540_g84806 = saturate( ( ( clampResult17_g84909 - temp_output_7_0_g84908 ) / ( temp_output_10_0_g84908 + 0.0001 ) ) );
				float clampResult17_g84912 = clamp( ( Detail_Mask_Texture6794_g84806 * Detail_Mask_Surface1540_g84806 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g84913 = _DetailBlendMinValue;
				float temp_output_10_0_g84913 = ( _DetailBlendMaxValue - temp_output_7_0_g84913 );
				half Detail_Mask147_g84806 = ( saturate( ( ( clampResult17_g84912 - temp_output_7_0_g84913 ) / ( temp_output_10_0_g84913 + 0.0001 ) ) ) * _DetailMode * _DetailValue );
				float3 lerpResult235_g84806 = lerp( Main_Albedo99_g84806 , lerpResult4834_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float3 staticSwitch255_g84806 = lerpResult235_g84806;
				#else
				float3 staticSwitch255_g84806 = Main_Albedo99_g84806;
				#endif
				half3 Blend_Albedo_Detail265_g84806 = staticSwitch255_g84806;
				half Mesh_Height1524_g84806 = IN.ase_color.a;
				float temp_output_7_0_g84916 = _GradientMinValue;
				float temp_output_10_0_g84916 = ( _GradientMaxValue - temp_output_7_0_g84916 );
				half Tint_Gradient_Value2784_g84806 = saturate( ( ( Mesh_Height1524_g84806 - temp_output_7_0_g84916 ) / ( temp_output_10_0_g84916 + 0.0001 ) ) );
				float3 lerpResult2779_g84806 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Tint_Gradient_Value2784_g84806);
				float lerpResult6617_g84806 = lerp( Main_Mask_Remap5765_g84806 , Second_Mask_Remap6130_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch6623_g84806 = lerpResult6617_g84806;
				#else
				float staticSwitch6623_g84806 = Main_Mask_Remap5765_g84806;
				#endif
				half Blend_MaskRemap_Detail6621_g84806 = staticSwitch6623_g84806;
				half Tint_Gradient_Mask6207_g84806 = Blend_MaskRemap_Detail6621_g84806;
				float3 lerpResult6208_g84806 = lerp( float3( 1,1,1 ) , lerpResult2779_g84806 , Tint_Gradient_Mask6207_g84806);
				half3 Tint_Gradient_Color5769_g84806 = lerpResult6208_g84806;
				half3 Tint_Noise_Color5770_g84806 = float3(1,1,1);
				half3 Tint_User_Color7335_g84806 = float3(1,1,1);
				float Mesh_Occlusion318_g84806 = IN.ase_color.g;
				float clampResult17_g84915 = clamp( Mesh_Occlusion318_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84917 = _VertexOcclusionMinValue;
				float temp_output_10_0_g84917 = ( _VertexOcclusionMaxValue - temp_output_7_0_g84917 );
				half Occlusion_Mask6432_g84806 = saturate( ( ( clampResult17_g84915 - temp_output_7_0_g84917 ) / ( temp_output_10_0_g84917 + 0.0001 ) ) );
				float3 lerpResult2945_g84806 = lerp( (_VertexOcclusionColor).rgb , float3( 1,1,1 ) , Occlusion_Mask6432_g84806);
				half3 Occlusion_Color648_g84806 = lerpResult2945_g84806;
				half3 Matcap_Color7428_g84806 = half3(0,0,0);
				half3 Blend_Albedo_Tinted2808_g84806 = ( ( Blend_Albedo_Detail265_g84806 * Tint_Gradient_Color5769_g84806 * Tint_Noise_Color5770_g84806 * Tint_User_Color7335_g84806 * Occlusion_Color648_g84806 ) + Matcap_Color7428_g84806 );
				float localHeightBasedBlending7362_g84942 = ( 0.0 );
				float4 appendResult9125_g84942 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g85039 = appendResult9125_g84942;
				float2 InputScale48_g85039 = (temp_output_35_0_g85039).zw;
				half2 FinalScale53_g85039 = ( 1.0 / InputScale48_g85039 );
				float2 InputPosition52_g85039 = (temp_output_35_0_g85039).xy;
				half2 FinalPosition58_g85039 = -( FinalScale53_g85039 * InputPosition52_g85039 );
				float2 Terrain_Control_UV7873_g84942 = ( ( (worldPos).xz * FinalScale53_g85039 ) + FinalPosition58_g85039 );
				half4 Terrain_Control_047365_g84942 = SAMPLE_TEXTURE2D( _ControlTex1, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_047362_g84942 = Terrain_Control_047365_g84942;
				half4 Terrain_Control_087366_g84942 = SAMPLE_TEXTURE2D( _ControlTex2, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_087362_g84942 = Terrain_Control_087366_g84942;
				half4 Terrain_Control_127712_g84942 = SAMPLE_TEXTURE2D( _ControlTex3, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_127362_g84942 = Terrain_Control_127712_g84942;
				half4 Terrain_Control_167711_g84942 = SAMPLE_TEXTURE2D( _ControlTex4, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_167362_g84942 = Terrain_Control_167711_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84995) = _MaskTex1;
				SamplerState Sampler238_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_016785_g84942 = _Coords1;
				float4 temp_output_37_0_g84995 = Input_Coords_016785_g84942;
				half4 Coords238_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition238_g84995 = worldPos;
				half4 localSamplePlanar2D238_g84995 = SamplePlanar2D( Texture238_g84995 , Sampler238_g84995 , Coords238_g84995 , WorldPosition238_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84995) = _MaskTex1;
				SamplerState Sampler246_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition246_g84995 = worldPos;
				half3 WorldNormal246_g84995 = WorldNormal;
				half4 localSamplePlanar3D246_g84995 = SamplePlanar3D( Texture246_g84995 , Sampler246_g84995 , Coords246_g84995 , WorldPosition246_g84995 , WorldNormal246_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84995) = _MaskTex1;
				SamplerState Sampler234_g84995 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84995 = temp_output_37_0_g84995;
				float3 WorldPosition234_g84995 = worldPos;
				float4 localSampleStochastic2D234_g84995 = SampleStochastic2D( Texture234_g84995 , Sampler234_g84995 , Coords234_g84995 , WorldPosition234_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84995) = _MaskTex1;
				SamplerState Sampler263_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition263_g84995 = worldPos;
				half3 WorldNormal263_g84995 = WorldNormal;
				half4 localSampleStochastic3D263_g84995 = SampleStochastic3D( Texture263_g84995 , Sampler263_g84995 , Coords263_g84995 , WorldPosition263_g84995 , WorldNormal263_g84995 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8639_g84942 = localSamplePlanar2D238_g84995;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8639_g84942 = localSamplePlanar3D246_g84995;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8639_g84942 = localSampleStochastic2D234_g84995;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8639_g84942 = localSampleStochastic3D263_g84995;
				#else
				float4 staticSwitch8639_g84942 = localSamplePlanar2D238_g84995;
				#endif
				float4 temp_output_7_0_g84944 = _MaskMin1;
				float4 temp_output_10_0_g84944 = ( _MaskMax1 - temp_output_7_0_g84944 );
				float4 temp_output_6970_0_g84942 = saturate( ( ( staticSwitch8639_g84942 - temp_output_7_0_g84944 ) / ( temp_output_10_0_g84944 + 0.0001 ) ) );
				half4 Masks_015_g84952 = temp_output_6970_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84996) = _MaskTex2;
				SamplerState Sampler238_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_026787_g84942 = _Coords2;
				float4 temp_output_37_0_g84996 = Input_Coords_026787_g84942;
				half4 Coords238_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition238_g84996 = worldPos;
				half4 localSamplePlanar2D238_g84996 = SamplePlanar2D( Texture238_g84996 , Sampler238_g84996 , Coords238_g84996 , WorldPosition238_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84996) = _MaskTex2;
				SamplerState Sampler246_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition246_g84996 = worldPos;
				half3 WorldNormal246_g84996 = WorldNormal;
				half4 localSamplePlanar3D246_g84996 = SamplePlanar3D( Texture246_g84996 , Sampler246_g84996 , Coords246_g84996 , WorldPosition246_g84996 , WorldNormal246_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84996) = _MaskTex2;
				SamplerState Sampler234_g84996 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84996 = temp_output_37_0_g84996;
				float3 WorldPosition234_g84996 = worldPos;
				float4 localSampleStochastic2D234_g84996 = SampleStochastic2D( Texture234_g84996 , Sampler234_g84996 , Coords234_g84996 , WorldPosition234_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84996) = _MaskTex2;
				SamplerState Sampler263_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition263_g84996 = worldPos;
				half3 WorldNormal263_g84996 = WorldNormal;
				half4 localSampleStochastic3D263_g84996 = SampleStochastic3D( Texture263_g84996 , Sampler263_g84996 , Coords263_g84996 , WorldPosition263_g84996 , WorldNormal263_g84996 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8640_g84942 = localSamplePlanar2D238_g84996;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8640_g84942 = localSamplePlanar3D246_g84996;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8640_g84942 = localSampleStochastic2D234_g84996;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8640_g84942 = localSampleStochastic3D263_g84996;
				#else
				float4 staticSwitch8640_g84942 = localSamplePlanar2D238_g84996;
				#endif
				float4 temp_output_7_0_g84946 = _MaskMin2;
				float4 temp_output_10_0_g84946 = ( _MaskMax2 - temp_output_7_0_g84946 );
				float4 temp_output_6977_0_g84942 = saturate( ( ( staticSwitch8640_g84942 - temp_output_7_0_g84946 ) / ( temp_output_10_0_g84946 + 0.0001 ) ) );
				half4 Masks_0210_g84952 = temp_output_6977_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84997) = _MaskTex3;
				SamplerState Sampler238_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_036789_g84942 = _Coords3;
				float4 temp_output_37_0_g84997 = Input_Coords_036789_g84942;
				half4 Coords238_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition238_g84997 = worldPos;
				half4 localSamplePlanar2D238_g84997 = SamplePlanar2D( Texture238_g84997 , Sampler238_g84997 , Coords238_g84997 , WorldPosition238_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84997) = _MaskTex3;
				SamplerState Sampler246_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition246_g84997 = worldPos;
				half3 WorldNormal246_g84997 = WorldNormal;
				half4 localSamplePlanar3D246_g84997 = SamplePlanar3D( Texture246_g84997 , Sampler246_g84997 , Coords246_g84997 , WorldPosition246_g84997 , WorldNormal246_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84997) = _MaskTex3;
				SamplerState Sampler234_g84997 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84997 = temp_output_37_0_g84997;
				float3 WorldPosition234_g84997 = worldPos;
				float4 localSampleStochastic2D234_g84997 = SampleStochastic2D( Texture234_g84997 , Sampler234_g84997 , Coords234_g84997 , WorldPosition234_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84997) = _MaskTex3;
				SamplerState Sampler263_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition263_g84997 = worldPos;
				half3 WorldNormal263_g84997 = WorldNormal;
				half4 localSampleStochastic3D263_g84997 = SampleStochastic3D( Texture263_g84997 , Sampler263_g84997 , Coords263_g84997 , WorldPosition263_g84997 , WorldNormal263_g84997 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8641_g84942 = localSamplePlanar2D238_g84997;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8641_g84942 = localSamplePlanar3D246_g84997;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8641_g84942 = localSampleStochastic2D234_g84997;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8641_g84942 = localSampleStochastic3D263_g84997;
				#else
				float4 staticSwitch8641_g84942 = localSamplePlanar2D238_g84997;
				#endif
				float4 temp_output_7_0_g84947 = _MaskMin3;
				float4 temp_output_10_0_g84947 = ( _MaskMax3 - temp_output_7_0_g84947 );
				float4 temp_output_6978_0_g84942 = saturate( ( ( staticSwitch8641_g84942 - temp_output_7_0_g84947 ) / ( temp_output_10_0_g84947 + 0.0001 ) ) );
				half4 Masks_0312_g84952 = temp_output_6978_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84998) = _MaskTex4;
				SamplerState Sampler238_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_046791_g84942 = _Coords4;
				float4 temp_output_37_0_g84998 = Input_Coords_046791_g84942;
				half4 Coords238_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition238_g84998 = worldPos;
				half4 localSamplePlanar2D238_g84998 = SamplePlanar2D( Texture238_g84998 , Sampler238_g84998 , Coords238_g84998 , WorldPosition238_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84998) = _MaskTex4;
				SamplerState Sampler246_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition246_g84998 = worldPos;
				half3 WorldNormal246_g84998 = WorldNormal;
				half4 localSamplePlanar3D246_g84998 = SamplePlanar3D( Texture246_g84998 , Sampler246_g84998 , Coords246_g84998 , WorldPosition246_g84998 , WorldNormal246_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84998) = _MaskTex4;
				SamplerState Sampler234_g84998 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84998 = temp_output_37_0_g84998;
				float3 WorldPosition234_g84998 = worldPos;
				float4 localSampleStochastic2D234_g84998 = SampleStochastic2D( Texture234_g84998 , Sampler234_g84998 , Coords234_g84998 , WorldPosition234_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84998) = _MaskTex4;
				SamplerState Sampler263_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition263_g84998 = worldPos;
				half3 WorldNormal263_g84998 = WorldNormal;
				half4 localSampleStochastic3D263_g84998 = SampleStochastic3D( Texture263_g84998 , Sampler263_g84998 , Coords263_g84998 , WorldPosition263_g84998 , WorldNormal263_g84998 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8642_g84942 = localSamplePlanar2D238_g84998;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8642_g84942 = localSamplePlanar3D246_g84998;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8642_g84942 = localSampleStochastic2D234_g84998;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8642_g84942 = localSampleStochastic3D263_g84998;
				#else
				float4 staticSwitch8642_g84942 = localSamplePlanar2D238_g84998;
				#endif
				float4 temp_output_7_0_g84948 = _MaskMin4;
				float4 temp_output_10_0_g84948 = ( _MaskMax4 - temp_output_7_0_g84948 );
				float4 temp_output_6983_0_g84942 = saturate( ( ( staticSwitch8642_g84942 - temp_output_7_0_g84948 ) / ( temp_output_10_0_g84948 + 0.0001 ) ) );
				half4 Masks_0414_g84952 = temp_output_6983_0_g84942;
				float4 appendResult29_g84952 = (float4((Masks_015_g84952).z , (Masks_0210_g84952).z , (Masks_0312_g84952).z , (Masks_0414_g84952).z));
				half4 Control31_g84952 = Terrain_Control_047365_g84942;
				half4 Terrain_Height_047210_g84942 = ( appendResult29_g84952 * Control31_g84952 );
				float4 heights_047362_g84942 = Terrain_Height_047210_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85007) = _MaskTex5;
				SamplerState Sampler238_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_058750_g84942 = _Coords5;
				float4 temp_output_37_0_g85007 = Input_Coords_058750_g84942;
				half4 Coords238_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition238_g85007 = worldPos;
				half4 localSamplePlanar2D238_g85007 = SamplePlanar2D( Texture238_g85007 , Sampler238_g85007 , Coords238_g85007 , WorldPosition238_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85007) = _MaskTex5;
				SamplerState Sampler246_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition246_g85007 = worldPos;
				half3 WorldNormal246_g85007 = WorldNormal;
				half4 localSamplePlanar3D246_g85007 = SamplePlanar3D( Texture246_g85007 , Sampler246_g85007 , Coords246_g85007 , WorldPosition246_g85007 , WorldNormal246_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85007) = _MaskTex5;
				SamplerState Sampler234_g85007 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85007 = temp_output_37_0_g85007;
				float3 WorldPosition234_g85007 = worldPos;
				float4 localSampleStochastic2D234_g85007 = SampleStochastic2D( Texture234_g85007 , Sampler234_g85007 , Coords234_g85007 , WorldPosition234_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85007) = _MaskTex5;
				SamplerState Sampler263_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition263_g85007 = worldPos;
				half3 WorldNormal263_g85007 = WorldNormal;
				half4 localSampleStochastic3D263_g85007 = SampleStochastic3D( Texture263_g85007 , Sampler263_g85007 , Coords263_g85007 , WorldPosition263_g85007 , WorldNormal263_g85007 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8710_g84942 = localSamplePlanar2D238_g85007;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8710_g84942 = localSamplePlanar3D246_g85007;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8710_g84942 = localSampleStochastic2D234_g85007;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8710_g84942 = localSampleStochastic3D263_g85007;
				#else
				float4 staticSwitch8710_g84942 = localSamplePlanar2D238_g85007;
				#endif
				float4 temp_output_7_0_g84960 = _MaskMin5;
				float4 temp_output_10_0_g84960 = ( _MaskMax5 - temp_output_7_0_g84960 );
				float4 temp_output_8714_0_g84942 = saturate( ( ( staticSwitch8710_g84942 - temp_output_7_0_g84960 ) / ( temp_output_10_0_g84960 + 0.0001 ) ) );
				half4 Masks_015_g84961 = temp_output_8714_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85008) = _MaskTex6;
				SamplerState Sampler238_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_068751_g84942 = _Coords6;
				float4 temp_output_37_0_g85008 = Input_Coords_068751_g84942;
				half4 Coords238_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition238_g85008 = worldPos;
				half4 localSamplePlanar2D238_g85008 = SamplePlanar2D( Texture238_g85008 , Sampler238_g85008 , Coords238_g85008 , WorldPosition238_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85008) = _MaskTex6;
				SamplerState Sampler246_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition246_g85008 = worldPos;
				half3 WorldNormal246_g85008 = WorldNormal;
				half4 localSamplePlanar3D246_g85008 = SamplePlanar3D( Texture246_g85008 , Sampler246_g85008 , Coords246_g85008 , WorldPosition246_g85008 , WorldNormal246_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85008) = _MaskTex6;
				SamplerState Sampler234_g85008 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85008 = temp_output_37_0_g85008;
				float3 WorldPosition234_g85008 = worldPos;
				float4 localSampleStochastic2D234_g85008 = SampleStochastic2D( Texture234_g85008 , Sampler234_g85008 , Coords234_g85008 , WorldPosition234_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85008) = _MaskTex6;
				SamplerState Sampler263_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition263_g85008 = worldPos;
				half3 WorldNormal263_g85008 = WorldNormal;
				half4 localSampleStochastic3D263_g85008 = SampleStochastic3D( Texture263_g85008 , Sampler263_g85008 , Coords263_g85008 , WorldPosition263_g85008 , WorldNormal263_g85008 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8711_g84942 = localSamplePlanar2D238_g85008;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8711_g84942 = localSamplePlanar3D246_g85008;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8711_g84942 = localSampleStochastic2D234_g85008;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8711_g84942 = localSampleStochastic3D263_g85008;
				#else
				float4 staticSwitch8711_g84942 = localSamplePlanar2D238_g85008;
				#endif
				float4 temp_output_7_0_g84963 = _MaskMin6;
				float4 temp_output_10_0_g84963 = ( _MaskMax6 - temp_output_7_0_g84963 );
				float4 temp_output_8721_0_g84942 = saturate( ( ( staticSwitch8711_g84942 - temp_output_7_0_g84963 ) / ( temp_output_10_0_g84963 + 0.0001 ) ) );
				half4 Masks_0210_g84961 = temp_output_8721_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85009) = _MaskTex7;
				SamplerState Sampler238_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_078752_g84942 = _Coords7;
				float4 temp_output_37_0_g85009 = Input_Coords_078752_g84942;
				half4 Coords238_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition238_g85009 = worldPos;
				half4 localSamplePlanar2D238_g85009 = SamplePlanar2D( Texture238_g85009 , Sampler238_g85009 , Coords238_g85009 , WorldPosition238_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85009) = _MaskTex7;
				SamplerState Sampler246_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition246_g85009 = worldPos;
				half3 WorldNormal246_g85009 = WorldNormal;
				half4 localSamplePlanar3D246_g85009 = SamplePlanar3D( Texture246_g85009 , Sampler246_g85009 , Coords246_g85009 , WorldPosition246_g85009 , WorldNormal246_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85009) = _MaskTex7;
				SamplerState Sampler234_g85009 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85009 = temp_output_37_0_g85009;
				float3 WorldPosition234_g85009 = worldPos;
				float4 localSampleStochastic2D234_g85009 = SampleStochastic2D( Texture234_g85009 , Sampler234_g85009 , Coords234_g85009 , WorldPosition234_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85009) = _MaskTex7;
				SamplerState Sampler263_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition263_g85009 = worldPos;
				half3 WorldNormal263_g85009 = WorldNormal;
				half4 localSampleStochastic3D263_g85009 = SampleStochastic3D( Texture263_g85009 , Sampler263_g85009 , Coords263_g85009 , WorldPosition263_g85009 , WorldNormal263_g85009 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8712_g84942 = localSamplePlanar2D238_g85009;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8712_g84942 = localSamplePlanar3D246_g85009;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8712_g84942 = localSampleStochastic2D234_g85009;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8712_g84942 = localSampleStochastic3D263_g85009;
				#else
				float4 staticSwitch8712_g84942 = localSamplePlanar2D238_g85009;
				#endif
				float4 temp_output_7_0_g84964 = _MaskMin7;
				float4 temp_output_10_0_g84964 = ( _MaskMax7 - temp_output_7_0_g84964 );
				float4 temp_output_8724_0_g84942 = saturate( ( ( staticSwitch8712_g84942 - temp_output_7_0_g84964 ) / ( temp_output_10_0_g84964 + 0.0001 ) ) );
				half4 Masks_0312_g84961 = temp_output_8724_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85010) = _MaskTex8;
				SamplerState Sampler238_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_088749_g84942 = _Coords8;
				float4 temp_output_37_0_g85010 = Input_Coords_088749_g84942;
				half4 Coords238_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition238_g85010 = worldPos;
				half4 localSamplePlanar2D238_g85010 = SamplePlanar2D( Texture238_g85010 , Sampler238_g85010 , Coords238_g85010 , WorldPosition238_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85010) = _MaskTex8;
				SamplerState Sampler246_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition246_g85010 = worldPos;
				half3 WorldNormal246_g85010 = WorldNormal;
				half4 localSamplePlanar3D246_g85010 = SamplePlanar3D( Texture246_g85010 , Sampler246_g85010 , Coords246_g85010 , WorldPosition246_g85010 , WorldNormal246_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85010) = _MaskTex8;
				SamplerState Sampler234_g85010 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85010 = temp_output_37_0_g85010;
				float3 WorldPosition234_g85010 = worldPos;
				float4 localSampleStochastic2D234_g85010 = SampleStochastic2D( Texture234_g85010 , Sampler234_g85010 , Coords234_g85010 , WorldPosition234_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85010) = _MaskTex8;
				SamplerState Sampler263_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition263_g85010 = worldPos;
				half3 WorldNormal263_g85010 = WorldNormal;
				half4 localSampleStochastic3D263_g85010 = SampleStochastic3D( Texture263_g85010 , Sampler263_g85010 , Coords263_g85010 , WorldPosition263_g85010 , WorldNormal263_g85010 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8713_g84942 = localSamplePlanar2D238_g85010;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8713_g84942 = localSamplePlanar3D246_g85010;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8713_g84942 = localSampleStochastic2D234_g85010;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8713_g84942 = localSampleStochastic3D263_g85010;
				#else
				float4 staticSwitch8713_g84942 = localSamplePlanar2D238_g85010;
				#endif
				float4 temp_output_7_0_g84965 = _MaskMin8;
				float4 temp_output_10_0_g84965 = ( _MaskMax8 - temp_output_7_0_g84965 );
				float4 temp_output_8727_0_g84942 = saturate( ( ( staticSwitch8713_g84942 - temp_output_7_0_g84965 ) / ( temp_output_10_0_g84965 + 0.0001 ) ) );
				half4 Masks_0414_g84961 = temp_output_8727_0_g84942;
				float4 appendResult29_g84961 = (float4((Masks_015_g84961).z , (Masks_0210_g84961).z , (Masks_0312_g84961).z , (Masks_0414_g84961).z));
				half4 Control31_g84961 = Terrain_Control_087366_g84942;
				half4 Terrain_Height_088731_g84942 = ( appendResult29_g84961 * Control31_g84961 );
				float4 heights_087362_g84942 = Terrain_Height_088731_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85019) = _MaskTex9;
				SamplerState Sampler238_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_098833_g84942 = _Coords9;
				float4 temp_output_37_0_g85019 = Input_Coords_098833_g84942;
				half4 Coords238_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition238_g85019 = worldPos;
				half4 localSamplePlanar2D238_g85019 = SamplePlanar2D( Texture238_g85019 , Sampler238_g85019 , Coords238_g85019 , WorldPosition238_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85019) = _MaskTex9;
				SamplerState Sampler246_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition246_g85019 = worldPos;
				half3 WorldNormal246_g85019 = WorldNormal;
				half4 localSamplePlanar3D246_g85019 = SamplePlanar3D( Texture246_g85019 , Sampler246_g85019 , Coords246_g85019 , WorldPosition246_g85019 , WorldNormal246_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85019) = _MaskTex9;
				SamplerState Sampler234_g85019 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85019 = temp_output_37_0_g85019;
				float3 WorldPosition234_g85019 = worldPos;
				float4 localSampleStochastic2D234_g85019 = SampleStochastic2D( Texture234_g85019 , Sampler234_g85019 , Coords234_g85019 , WorldPosition234_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85019) = _MaskTex9;
				SamplerState Sampler263_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition263_g85019 = worldPos;
				half3 WorldNormal263_g85019 = WorldNormal;
				half4 localSampleStochastic3D263_g85019 = SampleStochastic3D( Texture263_g85019 , Sampler263_g85019 , Coords263_g85019 , WorldPosition263_g85019 , WorldNormal263_g85019 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8878_g84942 = localSamplePlanar2D238_g85019;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8878_g84942 = localSamplePlanar3D246_g85019;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8878_g84942 = localSampleStochastic2D234_g85019;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8878_g84942 = localSampleStochastic3D263_g85019;
				#else
				float4 staticSwitch8878_g84942 = localSamplePlanar2D238_g85019;
				#endif
				float4 temp_output_7_0_g84970 = _MaskMin9;
				float4 temp_output_10_0_g84970 = ( _MaskMax9 - temp_output_7_0_g84970 );
				float4 temp_output_8815_0_g84942 = saturate( ( ( staticSwitch8878_g84942 - temp_output_7_0_g84970 ) / ( temp_output_10_0_g84970 + 0.0001 ) ) );
				half4 Masks_015_g84971 = temp_output_8815_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85020) = _MaskTex10;
				SamplerState Sampler238_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_108834_g84942 = _Coords10;
				float4 temp_output_37_0_g85020 = Input_Coords_108834_g84942;
				half4 Coords238_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition238_g85020 = worldPos;
				half4 localSamplePlanar2D238_g85020 = SamplePlanar2D( Texture238_g85020 , Sampler238_g85020 , Coords238_g85020 , WorldPosition238_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85020) = _MaskTex10;
				SamplerState Sampler246_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition246_g85020 = worldPos;
				half3 WorldNormal246_g85020 = WorldNormal;
				half4 localSamplePlanar3D246_g85020 = SamplePlanar3D( Texture246_g85020 , Sampler246_g85020 , Coords246_g85020 , WorldPosition246_g85020 , WorldNormal246_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85020) = _MaskTex10;
				SamplerState Sampler234_g85020 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85020 = temp_output_37_0_g85020;
				float3 WorldPosition234_g85020 = worldPos;
				float4 localSampleStochastic2D234_g85020 = SampleStochastic2D( Texture234_g85020 , Sampler234_g85020 , Coords234_g85020 , WorldPosition234_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85020) = _MaskTex10;
				SamplerState Sampler263_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition263_g85020 = worldPos;
				half3 WorldNormal263_g85020 = WorldNormal;
				half4 localSampleStochastic3D263_g85020 = SampleStochastic3D( Texture263_g85020 , Sampler263_g85020 , Coords263_g85020 , WorldPosition263_g85020 , WorldNormal263_g85020 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8860_g84942 = localSamplePlanar2D238_g85020;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8860_g84942 = localSamplePlanar3D246_g85020;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8860_g84942 = localSampleStochastic2D234_g85020;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8860_g84942 = localSampleStochastic3D263_g85020;
				#else
				float4 staticSwitch8860_g84942 = localSamplePlanar2D238_g85020;
				#endif
				float4 temp_output_7_0_g84973 = _MaskMin10;
				float4 temp_output_10_0_g84973 = ( _MaskMax10 - temp_output_7_0_g84973 );
				float4 temp_output_8818_0_g84942 = saturate( ( ( staticSwitch8860_g84942 - temp_output_7_0_g84973 ) / ( temp_output_10_0_g84973 + 0.0001 ) ) );
				half4 Masks_0210_g84971 = temp_output_8818_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85021) = _MaskTex11;
				SamplerState Sampler238_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_118835_g84942 = _Coords11;
				float4 temp_output_37_0_g85021 = Input_Coords_118835_g84942;
				half4 Coords238_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition238_g85021 = worldPos;
				half4 localSamplePlanar2D238_g85021 = SamplePlanar2D( Texture238_g85021 , Sampler238_g85021 , Coords238_g85021 , WorldPosition238_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85021) = _MaskTex11;
				SamplerState Sampler246_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition246_g85021 = worldPos;
				half3 WorldNormal246_g85021 = WorldNormal;
				half4 localSamplePlanar3D246_g85021 = SamplePlanar3D( Texture246_g85021 , Sampler246_g85021 , Coords246_g85021 , WorldPosition246_g85021 , WorldNormal246_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85021) = _MaskTex11;
				SamplerState Sampler234_g85021 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85021 = temp_output_37_0_g85021;
				float3 WorldPosition234_g85021 = worldPos;
				float4 localSampleStochastic2D234_g85021 = SampleStochastic2D( Texture234_g85021 , Sampler234_g85021 , Coords234_g85021 , WorldPosition234_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85021) = _MaskTex11;
				SamplerState Sampler263_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition263_g85021 = worldPos;
				half3 WorldNormal263_g85021 = WorldNormal;
				half4 localSampleStochastic3D263_g85021 = SampleStochastic3D( Texture263_g85021 , Sampler263_g85021 , Coords263_g85021 , WorldPosition263_g85021 , WorldNormal263_g85021 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8861_g84942 = localSamplePlanar2D238_g85021;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8861_g84942 = localSamplePlanar3D246_g85021;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8861_g84942 = localSampleStochastic2D234_g85021;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8861_g84942 = localSampleStochastic3D263_g85021;
				#else
				float4 staticSwitch8861_g84942 = localSamplePlanar2D238_g85021;
				#endif
				float4 temp_output_7_0_g84974 = _MaskMin11;
				float4 temp_output_10_0_g84974 = ( _MaskMax11 - temp_output_7_0_g84974 );
				float4 temp_output_8819_0_g84942 = saturate( ( ( staticSwitch8861_g84942 - temp_output_7_0_g84974 ) / ( temp_output_10_0_g84974 + 0.0001 ) ) );
				half4 Masks_0312_g84971 = temp_output_8819_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85022) = _MaskTex12;
				SamplerState Sampler238_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_128836_g84942 = _Coords12;
				float4 temp_output_37_0_g85022 = Input_Coords_128836_g84942;
				half4 Coords238_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition238_g85022 = worldPos;
				half4 localSamplePlanar2D238_g85022 = SamplePlanar2D( Texture238_g85022 , Sampler238_g85022 , Coords238_g85022 , WorldPosition238_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85022) = _MaskTex12;
				SamplerState Sampler246_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition246_g85022 = worldPos;
				half3 WorldNormal246_g85022 = WorldNormal;
				half4 localSamplePlanar3D246_g85022 = SamplePlanar3D( Texture246_g85022 , Sampler246_g85022 , Coords246_g85022 , WorldPosition246_g85022 , WorldNormal246_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85022) = _MaskTex12;
				SamplerState Sampler234_g85022 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85022 = temp_output_37_0_g85022;
				float3 WorldPosition234_g85022 = worldPos;
				float4 localSampleStochastic2D234_g85022 = SampleStochastic2D( Texture234_g85022 , Sampler234_g85022 , Coords234_g85022 , WorldPosition234_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85022) = _MaskTex12;
				SamplerState Sampler263_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition263_g85022 = worldPos;
				half3 WorldNormal263_g85022 = WorldNormal;
				half4 localSampleStochastic3D263_g85022 = SampleStochastic3D( Texture263_g85022 , Sampler263_g85022 , Coords263_g85022 , WorldPosition263_g85022 , WorldNormal263_g85022 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8879_g84942 = localSamplePlanar2D238_g85022;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8879_g84942 = localSamplePlanar3D246_g85022;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8879_g84942 = localSampleStochastic2D234_g85022;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8879_g84942 = localSampleStochastic3D263_g85022;
				#else
				float4 staticSwitch8879_g84942 = localSamplePlanar2D238_g85022;
				#endif
				float4 temp_output_7_0_g84975 = _MaskMin12;
				float4 temp_output_10_0_g84975 = ( _MaskMax12 - temp_output_7_0_g84975 );
				float4 temp_output_8820_0_g84942 = saturate( ( ( staticSwitch8879_g84942 - temp_output_7_0_g84975 ) / ( temp_output_10_0_g84975 + 0.0001 ) ) );
				half4 Masks_0414_g84971 = temp_output_8820_0_g84942;
				float4 appendResult29_g84971 = (float4((Masks_015_g84971).z , (Masks_0210_g84971).z , (Masks_0312_g84971).z , (Masks_0414_g84971).z));
				half4 Control31_g84971 = Terrain_Control_127712_g84942;
				half4 Terrain_Height_128870_g84942 = ( appendResult29_g84971 * Control31_g84971 );
				float4 heights_127362_g84942 = Terrain_Height_128870_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85030) = _MaskTex13;
				SamplerState Sampler238_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_138960_g84942 = _Coords13;
				float4 temp_output_37_0_g85030 = Input_Coords_138960_g84942;
				half4 Coords238_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition238_g85030 = worldPos;
				half4 localSamplePlanar2D238_g85030 = SamplePlanar2D( Texture238_g85030 , Sampler238_g85030 , Coords238_g85030 , WorldPosition238_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85030) = _MaskTex13;
				SamplerState Sampler246_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition246_g85030 = worldPos;
				half3 WorldNormal246_g85030 = WorldNormal;
				half4 localSamplePlanar3D246_g85030 = SamplePlanar3D( Texture246_g85030 , Sampler246_g85030 , Coords246_g85030 , WorldPosition246_g85030 , WorldNormal246_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85030) = _MaskTex13;
				SamplerState Sampler234_g85030 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85030 = temp_output_37_0_g85030;
				float3 WorldPosition234_g85030 = worldPos;
				float4 localSampleStochastic2D234_g85030 = SampleStochastic2D( Texture234_g85030 , Sampler234_g85030 , Coords234_g85030 , WorldPosition234_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85030) = _MaskTex13;
				SamplerState Sampler263_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition263_g85030 = worldPos;
				half3 WorldNormal263_g85030 = WorldNormal;
				half4 localSampleStochastic3D263_g85030 = SampleStochastic3D( Texture263_g85030 , Sampler263_g85030 , Coords263_g85030 , WorldPosition263_g85030 , WorldNormal263_g85030 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch9000_g84942 = localSamplePlanar2D238_g85030;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch9000_g84942 = localSamplePlanar3D246_g85030;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch9000_g84942 = localSampleStochastic2D234_g85030;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch9000_g84942 = localSampleStochastic3D263_g85030;
				#else
				float4 staticSwitch9000_g84942 = localSamplePlanar2D238_g85030;
				#endif
				float4 temp_output_7_0_g84980 = _MaskMin13;
				float4 temp_output_10_0_g84980 = ( _MaskMax13 - temp_output_7_0_g84980 );
				float4 temp_output_8931_0_g84942 = saturate( ( ( staticSwitch9000_g84942 - temp_output_7_0_g84980 ) / ( temp_output_10_0_g84980 + 0.0001 ) ) );
				half4 Masks_015_g84981 = temp_output_8931_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85031) = _MaskTex14;
				SamplerState Sampler238_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_148961_g84942 = _Coords14;
				float4 temp_output_37_0_g85031 = Input_Coords_148961_g84942;
				half4 Coords238_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition238_g85031 = worldPos;
				half4 localSamplePlanar2D238_g85031 = SamplePlanar2D( Texture238_g85031 , Sampler238_g85031 , Coords238_g85031 , WorldPosition238_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85031) = _MaskTex14;
				SamplerState Sampler246_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition246_g85031 = worldPos;
				half3 WorldNormal246_g85031 = WorldNormal;
				half4 localSamplePlanar3D246_g85031 = SamplePlanar3D( Texture246_g85031 , Sampler246_g85031 , Coords246_g85031 , WorldPosition246_g85031 , WorldNormal246_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85031) = _MaskTex14;
				SamplerState Sampler234_g85031 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85031 = temp_output_37_0_g85031;
				float3 WorldPosition234_g85031 = worldPos;
				float4 localSampleStochastic2D234_g85031 = SampleStochastic2D( Texture234_g85031 , Sampler234_g85031 , Coords234_g85031 , WorldPosition234_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85031) = _MaskTex14;
				SamplerState Sampler263_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition263_g85031 = worldPos;
				half3 WorldNormal263_g85031 = WorldNormal;
				half4 localSampleStochastic3D263_g85031 = SampleStochastic3D( Texture263_g85031 , Sampler263_g85031 , Coords263_g85031 , WorldPosition263_g85031 , WorldNormal263_g85031 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch9001_g84942 = localSamplePlanar2D238_g85031;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch9001_g84942 = localSamplePlanar3D246_g85031;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch9001_g84942 = localSampleStochastic2D234_g85031;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch9001_g84942 = localSampleStochastic3D263_g85031;
				#else
				float4 staticSwitch9001_g84942 = localSamplePlanar2D238_g85031;
				#endif
				float4 temp_output_7_0_g84983 = _MaskMin14;
				float4 temp_output_10_0_g84983 = ( _MaskMax14 - temp_output_7_0_g84983 );
				float4 temp_output_8934_0_g84942 = saturate( ( ( staticSwitch9001_g84942 - temp_output_7_0_g84983 ) / ( temp_output_10_0_g84983 + 0.0001 ) ) );
				half4 Masks_0210_g84981 = temp_output_8934_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85032) = _MaskTex15;
				SamplerState Sampler238_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_158962_g84942 = _Coords15;
				float4 temp_output_37_0_g85032 = Input_Coords_158962_g84942;
				half4 Coords238_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition238_g85032 = worldPos;
				half4 localSamplePlanar2D238_g85032 = SamplePlanar2D( Texture238_g85032 , Sampler238_g85032 , Coords238_g85032 , WorldPosition238_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85032) = _MaskTex15;
				SamplerState Sampler246_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition246_g85032 = worldPos;
				half3 WorldNormal246_g85032 = WorldNormal;
				half4 localSamplePlanar3D246_g85032 = SamplePlanar3D( Texture246_g85032 , Sampler246_g85032 , Coords246_g85032 , WorldPosition246_g85032 , WorldNormal246_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85032) = _MaskTex15;
				SamplerState Sampler234_g85032 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85032 = temp_output_37_0_g85032;
				float3 WorldPosition234_g85032 = worldPos;
				float4 localSampleStochastic2D234_g85032 = SampleStochastic2D( Texture234_g85032 , Sampler234_g85032 , Coords234_g85032 , WorldPosition234_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85032) = _MaskTex15;
				SamplerState Sampler263_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition263_g85032 = worldPos;
				half3 WorldNormal263_g85032 = WorldNormal;
				half4 localSampleStochastic3D263_g85032 = SampleStochastic3D( Texture263_g85032 , Sampler263_g85032 , Coords263_g85032 , WorldPosition263_g85032 , WorldNormal263_g85032 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch9002_g84942 = localSamplePlanar2D238_g85032;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch9002_g84942 = localSamplePlanar3D246_g85032;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch9002_g84942 = localSampleStochastic2D234_g85032;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch9002_g84942 = localSampleStochastic3D263_g85032;
				#else
				float4 staticSwitch9002_g84942 = localSamplePlanar2D238_g85032;
				#endif
				float4 temp_output_7_0_g84984 = _MaskMin15;
				float4 temp_output_10_0_g84984 = ( _MaskMax15 - temp_output_7_0_g84984 );
				float4 temp_output_8935_0_g84942 = saturate( ( ( staticSwitch9002_g84942 - temp_output_7_0_g84984 ) / ( temp_output_10_0_g84984 + 0.0001 ) ) );
				half4 Masks_0312_g84981 = temp_output_8935_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85033) = _MaskTex16;
				SamplerState Sampler238_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_168959_g84942 = _Coords16;
				float4 temp_output_37_0_g85033 = Input_Coords_168959_g84942;
				half4 Coords238_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition238_g85033 = worldPos;
				half4 localSamplePlanar2D238_g85033 = SamplePlanar2D( Texture238_g85033 , Sampler238_g85033 , Coords238_g85033 , WorldPosition238_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85033) = _MaskTex16;
				SamplerState Sampler246_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition246_g85033 = worldPos;
				half3 WorldNormal246_g85033 = WorldNormal;
				half4 localSamplePlanar3D246_g85033 = SamplePlanar3D( Texture246_g85033 , Sampler246_g85033 , Coords246_g85033 , WorldPosition246_g85033 , WorldNormal246_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85033) = _MaskTex16;
				SamplerState Sampler234_g85033 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85033 = temp_output_37_0_g85033;
				float3 WorldPosition234_g85033 = worldPos;
				float4 localSampleStochastic2D234_g85033 = SampleStochastic2D( Texture234_g85033 , Sampler234_g85033 , Coords234_g85033 , WorldPosition234_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85033) = _MaskTex16;
				SamplerState Sampler263_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition263_g85033 = worldPos;
				half3 WorldNormal263_g85033 = WorldNormal;
				half4 localSampleStochastic3D263_g85033 = SampleStochastic3D( Texture263_g85033 , Sampler263_g85033 , Coords263_g85033 , WorldPosition263_g85033 , WorldNormal263_g85033 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch9003_g84942 = localSamplePlanar2D238_g85033;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch9003_g84942 = localSamplePlanar3D246_g85033;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch9003_g84942 = localSampleStochastic2D234_g85033;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch9003_g84942 = localSampleStochastic3D263_g85033;
				#else
				float4 staticSwitch9003_g84942 = localSamplePlanar2D238_g85033;
				#endif
				float4 temp_output_7_0_g84985 = _MaskMin16;
				float4 temp_output_10_0_g84985 = ( _MaskMax16 - temp_output_7_0_g84985 );
				float4 temp_output_8936_0_g84942 = saturate( ( ( staticSwitch9003_g84942 - temp_output_7_0_g84985 ) / ( temp_output_10_0_g84985 + 0.0001 ) ) );
				half4 Masks_0414_g84981 = temp_output_8936_0_g84942;
				float4 appendResult29_g84981 = (float4((Masks_015_g84981).z , (Masks_0210_g84981).z , (Masks_0312_g84981).z , (Masks_0414_g84981).z));
				half4 Control31_g84981 = Terrain_Control_167711_g84942;
				half4 Terrain_Height_169015_g84942 = ( appendResult29_g84981 * Control31_g84981 );
				float4 heights_167362_g84942 = Terrain_Height_169015_g84942;
				float heightTransition7362_g84942 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g84942 = float4( 0,0,0,0 );
				float4 weights_087362_g84942 = float4( 0,0,0,0 );
				float4 weights_127362_g84942 = float4( 0,0,0,0 );
				float4 weights_167362_g84942 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g84942.x;
				maxHeight = max(maxHeight, heights_047362_g84942.y);
				maxHeight = max(maxHeight, heights_047362_g84942.z);
				maxHeight = max(maxHeight, heights_047362_g84942.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				maxHeight = max(maxHeight, heights_127362_g84942.x);
				maxHeight = max(maxHeight, heights_127362_g84942.y);
				maxHeight = max(maxHeight, heights_127362_g84942.z);
				maxHeight = max(maxHeight, heights_127362_g84942.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				maxHeight = max(maxHeight, heights_127362_g84942.x);
				maxHeight = max(maxHeight, heights_127362_g84942.y);
				maxHeight = max(maxHeight, heights_127362_g84942.z);
				maxHeight = max(maxHeight, heights_127362_g84942.w);
				maxHeight = max(maxHeight, heights_167362_g84942.x);
				maxHeight = max(maxHeight, heights_167362_g84942.y);
				maxHeight = max(maxHeight, heights_167362_g84942.z);
				maxHeight = max(maxHeight, heights_167362_g84942.w);
				#endif
				float transition = max(heightTransition7362_g84942, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g84942.x, heights_047362_g84942.y, heights_047362_g84942.z, heights_047362_g84942.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g84942;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				weightedHeights_12 = float4 ( heights_127362_g84942.x, heights_127362_g84942.y, heights_127362_g84942.z, heights_127362_g84942.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g84942;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				weightedHeights_12 = float4 ( heights_127362_g84942.x, heights_127362_g84942.y, heights_127362_g84942.z, heights_127362_g84942.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g84942;
				weightedHeights_16 = float4 ( heights_167362_g84942.x, heights_167362_g84942.y, heights_167362_g84942.z, heights_167362_g84942.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g84942;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g84942 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g84942 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g84942 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g84942 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8792_g84942 = weights_047362_g84942;
				#else
				float4 staticSwitch8792_g84942 = control_047362_g84942;
				#endif
				half4 Terrain_Weights_046781_g84942 = staticSwitch8792_g84942;
				half4 Weights52_g84951 = Terrain_Weights_046781_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85035) = _AlbedoTex1;
				SamplerState Sampler238_g85035 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85035 = Input_Coords_016785_g84942;
				half4 Coords238_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition238_g85035 = worldPos;
				half4 localSamplePlanar2D238_g85035 = SamplePlanar2D( Texture238_g85035 , Sampler238_g85035 , Coords238_g85035 , WorldPosition238_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85035) = _AlbedoTex1;
				SamplerState Sampler246_g85035 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition246_g85035 = worldPos;
				half3 WorldNormal246_g85035 = WorldNormal;
				half4 localSamplePlanar3D246_g85035 = SamplePlanar3D( Texture246_g85035 , Sampler246_g85035 , Coords246_g85035 , WorldPosition246_g85035 , WorldNormal246_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85035) = _AlbedoTex1;
				SamplerState Sampler234_g85035 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85035 = temp_output_37_0_g85035;
				float3 WorldPosition234_g85035 = worldPos;
				float4 localSampleStochastic2D234_g85035 = SampleStochastic2D( Texture234_g85035 , Sampler234_g85035 , Coords234_g85035 , WorldPosition234_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85035) = _AlbedoTex1;
				SamplerState Sampler263_g85035 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition263_g85035 = worldPos;
				half3 WorldNormal263_g85035 = WorldNormal;
				half4 localSampleStochastic3D263_g85035 = SampleStochastic3D( Texture263_g85035 , Sampler263_g85035 , Coords263_g85035 , WorldPosition263_g85035 , WorldNormal263_g85035 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8614_g84942 = localSamplePlanar2D238_g85035;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8614_g84942 = localSamplePlanar3D246_g85035;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8614_g84942 = localSampleStochastic2D234_g85035;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8614_g84942 = localSampleStochastic3D263_g85035;
				#else
				float4 staticSwitch8614_g84942 = localSamplePlanar2D238_g85035;
				#endif
				half4 Layer133_g84951 = staticSwitch8614_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84988) = _AlbedoTex2;
				SamplerState Sampler238_g84988 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84988 = Input_Coords_026787_g84942;
				half4 Coords238_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition238_g84988 = worldPos;
				half4 localSamplePlanar2D238_g84988 = SamplePlanar2D( Texture238_g84988 , Sampler238_g84988 , Coords238_g84988 , WorldPosition238_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84988) = _AlbedoTex2;
				SamplerState Sampler246_g84988 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition246_g84988 = worldPos;
				half3 WorldNormal246_g84988 = WorldNormal;
				half4 localSamplePlanar3D246_g84988 = SamplePlanar3D( Texture246_g84988 , Sampler246_g84988 , Coords246_g84988 , WorldPosition246_g84988 , WorldNormal246_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84988) = _AlbedoTex2;
				SamplerState Sampler234_g84988 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84988 = temp_output_37_0_g84988;
				float3 WorldPosition234_g84988 = worldPos;
				float4 localSampleStochastic2D234_g84988 = SampleStochastic2D( Texture234_g84988 , Sampler234_g84988 , Coords234_g84988 , WorldPosition234_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84988) = _AlbedoTex2;
				SamplerState Sampler263_g84988 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition263_g84988 = worldPos;
				half3 WorldNormal263_g84988 = WorldNormal;
				half4 localSampleStochastic3D263_g84988 = SampleStochastic3D( Texture263_g84988 , Sampler263_g84988 , Coords263_g84988 , WorldPosition263_g84988 , WorldNormal263_g84988 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8629_g84942 = localSamplePlanar2D238_g84988;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8629_g84942 = localSamplePlanar3D246_g84988;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8629_g84942 = localSampleStochastic2D234_g84988;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8629_g84942 = localSampleStochastic3D263_g84988;
				#else
				float4 staticSwitch8629_g84942 = localSamplePlanar2D238_g84988;
				#endif
				half4 Layer237_g84951 = staticSwitch8629_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84989) = _AlbedoTex3;
				SamplerState Sampler238_g84989 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84989 = Input_Coords_036789_g84942;
				half4 Coords238_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition238_g84989 = worldPos;
				half4 localSamplePlanar2D238_g84989 = SamplePlanar2D( Texture238_g84989 , Sampler238_g84989 , Coords238_g84989 , WorldPosition238_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84989) = _AlbedoTex3;
				SamplerState Sampler246_g84989 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition246_g84989 = worldPos;
				half3 WorldNormal246_g84989 = WorldNormal;
				half4 localSamplePlanar3D246_g84989 = SamplePlanar3D( Texture246_g84989 , Sampler246_g84989 , Coords246_g84989 , WorldPosition246_g84989 , WorldNormal246_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84989) = _AlbedoTex3;
				SamplerState Sampler234_g84989 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84989 = temp_output_37_0_g84989;
				float3 WorldPosition234_g84989 = worldPos;
				float4 localSampleStochastic2D234_g84989 = SampleStochastic2D( Texture234_g84989 , Sampler234_g84989 , Coords234_g84989 , WorldPosition234_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84989) = _AlbedoTex3;
				SamplerState Sampler263_g84989 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition263_g84989 = worldPos;
				half3 WorldNormal263_g84989 = WorldNormal;
				half4 localSampleStochastic3D263_g84989 = SampleStochastic3D( Texture263_g84989 , Sampler263_g84989 , Coords263_g84989 , WorldPosition263_g84989 , WorldNormal263_g84989 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8630_g84942 = localSamplePlanar2D238_g84989;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8630_g84942 = localSamplePlanar3D246_g84989;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8630_g84942 = localSampleStochastic2D234_g84989;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8630_g84942 = localSampleStochastic3D263_g84989;
				#else
				float4 staticSwitch8630_g84942 = localSamplePlanar2D238_g84989;
				#endif
				half4 Layer338_g84951 = staticSwitch8630_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84990) = _AlbedoTex4;
				SamplerState Sampler238_g84990 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84990 = Input_Coords_046791_g84942;
				half4 Coords238_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition238_g84990 = worldPos;
				half4 localSamplePlanar2D238_g84990 = SamplePlanar2D( Texture238_g84990 , Sampler238_g84990 , Coords238_g84990 , WorldPosition238_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84990) = _AlbedoTex4;
				SamplerState Sampler246_g84990 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition246_g84990 = worldPos;
				half3 WorldNormal246_g84990 = WorldNormal;
				half4 localSamplePlanar3D246_g84990 = SamplePlanar3D( Texture246_g84990 , Sampler246_g84990 , Coords246_g84990 , WorldPosition246_g84990 , WorldNormal246_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84990) = _AlbedoTex4;
				SamplerState Sampler234_g84990 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84990 = temp_output_37_0_g84990;
				float3 WorldPosition234_g84990 = worldPos;
				float4 localSampleStochastic2D234_g84990 = SampleStochastic2D( Texture234_g84990 , Sampler234_g84990 , Coords234_g84990 , WorldPosition234_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84990) = _AlbedoTex4;
				SamplerState Sampler263_g84990 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition263_g84990 = worldPos;
				half3 WorldNormal263_g84990 = WorldNormal;
				half4 localSampleStochastic3D263_g84990 = SampleStochastic3D( Texture263_g84990 , Sampler263_g84990 , Coords263_g84990 , WorldPosition263_g84990 , WorldNormal263_g84990 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8631_g84942 = localSamplePlanar2D238_g84990;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8631_g84942 = localSamplePlanar3D246_g84990;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8631_g84942 = localSampleStochastic2D234_g84990;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8631_g84942 = localSampleStochastic3D263_g84990;
				#else
				float4 staticSwitch8631_g84942 = localSamplePlanar2D238_g84990;
				#endif
				half4 Layer439_g84951 = staticSwitch8631_g84942;
				float4 weightedBlendVar31_g84951 = Weights52_g84951;
				float4 weightedBlend31_g84951 = ( weightedBlendVar31_g84951.x*Layer133_g84951 + weightedBlendVar31_g84951.y*Layer237_g84951 + weightedBlendVar31_g84951.z*Layer338_g84951 + weightedBlendVar31_g84951.w*Layer439_g84951 );
				half4 Terrain_Albedo_047200_g84942 = weightedBlend31_g84951;
				half4 Layer_045_g84954 = Terrain_Albedo_047200_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8793_g84942 = weights_087362_g84942;
				#else
				float4 staticSwitch8793_g84942 = control_087362_g84942;
				#endif
				half4 Terrain_Weights_087340_g84942 = staticSwitch8793_g84942;
				half4 Weights52_g84958 = Terrain_Weights_087340_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84999) = _AlbedoTex5;
				SamplerState Sampler238_g84999 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84999 = Input_Coords_058750_g84942;
				half4 Coords238_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition238_g84999 = worldPos;
				half4 localSamplePlanar2D238_g84999 = SamplePlanar2D( Texture238_g84999 , Sampler238_g84999 , Coords238_g84999 , WorldPosition238_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84999) = _AlbedoTex5;
				SamplerState Sampler246_g84999 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition246_g84999 = worldPos;
				half3 WorldNormal246_g84999 = WorldNormal;
				half4 localSamplePlanar3D246_g84999 = SamplePlanar3D( Texture246_g84999 , Sampler246_g84999 , Coords246_g84999 , WorldPosition246_g84999 , WorldNormal246_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84999) = _AlbedoTex5;
				SamplerState Sampler234_g84999 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84999 = temp_output_37_0_g84999;
				float3 WorldPosition234_g84999 = worldPos;
				float4 localSampleStochastic2D234_g84999 = SampleStochastic2D( Texture234_g84999 , Sampler234_g84999 , Coords234_g84999 , WorldPosition234_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84999) = _AlbedoTex5;
				SamplerState Sampler263_g84999 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition263_g84999 = worldPos;
				half3 WorldNormal263_g84999 = WorldNormal;
				half4 localSampleStochastic3D263_g84999 = SampleStochastic3D( Texture263_g84999 , Sampler263_g84999 , Coords263_g84999 , WorldPosition263_g84999 , WorldNormal263_g84999 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8690_g84942 = localSamplePlanar2D238_g84999;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8690_g84942 = localSamplePlanar3D246_g84999;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8690_g84942 = localSampleStochastic2D234_g84999;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8690_g84942 = localSampleStochastic3D263_g84999;
				#else
				float4 staticSwitch8690_g84942 = localSamplePlanar2D238_g84999;
				#endif
				half4 Layer133_g84958 = staticSwitch8690_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85000) = _AlbedoTex6;
				SamplerState Sampler238_g85000 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85000 = Input_Coords_068751_g84942;
				half4 Coords238_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition238_g85000 = worldPos;
				half4 localSamplePlanar2D238_g85000 = SamplePlanar2D( Texture238_g85000 , Sampler238_g85000 , Coords238_g85000 , WorldPosition238_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85000) = _AlbedoTex6;
				SamplerState Sampler246_g85000 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition246_g85000 = worldPos;
				half3 WorldNormal246_g85000 = WorldNormal;
				half4 localSamplePlanar3D246_g85000 = SamplePlanar3D( Texture246_g85000 , Sampler246_g85000 , Coords246_g85000 , WorldPosition246_g85000 , WorldNormal246_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85000) = _AlbedoTex6;
				SamplerState Sampler234_g85000 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85000 = temp_output_37_0_g85000;
				float3 WorldPosition234_g85000 = worldPos;
				float4 localSampleStochastic2D234_g85000 = SampleStochastic2D( Texture234_g85000 , Sampler234_g85000 , Coords234_g85000 , WorldPosition234_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85000) = _AlbedoTex6;
				SamplerState Sampler263_g85000 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition263_g85000 = worldPos;
				half3 WorldNormal263_g85000 = WorldNormal;
				half4 localSampleStochastic3D263_g85000 = SampleStochastic3D( Texture263_g85000 , Sampler263_g85000 , Coords263_g85000 , WorldPosition263_g85000 , WorldNormal263_g85000 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8691_g84942 = localSamplePlanar2D238_g85000;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8691_g84942 = localSamplePlanar3D246_g85000;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8691_g84942 = localSampleStochastic2D234_g85000;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8691_g84942 = localSampleStochastic3D263_g85000;
				#else
				float4 staticSwitch8691_g84942 = localSamplePlanar2D238_g85000;
				#endif
				half4 Layer237_g84958 = staticSwitch8691_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85001) = _AlbedoTex7;
				SamplerState Sampler238_g85001 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85001 = Input_Coords_078752_g84942;
				half4 Coords238_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition238_g85001 = worldPos;
				half4 localSamplePlanar2D238_g85001 = SamplePlanar2D( Texture238_g85001 , Sampler238_g85001 , Coords238_g85001 , WorldPosition238_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85001) = _AlbedoTex7;
				SamplerState Sampler246_g85001 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition246_g85001 = worldPos;
				half3 WorldNormal246_g85001 = WorldNormal;
				half4 localSamplePlanar3D246_g85001 = SamplePlanar3D( Texture246_g85001 , Sampler246_g85001 , Coords246_g85001 , WorldPosition246_g85001 , WorldNormal246_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85001) = _AlbedoTex7;
				SamplerState Sampler234_g85001 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85001 = temp_output_37_0_g85001;
				float3 WorldPosition234_g85001 = worldPos;
				float4 localSampleStochastic2D234_g85001 = SampleStochastic2D( Texture234_g85001 , Sampler234_g85001 , Coords234_g85001 , WorldPosition234_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85001) = _AlbedoTex7;
				SamplerState Sampler263_g85001 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition263_g85001 = worldPos;
				half3 WorldNormal263_g85001 = WorldNormal;
				half4 localSampleStochastic3D263_g85001 = SampleStochastic3D( Texture263_g85001 , Sampler263_g85001 , Coords263_g85001 , WorldPosition263_g85001 , WorldNormal263_g85001 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8692_g84942 = localSamplePlanar2D238_g85001;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8692_g84942 = localSamplePlanar3D246_g85001;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8692_g84942 = localSampleStochastic2D234_g85001;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8692_g84942 = localSampleStochastic3D263_g85001;
				#else
				float4 staticSwitch8692_g84942 = localSamplePlanar2D238_g85001;
				#endif
				half4 Layer338_g84958 = staticSwitch8692_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85002) = _AlbedoTex8;
				SamplerState Sampler238_g85002 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85002 = Input_Coords_088749_g84942;
				half4 Coords238_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition238_g85002 = worldPos;
				half4 localSamplePlanar2D238_g85002 = SamplePlanar2D( Texture238_g85002 , Sampler238_g85002 , Coords238_g85002 , WorldPosition238_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85002) = _AlbedoTex8;
				SamplerState Sampler246_g85002 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition246_g85002 = worldPos;
				half3 WorldNormal246_g85002 = WorldNormal;
				half4 localSamplePlanar3D246_g85002 = SamplePlanar3D( Texture246_g85002 , Sampler246_g85002 , Coords246_g85002 , WorldPosition246_g85002 , WorldNormal246_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85002) = _AlbedoTex8;
				SamplerState Sampler234_g85002 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85002 = temp_output_37_0_g85002;
				float3 WorldPosition234_g85002 = worldPos;
				float4 localSampleStochastic2D234_g85002 = SampleStochastic2D( Texture234_g85002 , Sampler234_g85002 , Coords234_g85002 , WorldPosition234_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85002) = _AlbedoTex8;
				SamplerState Sampler263_g85002 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition263_g85002 = worldPos;
				half3 WorldNormal263_g85002 = WorldNormal;
				half4 localSampleStochastic3D263_g85002 = SampleStochastic3D( Texture263_g85002 , Sampler263_g85002 , Coords263_g85002 , WorldPosition263_g85002 , WorldNormal263_g85002 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8693_g84942 = localSamplePlanar2D238_g85002;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8693_g84942 = localSamplePlanar3D246_g85002;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8693_g84942 = localSampleStochastic2D234_g85002;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8693_g84942 = localSampleStochastic3D263_g85002;
				#else
				float4 staticSwitch8693_g84942 = localSamplePlanar2D238_g85002;
				#endif
				half4 Layer439_g84958 = staticSwitch8693_g84942;
				float4 weightedBlendVar31_g84958 = Weights52_g84958;
				float4 weightedBlend31_g84958 = ( weightedBlendVar31_g84958.x*Layer133_g84958 + weightedBlendVar31_g84958.y*Layer237_g84958 + weightedBlendVar31_g84958.z*Layer338_g84958 + weightedBlendVar31_g84958.w*Layer439_g84958 );
				half4 Terrain_Albedo_088665_g84942 = weightedBlend31_g84958;
				half4 Layer_0810_g84954 = Terrain_Albedo_088665_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8794_g84942 = weights_127362_g84942;
				#else
				float4 staticSwitch8794_g84942 = control_127362_g84942;
				#endif
				half4 Terrain_Weights_127710_g84942 = staticSwitch8794_g84942;
				half4 Weights52_g84968 = Terrain_Weights_127710_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85011) = _AlbedoTex9;
				SamplerState Sampler238_g85011 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85011 = Input_Coords_098833_g84942;
				half4 Coords238_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition238_g85011 = worldPos;
				half4 localSamplePlanar2D238_g85011 = SamplePlanar2D( Texture238_g85011 , Sampler238_g85011 , Coords238_g85011 , WorldPosition238_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85011) = _AlbedoTex9;
				SamplerState Sampler246_g85011 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition246_g85011 = worldPos;
				half3 WorldNormal246_g85011 = WorldNormal;
				half4 localSamplePlanar3D246_g85011 = SamplePlanar3D( Texture246_g85011 , Sampler246_g85011 , Coords246_g85011 , WorldPosition246_g85011 , WorldNormal246_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85011) = _AlbedoTex9;
				SamplerState Sampler234_g85011 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85011 = temp_output_37_0_g85011;
				float3 WorldPosition234_g85011 = worldPos;
				float4 localSampleStochastic2D234_g85011 = SampleStochastic2D( Texture234_g85011 , Sampler234_g85011 , Coords234_g85011 , WorldPosition234_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85011) = _AlbedoTex9;
				SamplerState Sampler263_g85011 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition263_g85011 = worldPos;
				half3 WorldNormal263_g85011 = WorldNormal;
				half4 localSampleStochastic3D263_g85011 = SampleStochastic3D( Texture263_g85011 , Sampler263_g85011 , Coords263_g85011 , WorldPosition263_g85011 , WorldNormal263_g85011 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8872_g84942 = localSamplePlanar2D238_g85011;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8872_g84942 = localSamplePlanar3D246_g85011;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8872_g84942 = localSampleStochastic2D234_g85011;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8872_g84942 = localSampleStochastic3D263_g85011;
				#else
				float4 staticSwitch8872_g84942 = localSamplePlanar2D238_g85011;
				#endif
				half4 Layer133_g84968 = staticSwitch8872_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85012) = _AlbedoTex10;
				SamplerState Sampler238_g85012 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85012 = Input_Coords_108834_g84942;
				half4 Coords238_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition238_g85012 = worldPos;
				half4 localSamplePlanar2D238_g85012 = SamplePlanar2D( Texture238_g85012 , Sampler238_g85012 , Coords238_g85012 , WorldPosition238_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85012) = _AlbedoTex10;
				SamplerState Sampler246_g85012 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition246_g85012 = worldPos;
				half3 WorldNormal246_g85012 = WorldNormal;
				half4 localSamplePlanar3D246_g85012 = SamplePlanar3D( Texture246_g85012 , Sampler246_g85012 , Coords246_g85012 , WorldPosition246_g85012 , WorldNormal246_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85012) = _AlbedoTex10;
				SamplerState Sampler234_g85012 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85012 = temp_output_37_0_g85012;
				float3 WorldPosition234_g85012 = worldPos;
				float4 localSampleStochastic2D234_g85012 = SampleStochastic2D( Texture234_g85012 , Sampler234_g85012 , Coords234_g85012 , WorldPosition234_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85012) = _AlbedoTex10;
				SamplerState Sampler263_g85012 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition263_g85012 = worldPos;
				half3 WorldNormal263_g85012 = WorldNormal;
				half4 localSampleStochastic3D263_g85012 = SampleStochastic3D( Texture263_g85012 , Sampler263_g85012 , Coords263_g85012 , WorldPosition263_g85012 , WorldNormal263_g85012 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8873_g84942 = localSamplePlanar2D238_g85012;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8873_g84942 = localSamplePlanar3D246_g85012;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8873_g84942 = localSampleStochastic2D234_g85012;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8873_g84942 = localSampleStochastic3D263_g85012;
				#else
				float4 staticSwitch8873_g84942 = localSamplePlanar2D238_g85012;
				#endif
				half4 Layer237_g84968 = staticSwitch8873_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85013) = _AlbedoTex11;
				SamplerState Sampler238_g85013 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85013 = Input_Coords_118835_g84942;
				half4 Coords238_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition238_g85013 = worldPos;
				half4 localSamplePlanar2D238_g85013 = SamplePlanar2D( Texture238_g85013 , Sampler238_g85013 , Coords238_g85013 , WorldPosition238_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85013) = _AlbedoTex11;
				SamplerState Sampler246_g85013 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition246_g85013 = worldPos;
				half3 WorldNormal246_g85013 = WorldNormal;
				half4 localSamplePlanar3D246_g85013 = SamplePlanar3D( Texture246_g85013 , Sampler246_g85013 , Coords246_g85013 , WorldPosition246_g85013 , WorldNormal246_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85013) = _AlbedoTex11;
				SamplerState Sampler234_g85013 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85013 = temp_output_37_0_g85013;
				float3 WorldPosition234_g85013 = worldPos;
				float4 localSampleStochastic2D234_g85013 = SampleStochastic2D( Texture234_g85013 , Sampler234_g85013 , Coords234_g85013 , WorldPosition234_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85013) = _AlbedoTex11;
				SamplerState Sampler263_g85013 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition263_g85013 = worldPos;
				half3 WorldNormal263_g85013 = WorldNormal;
				half4 localSampleStochastic3D263_g85013 = SampleStochastic3D( Texture263_g85013 , Sampler263_g85013 , Coords263_g85013 , WorldPosition263_g85013 , WorldNormal263_g85013 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8874_g84942 = localSamplePlanar2D238_g85013;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8874_g84942 = localSamplePlanar3D246_g85013;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8874_g84942 = localSampleStochastic2D234_g85013;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8874_g84942 = localSampleStochastic3D263_g85013;
				#else
				float4 staticSwitch8874_g84942 = localSamplePlanar2D238_g85013;
				#endif
				half4 Layer338_g84968 = staticSwitch8874_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85014) = _AlbedoTex12;
				SamplerState Sampler238_g85014 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85014 = Input_Coords_128836_g84942;
				half4 Coords238_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition238_g85014 = worldPos;
				half4 localSamplePlanar2D238_g85014 = SamplePlanar2D( Texture238_g85014 , Sampler238_g85014 , Coords238_g85014 , WorldPosition238_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85014) = _AlbedoTex12;
				SamplerState Sampler246_g85014 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition246_g85014 = worldPos;
				half3 WorldNormal246_g85014 = WorldNormal;
				half4 localSamplePlanar3D246_g85014 = SamplePlanar3D( Texture246_g85014 , Sampler246_g85014 , Coords246_g85014 , WorldPosition246_g85014 , WorldNormal246_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85014) = _AlbedoTex12;
				SamplerState Sampler234_g85014 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85014 = temp_output_37_0_g85014;
				float3 WorldPosition234_g85014 = worldPos;
				float4 localSampleStochastic2D234_g85014 = SampleStochastic2D( Texture234_g85014 , Sampler234_g85014 , Coords234_g85014 , WorldPosition234_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85014) = _AlbedoTex12;
				SamplerState Sampler263_g85014 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition263_g85014 = worldPos;
				half3 WorldNormal263_g85014 = WorldNormal;
				half4 localSampleStochastic3D263_g85014 = SampleStochastic3D( Texture263_g85014 , Sampler263_g85014 , Coords263_g85014 , WorldPosition263_g85014 , WorldNormal263_g85014 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8875_g84942 = localSamplePlanar2D238_g85014;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8875_g84942 = localSamplePlanar3D246_g85014;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8875_g84942 = localSampleStochastic2D234_g85014;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8875_g84942 = localSampleStochastic3D263_g85014;
				#else
				float4 staticSwitch8875_g84942 = localSamplePlanar2D238_g85014;
				#endif
				half4 Layer439_g84968 = staticSwitch8875_g84942;
				float4 weightedBlendVar31_g84968 = Weights52_g84968;
				float4 weightedBlend31_g84968 = ( weightedBlendVar31_g84968.x*Layer133_g84968 + weightedBlendVar31_g84968.y*Layer237_g84968 + weightedBlendVar31_g84968.z*Layer338_g84968 + weightedBlendVar31_g84968.w*Layer439_g84968 );
				half4 Terrain_Albedo_128851_g84942 = weightedBlend31_g84968;
				half4 Layer_1243_g84954 = Terrain_Albedo_128851_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8795_g84942 = weights_167362_g84942;
				#else
				float4 staticSwitch8795_g84942 = control_167362_g84942;
				#endif
				half4 Terrain_Weights_167709_g84942 = staticSwitch8795_g84942;
				half4 Weights52_g84978 = Terrain_Weights_167709_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85023) = _AlbedoTex13;
				SamplerState Sampler238_g85023 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85023 = Input_Coords_138960_g84942;
				half4 Coords238_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition238_g85023 = worldPos;
				half4 localSamplePlanar2D238_g85023 = SamplePlanar2D( Texture238_g85023 , Sampler238_g85023 , Coords238_g85023 , WorldPosition238_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85023) = _AlbedoTex13;
				SamplerState Sampler246_g85023 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition246_g85023 = worldPos;
				half3 WorldNormal246_g85023 = WorldNormal;
				half4 localSamplePlanar3D246_g85023 = SamplePlanar3D( Texture246_g85023 , Sampler246_g85023 , Coords246_g85023 , WorldPosition246_g85023 , WorldNormal246_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85023) = _AlbedoTex13;
				SamplerState Sampler234_g85023 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85023 = temp_output_37_0_g85023;
				float3 WorldPosition234_g85023 = worldPos;
				float4 localSampleStochastic2D234_g85023 = SampleStochastic2D( Texture234_g85023 , Sampler234_g85023 , Coords234_g85023 , WorldPosition234_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85023) = _AlbedoTex13;
				SamplerState Sampler263_g85023 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition263_g85023 = worldPos;
				half3 WorldNormal263_g85023 = WorldNormal;
				half4 localSampleStochastic3D263_g85023 = SampleStochastic3D( Texture263_g85023 , Sampler263_g85023 , Coords263_g85023 , WorldPosition263_g85023 , WorldNormal263_g85023 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch8972_g84942 = localSamplePlanar2D238_g85023;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch8972_g84942 = localSamplePlanar3D246_g85023;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch8972_g84942 = localSampleStochastic2D234_g85023;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch8972_g84942 = localSampleStochastic3D263_g85023;
				#else
				float4 staticSwitch8972_g84942 = localSamplePlanar2D238_g85023;
				#endif
				half4 Layer133_g84978 = staticSwitch8972_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85024) = _AlbedoTex14;
				SamplerState Sampler238_g85024 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85024 = Input_Coords_148961_g84942;
				half4 Coords238_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition238_g85024 = worldPos;
				half4 localSamplePlanar2D238_g85024 = SamplePlanar2D( Texture238_g85024 , Sampler238_g85024 , Coords238_g85024 , WorldPosition238_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85024) = _AlbedoTex14;
				SamplerState Sampler246_g85024 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition246_g85024 = worldPos;
				half3 WorldNormal246_g85024 = WorldNormal;
				half4 localSamplePlanar3D246_g85024 = SamplePlanar3D( Texture246_g85024 , Sampler246_g85024 , Coords246_g85024 , WorldPosition246_g85024 , WorldNormal246_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85024) = _AlbedoTex14;
				SamplerState Sampler234_g85024 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85024 = temp_output_37_0_g85024;
				float3 WorldPosition234_g85024 = worldPos;
				float4 localSampleStochastic2D234_g85024 = SampleStochastic2D( Texture234_g85024 , Sampler234_g85024 , Coords234_g85024 , WorldPosition234_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85024) = _AlbedoTex14;
				SamplerState Sampler263_g85024 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition263_g85024 = worldPos;
				half3 WorldNormal263_g85024 = WorldNormal;
				half4 localSampleStochastic3D263_g85024 = SampleStochastic3D( Texture263_g85024 , Sampler263_g85024 , Coords263_g85024 , WorldPosition263_g85024 , WorldNormal263_g85024 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch8973_g84942 = localSamplePlanar2D238_g85024;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch8973_g84942 = localSamplePlanar3D246_g85024;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch8973_g84942 = localSampleStochastic2D234_g85024;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch8973_g84942 = localSampleStochastic3D263_g85024;
				#else
				float4 staticSwitch8973_g84942 = localSamplePlanar2D238_g85024;
				#endif
				half4 Layer237_g84978 = staticSwitch8973_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85025) = _AlbedoTex15;
				SamplerState Sampler238_g85025 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85025 = Input_Coords_158962_g84942;
				half4 Coords238_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition238_g85025 = worldPos;
				half4 localSamplePlanar2D238_g85025 = SamplePlanar2D( Texture238_g85025 , Sampler238_g85025 , Coords238_g85025 , WorldPosition238_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85025) = _AlbedoTex15;
				SamplerState Sampler246_g85025 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition246_g85025 = worldPos;
				half3 WorldNormal246_g85025 = WorldNormal;
				half4 localSamplePlanar3D246_g85025 = SamplePlanar3D( Texture246_g85025 , Sampler246_g85025 , Coords246_g85025 , WorldPosition246_g85025 , WorldNormal246_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85025) = _AlbedoTex15;
				SamplerState Sampler234_g85025 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85025 = temp_output_37_0_g85025;
				float3 WorldPosition234_g85025 = worldPos;
				float4 localSampleStochastic2D234_g85025 = SampleStochastic2D( Texture234_g85025 , Sampler234_g85025 , Coords234_g85025 , WorldPosition234_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85025) = _AlbedoTex15;
				SamplerState Sampler263_g85025 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition263_g85025 = worldPos;
				half3 WorldNormal263_g85025 = WorldNormal;
				half4 localSampleStochastic3D263_g85025 = SampleStochastic3D( Texture263_g85025 , Sampler263_g85025 , Coords263_g85025 , WorldPosition263_g85025 , WorldNormal263_g85025 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch8974_g84942 = localSamplePlanar2D238_g85025;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch8974_g84942 = localSamplePlanar3D246_g85025;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch8974_g84942 = localSampleStochastic2D234_g85025;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch8974_g84942 = localSampleStochastic3D263_g85025;
				#else
				float4 staticSwitch8974_g84942 = localSamplePlanar2D238_g85025;
				#endif
				half4 Layer338_g84978 = staticSwitch8974_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85026) = _AlbedoTex16;
				SamplerState Sampler238_g85026 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85026 = Input_Coords_168959_g84942;
				half4 Coords238_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition238_g85026 = worldPos;
				half4 localSamplePlanar2D238_g85026 = SamplePlanar2D( Texture238_g85026 , Sampler238_g85026 , Coords238_g85026 , WorldPosition238_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85026) = _AlbedoTex16;
				SamplerState Sampler246_g85026 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition246_g85026 = worldPos;
				half3 WorldNormal246_g85026 = WorldNormal;
				half4 localSamplePlanar3D246_g85026 = SamplePlanar3D( Texture246_g85026 , Sampler246_g85026 , Coords246_g85026 , WorldPosition246_g85026 , WorldNormal246_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85026) = _AlbedoTex16;
				SamplerState Sampler234_g85026 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85026 = temp_output_37_0_g85026;
				float3 WorldPosition234_g85026 = worldPos;
				float4 localSampleStochastic2D234_g85026 = SampleStochastic2D( Texture234_g85026 , Sampler234_g85026 , Coords234_g85026 , WorldPosition234_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85026) = _AlbedoTex16;
				SamplerState Sampler263_g85026 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition263_g85026 = worldPos;
				half3 WorldNormal263_g85026 = WorldNormal;
				half4 localSampleStochastic3D263_g85026 = SampleStochastic3D( Texture263_g85026 , Sampler263_g85026 , Coords263_g85026 , WorldPosition263_g85026 , WorldNormal263_g85026 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch8975_g84942 = localSamplePlanar2D238_g85026;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch8975_g84942 = localSamplePlanar3D246_g85026;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch8975_g84942 = localSampleStochastic2D234_g85026;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch8975_g84942 = localSampleStochastic3D263_g85026;
				#else
				float4 staticSwitch8975_g84942 = localSamplePlanar2D238_g85026;
				#endif
				half4 Layer439_g84978 = staticSwitch8975_g84942;
				float4 weightedBlendVar31_g84978 = Weights52_g84978;
				float4 weightedBlend31_g84978 = ( weightedBlendVar31_g84978.x*Layer133_g84978 + weightedBlendVar31_g84978.y*Layer237_g84978 + weightedBlendVar31_g84978.z*Layer338_g84978 + weightedBlendVar31_g84978.w*Layer439_g84978 );
				half4 Terrain_Albedo_168986_g84942 = weightedBlend31_g84978;
				half4 Layer_1644_g84954 = Terrain_Albedo_168986_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84954 = Layer_045_g84954;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 + Layer_1243_g84954 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 + Layer_1243_g84954 + Layer_1644_g84954 );
				#else
				float4 staticSwitch40_g84954 = Layer_045_g84954;
				#endif
				half4 Blend_Albedo7468_g84942 = staticSwitch40_g84954;
				half3 Terrain_Albedo8037_g84806 = ( (Blend_Albedo7468_g84942).xyz * (_TerrainColor).rgb );
				float vertexToFrag11_g84941 = IN.ase_texcoord10.z;
				half Terrain_Mask_Pixel7898_g84806 = vertexToFrag11_g84941;
				half2 Main_Normal137_g84806 = temp_output_6555_0_g84806;
				float2 lerpResult3372_g84806 = lerp( float2( 0,0 ) , Main_Normal137_g84806 , _DetailNormalValue);
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half4 Normal_Packed45_g84894 = SAMPLE_TEXTURE2D( _SecondNormalTex, sampler_Linear_Repeat, Second_UVs17_g84806 );
				float2 appendResult58_g84894 = (float2(( (Normal_Packed45_g84894).x * (Normal_Packed45_g84894).w ) , (Normal_Packed45_g84894).y));
				half2 Normal_Default50_g84894 = appendResult58_g84894;
				half2 Normal_ASTC41_g84894 = (Normal_Packed45_g84894).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g84894 = Normal_ASTC41_g84894;
				#else
				float2 staticSwitch38_g84894 = Normal_Default50_g84894;
				#endif
				half2 Normal_NO_DTX544_g84894 = (Normal_Packed45_g84894).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g84894 = Normal_NO_DTX544_g84894;
				#else
				float2 staticSwitch37_g84894 = staticSwitch38_g84894;
				#endif
				float2 temp_output_6560_0_g84806 = ( (staticSwitch37_g84894*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g84897 = temp_output_6560_0_g84806;
				float2 break64_g84897 = Normal_Planar45_g84897;
				float3 appendResult65_g84897 = (float3(break64_g84897.x , 0.0 , break64_g84897.y));
				float2 ifLocalVar7655_g84806 = 0;
				if( _SecondUVsMode == 2.0 )
				ifLocalVar7655_g84806 = (mul( ase_worldToTangent, appendResult65_g84897 )).xy;
				else if( _SecondUVsMode < 2.0 )
				ifLocalVar7655_g84806 = temp_output_6560_0_g84806;
				half2 Second_Normal179_g84806 = ifLocalVar7655_g84806;
				float2 temp_output_36_0_g84906 = ( lerpResult3372_g84806 + Second_Normal179_g84806 );
				float2 lerpResult3376_g84806 = lerp( Main_Normal137_g84806 , temp_output_36_0_g84906 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float2 staticSwitch267_g84806 = lerpResult3376_g84806;
				#else
				float2 staticSwitch267_g84806 = Main_Normal137_g84806;
				#endif
				half2 Blend_Normal_Detail312_g84806 = staticSwitch267_g84806;
				float3 appendResult7888_g84806 = (float3(Blend_Normal_Detail312_g84806 , 1.0));
				float3 tanNormal7889_g84806 = appendResult7888_g84806;
				float3 worldNormal7889_g84806 = float3(dot(tanToWorld0,tanNormal7889_g84806), dot(tanToWorld1,tanNormal7889_g84806), dot(tanToWorld2,tanNormal7889_g84806));
				half3 Blend_NormalWS_Detail7890_g84806 = worldNormal7889_g84806;
				float temp_output_7901_0_g84806 = saturate( (Blend_NormalWS_Detail7890_g84806).y );
				float temp_output_7895_0_g84806 = ( temp_output_7901_0_g84806 * temp_output_7901_0_g84806 * temp_output_7901_0_g84806 * temp_output_7901_0_g84806 );
				half Terrain_Mask_Projection7875_g84806 = ( temp_output_7895_0_g84806 * _TerrainMode );
				float temp_output_7_0_g84940 = _TerrainBlendMinValue;
				float temp_output_10_0_g84940 = ( _TerrainBlendMaxValue - temp_output_7_0_g84940 );
				half Terrain_Mask7747_g84806 = saturate( ( ( saturate( ( Terrain_Mask_Pixel7898_g84806 + ( Terrain_Mask_Pixel7898_g84806 * Terrain_Mask_Projection7875_g84806 ) ) ) - temp_output_7_0_g84940 ) / ( temp_output_10_0_g84940 + 0.0001 ) ) );
				float3 lerpResult7748_g84806 = lerp( Blend_Albedo_Tinted2808_g84806 , Terrain_Albedo8037_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7792_g84806 = lerpResult7748_g84806;
				#else
				float3 staticSwitch7792_g84806 = Blend_Albedo_Tinted2808_g84806;
				#endif
				half3 Blend_Albedo_Terrain7752_g84806 = staticSwitch7792_g84806;
				float3 temp_output_3_0_g84933 = Blend_Albedo_Terrain7752_g84806;
				float dotResult20_g84933 = dot( temp_output_3_0_g84933 , float3(0.2126,0.7152,0.0722) );
				half Blend_Albedo_Grayscale5939_g84806 = dotResult20_g84933;
				float3 temp_cast_10 = (Blend_Albedo_Grayscale5939_g84806).xxx;
				float temp_output_82_0_g84825 = _LayerColorsValue;
				float temp_output_19_0_g84829 = TVE_ColorsUsage[(int)temp_output_82_0_g84825];
				float4 temp_output_91_19_g84825 = TVE_ColorsCoords;
				float3 vertexToFrag3890_g84806 = IN.ase_texcoord11.xyz;
				float3 WorldPosition3905_g84806 = vertexToFrag3890_g84806;
				float3 vertexToFrag4224_g84806 = IN.ase_texcoord12.xyz;
				float3 ObjectPosition4223_g84806 = vertexToFrag4224_g84806;
				float3 lerpResult4822_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _ColorsPositionMode);
				half2 UV94_g84825 = ( (temp_output_91_19_g84825).zw + ( (temp_output_91_19_g84825).xy * (lerpResult4822_g84806).xz ) );
				float4 tex2DArrayNode83_g84825 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_ColorsTex, sampler_Linear_Clamp, float3(UV94_g84825,temp_output_82_0_g84825), 0.0 );
				float4 temp_output_17_0_g84829 = tex2DArrayNode83_g84825;
				float4 temp_output_92_86_g84825 = TVE_ColorsParams;
				float4 temp_output_3_0_g84829 = temp_output_92_86_g84825;
				float4 ifLocalVar18_g84829 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84829 >= 0.5 )
				ifLocalVar18_g84829 = temp_output_17_0_g84829;
				else
				ifLocalVar18_g84829 = temp_output_3_0_g84829;
				float4 lerpResult22_g84829 = lerp( temp_output_3_0_g84829 , temp_output_17_0_g84829 , temp_output_19_0_g84829);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84829 = lerpResult22_g84829;
				#else
				float4 staticSwitch24_g84829 = ifLocalVar18_g84829;
				#endif
				half4 Global_Colors_Params5434_g84806 = staticSwitch24_g84829;
				float4 temp_output_346_0_g84813 = Global_Colors_Params5434_g84806;
				half Global_Colors_A1701_g84806 = saturate( (temp_output_346_0_g84813).w );
				half Colors_Influence3668_g84806 = Global_Colors_A1701_g84806;
				float temp_output_6306_0_g84806 = ( 1.0 - Colors_Influence3668_g84806 );
				float3 lerpResult3618_g84806 = lerp( Blend_Albedo_Terrain7752_g84806 , temp_cast_10 , ( 1.0 - ( temp_output_6306_0_g84806 * temp_output_6306_0_g84806 ) ));
				half3 Global_Colors_RGB1700_g84806 = (temp_output_346_0_g84813).xyz;
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g84922 = 2.0;
				#else
				float staticSwitch1_g84922 = 4.594794;
				#endif
				half3 Colors_RGB1954_g84806 = ( Global_Colors_RGB1700_g84806 * staticSwitch1_g84922 * _ColorsIntensityValue );
				half4 Weights52_g84950 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84950 = _Specular1;
				half4 Layer237_g84950 = _Specular2;
				half4 Layer338_g84950 = _Specular3;
				half4 Layer439_g84950 = _Specular4;
				float4 weightedBlendVar31_g84950 = Weights52_g84950;
				float4 weightedBlend31_g84950 = ( weightedBlendVar31_g84950.x*Layer133_g84950 + weightedBlendVar31_g84950.y*Layer237_g84950 + weightedBlendVar31_g84950.z*Layer338_g84950 + weightedBlendVar31_g84950.w*Layer439_g84950 );
				half4 Terrain_Specular_047390_g84942 = weightedBlend31_g84950;
				half4 Layer_045_g84957 = Terrain_Specular_047390_g84942;
				half4 Weights52_g84967 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84967 = _Specular5;
				half4 Layer237_g84967 = _Specular6;
				half4 Layer338_g84967 = _Specular7;
				half4 Layer439_g84967 = _Specular8;
				float4 weightedBlendVar31_g84967 = Weights52_g84967;
				float4 weightedBlend31_g84967 = ( weightedBlendVar31_g84967.x*Layer133_g84967 + weightedBlendVar31_g84967.y*Layer237_g84967 + weightedBlendVar31_g84967.z*Layer338_g84967 + weightedBlendVar31_g84967.w*Layer439_g84967 );
				half4 Terrain_Specular_088745_g84942 = weightedBlend31_g84967;
				half4 Layer_0810_g84957 = Terrain_Specular_088745_g84942;
				half4 Weights52_g84977 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84977 = _Specular9;
				half4 Layer237_g84977 = _Specular10;
				half4 Layer338_g84977 = _Specular11;
				half4 Layer439_g84977 = _Specular12;
				float4 weightedBlendVar31_g84977 = Weights52_g84977;
				float4 weightedBlend31_g84977 = ( weightedBlendVar31_g84977.x*Layer133_g84977 + weightedBlendVar31_g84977.y*Layer237_g84977 + weightedBlendVar31_g84977.z*Layer338_g84977 + weightedBlendVar31_g84977.w*Layer439_g84977 );
				half4 Terrain_Specular_128869_g84942 = weightedBlend31_g84977;
				half4 Layer_1243_g84957 = Terrain_Specular_128869_g84942;
				half4 Weights52_g84987 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84987 = _Specular13;
				half4 Layer237_g84987 = _Specular14;
				half4 Layer338_g84987 = _Specular15;
				half4 Layer439_g84987 = _Specular16;
				float4 weightedBlendVar31_g84987 = Weights52_g84987;
				float4 weightedBlend31_g84987 = ( weightedBlendVar31_g84987.x*Layer133_g84987 + weightedBlendVar31_g84987.y*Layer237_g84987 + weightedBlendVar31_g84987.z*Layer338_g84987 + weightedBlendVar31_g84987.w*Layer439_g84987 );
				half4 Terrain_Specular_169019_g84942 = weightedBlend31_g84987;
				half4 Layer_1644_g84957 = Terrain_Specular_169019_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84957 = Layer_045_g84957;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 + Layer_1243_g84957 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 + Layer_1243_g84957 + Layer_1644_g84957 );
				#else
				float4 staticSwitch40_g84957 = Layer_045_g84957;
				#endif
				half4 Blend_Specular7446_g84942 = staticSwitch40_g84957;
				half Terrain_ColorsMask7937_g84806 = ( (Blend_Specular7446_g84942).a * (Blend_Albedo7468_g84942).w );
				float lerpResult7939_g84806 = lerp( Blend_MaskRemap_Detail6621_g84806 , Terrain_ColorsMask7937_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float staticSwitch7922_g84806 = lerpResult7939_g84806;
				#else
				float staticSwitch7922_g84806 = Blend_MaskRemap_Detail6621_g84806;
				#endif
				half Blend_ColorsMask_Terrain7921_g84806 = staticSwitch7922_g84806;
				half Colors_Value3692_g84806 = ( Blend_ColorsMask_Terrain7921_g84806 * _GlobalColors );
				float3 ObjectPosition_Shifted7481_g84806 = ( ObjectPosition4223_g84806 - TVE_WorldOrigin );
				half3 Input_Position167_g84900 = ObjectPosition_Shifted7481_g84806;
				float dotResult156_g84900 = dot( (Input_Position167_g84900).xz , float2( 12.9898,78.233 ) );
				half Vertex_DynamicMode5112_g84806 = _VertexDynamicMode;
				half Input_DynamicMode120_g84900 = Vertex_DynamicMode5112_g84806;
				float Postion_Random162_g84900 = ( sin( dotResult156_g84900 ) * ( 1.0 - Input_DynamicMode120_g84900 ) );
				float Mesh_Variation16_g84806 = IN.ase_color.r;
				half Input_Variation124_g84900 = Mesh_Variation16_g84806;
				half ObjectData20_g84902 = frac( ( Postion_Random162_g84900 + Input_Variation124_g84900 ) );
				half WorldData19_g84902 = Input_Variation124_g84900;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84902 = WorldData19_g84902;
				#else
				float staticSwitch14_g84902 = ObjectData20_g84902;
				#endif
				float temp_output_112_0_g84900 = staticSwitch14_g84902;
				float clampResult171_g84900 = clamp( temp_output_112_0_g84900 , 0.01 , 0.99 );
				float Global_MeshVariation5104_g84806 = clampResult171_g84900;
				float lerpResult3870_g84806 = lerp( 1.0 , Global_MeshVariation5104_g84806 , _ColorsVariationValue);
				half Colors_Variation3650_g84806 = lerpResult3870_g84806;
				half Occlusion_Alpha6463_g84806 = _VertexOcclusionColor.a;
				float lerpResult8028_g84806 = lerp( Occlusion_Mask6432_g84806 , ( 1.0 - Occlusion_Mask6432_g84806 ) , _VertexOcclusionColorsMode);
				float lerpResult8026_g84806 = lerp( Occlusion_Alpha6463_g84806 , 1.0 , lerpResult8028_g84806);
				half Occlusion_Colors6450_g84806 = lerpResult8026_g84806;
				float3 temp_output_3_0_g84934 = ( Blend_Albedo_Terrain7752_g84806 * Tint_Gradient_Color5769_g84806 * Tint_Noise_Color5770_g84806 * Tint_User_Color7335_g84806 );
				float dotResult20_g84934 = dot( temp_output_3_0_g84934 , float3(0.2126,0.7152,0.0722) );
				float clampResult6740_g84806 = clamp( saturate( ( dotResult20_g84934 * 5.0 ) ) , 0.2 , 1.0 );
				half Blend_Albedo_Globals6410_g84806 = clampResult6740_g84806;
				float temp_output_7_0_g84930 = 0.1;
				float temp_output_10_0_g84930 = ( 0.2 - temp_output_7_0_g84930 );
				float lerpResult16_g84923 = lerp( 0.0 , saturate( ( ( ( Colors_Value3692_g84806 * Colors_Influence3668_g84806 * Colors_Variation3650_g84806 * Occlusion_Colors6450_g84806 * Blend_Albedo_Globals6410_g84806 ) - temp_output_7_0_g84930 ) / ( temp_output_10_0_g84930 + 0.0001 ) ) ) , TVE_IsEnabled);
				float3 lerpResult3628_g84806 = lerp( Blend_Albedo_Terrain7752_g84806 , ( lerpResult3618_g84806 * Colors_RGB1954_g84806 ) , lerpResult16_g84923);
				half3 Blend_Albedo_Colored_High6027_g84806 = lerpResult3628_g84806;
				half3 Blend_Albedo_Colored863_g84806 = Blend_Albedo_Colored_High6027_g84806;
				half3 Global_OverlayColor1758_g84806 = (TVE_OverlayColor).rgb;
				float temp_output_84_0_g84820 = _LayerExtrasValue;
				float temp_output_19_0_g84824 = TVE_ExtrasUsage[(int)temp_output_84_0_g84820];
				float4 temp_output_93_19_g84820 = TVE_ExtrasCoords;
				float3 lerpResult4827_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _ExtrasPositionMode);
				half2 UV96_g84820 = ( (temp_output_93_19_g84820).zw + ( (temp_output_93_19_g84820).xy * (lerpResult4827_g84806).xz ) );
				float4 tex2DArrayNode48_g84820 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_ExtrasTex, sampler_Linear_Clamp, float3(UV96_g84820,temp_output_84_0_g84820), 0.0 );
				float4 temp_output_17_0_g84824 = tex2DArrayNode48_g84820;
				float4 temp_output_94_85_g84820 = TVE_ExtrasParams;
				float4 temp_output_3_0_g84824 = temp_output_94_85_g84820;
				float4 ifLocalVar18_g84824 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84824 >= 0.5 )
				ifLocalVar18_g84824 = temp_output_17_0_g84824;
				else
				ifLocalVar18_g84824 = temp_output_3_0_g84824;
				float4 lerpResult22_g84824 = lerp( temp_output_3_0_g84824 , temp_output_17_0_g84824 , temp_output_19_0_g84824);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84824 = lerpResult22_g84824;
				#else
				float4 staticSwitch24_g84824 = ifLocalVar18_g84824;
				#endif
				half4 Global_Extras_Params5440_g84806 = staticSwitch24_g84824;
				float4 break456_g84833 = Global_Extras_Params5440_g84806;
				half Global_Extras_Overlay156_g84806 = break456_g84833.z;
				float lerpResult1065_g84806 = lerp( 1.0 , Global_MeshVariation5104_g84806 , _OverlayVariationValue);
				half Overlay_Variation4560_g84806 = lerpResult1065_g84806;
				half Overlay_Value5738_g84806 = ( _GlobalOverlay * Global_Extras_Overlay156_g84806 * Overlay_Variation4560_g84806 );
				half4 Weights52_g84943 = Terrain_Weights_046781_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84991) = _NormalTex1;
				SamplerState Sampler238_g84991 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84991 = Input_Coords_016785_g84942;
				half4 Coords238_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition238_g84991 = worldPos;
				half4 localSamplePlanar2D238_g84991 = SamplePlanar2D( Texture238_g84991 , Sampler238_g84991 , Coords238_g84991 , WorldPosition238_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84991) = _NormalTex1;
				SamplerState Sampler246_g84991 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition246_g84991 = worldPos;
				half3 WorldNormal246_g84991 = WorldNormal;
				half4 localSamplePlanar3D246_g84991 = SamplePlanar3D( Texture246_g84991 , Sampler246_g84991 , Coords246_g84991 , WorldPosition246_g84991 , WorldNormal246_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84991) = _NormalTex1;
				SamplerState Sampler234_g84991 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84991 = temp_output_37_0_g84991;
				float3 WorldPosition234_g84991 = worldPos;
				float4 localSampleStochastic2D234_g84991 = SampleStochastic2D( Texture234_g84991 , Sampler234_g84991 , Coords234_g84991 , WorldPosition234_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84991) = _NormalTex1;
				SamplerState Sampler263_g84991 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition263_g84991 = worldPos;
				half3 WorldNormal263_g84991 = WorldNormal;
				half4 localSampleStochastic3D263_g84991 = SampleStochastic3D( Texture263_g84991 , Sampler263_g84991 , Coords263_g84991 , WorldPosition263_g84991 , WorldNormal263_g84991 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8635_g84942 = localSamplePlanar2D238_g84991;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8635_g84942 = localSamplePlanar3D246_g84991;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8635_g84942 = localSampleStochastic2D234_g84991;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8635_g84942 = localSampleStochastic3D263_g84991;
				#else
				float4 staticSwitch8635_g84942 = localSamplePlanar2D238_g84991;
				#endif
				half4 Layer133_g84943 = staticSwitch8635_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84992) = _NormalTex2;
				SamplerState Sampler238_g84992 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84992 = Input_Coords_026787_g84942;
				half4 Coords238_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition238_g84992 = worldPos;
				half4 localSamplePlanar2D238_g84992 = SamplePlanar2D( Texture238_g84992 , Sampler238_g84992 , Coords238_g84992 , WorldPosition238_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84992) = _NormalTex2;
				SamplerState Sampler246_g84992 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition246_g84992 = worldPos;
				half3 WorldNormal246_g84992 = WorldNormal;
				half4 localSamplePlanar3D246_g84992 = SamplePlanar3D( Texture246_g84992 , Sampler246_g84992 , Coords246_g84992 , WorldPosition246_g84992 , WorldNormal246_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84992) = _NormalTex2;
				SamplerState Sampler234_g84992 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84992 = temp_output_37_0_g84992;
				float3 WorldPosition234_g84992 = worldPos;
				float4 localSampleStochastic2D234_g84992 = SampleStochastic2D( Texture234_g84992 , Sampler234_g84992 , Coords234_g84992 , WorldPosition234_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84992) = _NormalTex2;
				SamplerState Sampler263_g84992 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition263_g84992 = worldPos;
				half3 WorldNormal263_g84992 = WorldNormal;
				half4 localSampleStochastic3D263_g84992 = SampleStochastic3D( Texture263_g84992 , Sampler263_g84992 , Coords263_g84992 , WorldPosition263_g84992 , WorldNormal263_g84992 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8636_g84942 = localSamplePlanar2D238_g84992;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8636_g84942 = localSamplePlanar3D246_g84992;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8636_g84942 = localSampleStochastic2D234_g84992;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8636_g84942 = localSampleStochastic3D263_g84992;
				#else
				float4 staticSwitch8636_g84942 = localSamplePlanar2D238_g84992;
				#endif
				half4 Layer237_g84943 = staticSwitch8636_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84993) = _NormalTex3;
				SamplerState Sampler238_g84993 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84993 = Input_Coords_036789_g84942;
				half4 Coords238_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition238_g84993 = worldPos;
				half4 localSamplePlanar2D238_g84993 = SamplePlanar2D( Texture238_g84993 , Sampler238_g84993 , Coords238_g84993 , WorldPosition238_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84993) = _NormalTex3;
				SamplerState Sampler246_g84993 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition246_g84993 = worldPos;
				half3 WorldNormal246_g84993 = WorldNormal;
				half4 localSamplePlanar3D246_g84993 = SamplePlanar3D( Texture246_g84993 , Sampler246_g84993 , Coords246_g84993 , WorldPosition246_g84993 , WorldNormal246_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84993) = _NormalTex3;
				SamplerState Sampler234_g84993 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84993 = temp_output_37_0_g84993;
				float3 WorldPosition234_g84993 = worldPos;
				float4 localSampleStochastic2D234_g84993 = SampleStochastic2D( Texture234_g84993 , Sampler234_g84993 , Coords234_g84993 , WorldPosition234_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84993) = _NormalTex3;
				SamplerState Sampler263_g84993 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition263_g84993 = worldPos;
				half3 WorldNormal263_g84993 = WorldNormal;
				half4 localSampleStochastic3D263_g84993 = SampleStochastic3D( Texture263_g84993 , Sampler263_g84993 , Coords263_g84993 , WorldPosition263_g84993 , WorldNormal263_g84993 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8637_g84942 = localSamplePlanar2D238_g84993;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8637_g84942 = localSamplePlanar3D246_g84993;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8637_g84942 = localSampleStochastic2D234_g84993;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8637_g84942 = localSampleStochastic3D263_g84993;
				#else
				float4 staticSwitch8637_g84942 = localSamplePlanar2D238_g84993;
				#endif
				half4 Layer338_g84943 = staticSwitch8637_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84994) = _NormalTex4;
				SamplerState Sampler238_g84994 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84994 = Input_Coords_046791_g84942;
				half4 Coords238_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition238_g84994 = worldPos;
				half4 localSamplePlanar2D238_g84994 = SamplePlanar2D( Texture238_g84994 , Sampler238_g84994 , Coords238_g84994 , WorldPosition238_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84994) = _NormalTex4;
				SamplerState Sampler246_g84994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition246_g84994 = worldPos;
				half3 WorldNormal246_g84994 = WorldNormal;
				half4 localSamplePlanar3D246_g84994 = SamplePlanar3D( Texture246_g84994 , Sampler246_g84994 , Coords246_g84994 , WorldPosition246_g84994 , WorldNormal246_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84994) = _NormalTex4;
				SamplerState Sampler234_g84994 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84994 = temp_output_37_0_g84994;
				float3 WorldPosition234_g84994 = worldPos;
				float4 localSampleStochastic2D234_g84994 = SampleStochastic2D( Texture234_g84994 , Sampler234_g84994 , Coords234_g84994 , WorldPosition234_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84994) = _NormalTex4;
				SamplerState Sampler263_g84994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition263_g84994 = worldPos;
				half3 WorldNormal263_g84994 = WorldNormal;
				half4 localSampleStochastic3D263_g84994 = SampleStochastic3D( Texture263_g84994 , Sampler263_g84994 , Coords263_g84994 , WorldPosition263_g84994 , WorldNormal263_g84994 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8638_g84942 = localSamplePlanar2D238_g84994;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8638_g84942 = localSamplePlanar3D246_g84994;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8638_g84942 = localSampleStochastic2D234_g84994;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8638_g84942 = localSampleStochastic3D263_g84994;
				#else
				float4 staticSwitch8638_g84942 = localSamplePlanar2D238_g84994;
				#endif
				half4 Layer439_g84943 = staticSwitch8638_g84942;
				float4 weightedBlendVar31_g84943 = Weights52_g84943;
				float4 weightedBlend31_g84943 = ( weightedBlendVar31_g84943.x*Layer133_g84943 + weightedBlendVar31_g84943.y*Layer237_g84943 + weightedBlendVar31_g84943.z*Layer338_g84943 + weightedBlendVar31_g84943.w*Layer439_g84943 );
				half4 Terrain_Normal_047202_g84942 = weightedBlend31_g84943;
				half4 Layer_045_g84953 = Terrain_Normal_047202_g84942;
				half4 Weights52_g84959 = Terrain_Weights_087340_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85003) = _NormalTex5;
				SamplerState Sampler238_g85003 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85003 = Input_Coords_058750_g84942;
				half4 Coords238_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition238_g85003 = worldPos;
				half4 localSamplePlanar2D238_g85003 = SamplePlanar2D( Texture238_g85003 , Sampler238_g85003 , Coords238_g85003 , WorldPosition238_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85003) = _NormalTex5;
				SamplerState Sampler246_g85003 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition246_g85003 = worldPos;
				half3 WorldNormal246_g85003 = WorldNormal;
				half4 localSamplePlanar3D246_g85003 = SamplePlanar3D( Texture246_g85003 , Sampler246_g85003 , Coords246_g85003 , WorldPosition246_g85003 , WorldNormal246_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85003) = _NormalTex5;
				SamplerState Sampler234_g85003 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85003 = temp_output_37_0_g85003;
				float3 WorldPosition234_g85003 = worldPos;
				float4 localSampleStochastic2D234_g85003 = SampleStochastic2D( Texture234_g85003 , Sampler234_g85003 , Coords234_g85003 , WorldPosition234_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85003) = _NormalTex5;
				SamplerState Sampler263_g85003 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition263_g85003 = worldPos;
				half3 WorldNormal263_g85003 = WorldNormal;
				half4 localSampleStochastic3D263_g85003 = SampleStochastic3D( Texture263_g85003 , Sampler263_g85003 , Coords263_g85003 , WorldPosition263_g85003 , WorldNormal263_g85003 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8686_g84942 = localSamplePlanar2D238_g85003;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8686_g84942 = localSamplePlanar3D246_g85003;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8686_g84942 = localSampleStochastic2D234_g85003;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8686_g84942 = localSampleStochastic3D263_g85003;
				#else
				float4 staticSwitch8686_g84942 = localSamplePlanar2D238_g85003;
				#endif
				half4 Layer133_g84959 = staticSwitch8686_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85004) = _NormalTex6;
				SamplerState Sampler238_g85004 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85004 = Input_Coords_068751_g84942;
				half4 Coords238_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition238_g85004 = worldPos;
				half4 localSamplePlanar2D238_g85004 = SamplePlanar2D( Texture238_g85004 , Sampler238_g85004 , Coords238_g85004 , WorldPosition238_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85004) = _NormalTex6;
				SamplerState Sampler246_g85004 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition246_g85004 = worldPos;
				half3 WorldNormal246_g85004 = WorldNormal;
				half4 localSamplePlanar3D246_g85004 = SamplePlanar3D( Texture246_g85004 , Sampler246_g85004 , Coords246_g85004 , WorldPosition246_g85004 , WorldNormal246_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85004) = _NormalTex6;
				SamplerState Sampler234_g85004 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85004 = temp_output_37_0_g85004;
				float3 WorldPosition234_g85004 = worldPos;
				float4 localSampleStochastic2D234_g85004 = SampleStochastic2D( Texture234_g85004 , Sampler234_g85004 , Coords234_g85004 , WorldPosition234_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85004) = _NormalTex6;
				SamplerState Sampler263_g85004 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition263_g85004 = worldPos;
				half3 WorldNormal263_g85004 = WorldNormal;
				half4 localSampleStochastic3D263_g85004 = SampleStochastic3D( Texture263_g85004 , Sampler263_g85004 , Coords263_g85004 , WorldPosition263_g85004 , WorldNormal263_g85004 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8687_g84942 = localSamplePlanar2D238_g85004;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8687_g84942 = localSamplePlanar3D246_g85004;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8687_g84942 = localSampleStochastic2D234_g85004;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8687_g84942 = localSampleStochastic3D263_g85004;
				#else
				float4 staticSwitch8687_g84942 = localSamplePlanar2D238_g85004;
				#endif
				half4 Layer237_g84959 = staticSwitch8687_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85005) = _NormalTex7;
				SamplerState Sampler238_g85005 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85005 = Input_Coords_078752_g84942;
				half4 Coords238_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition238_g85005 = worldPos;
				half4 localSamplePlanar2D238_g85005 = SamplePlanar2D( Texture238_g85005 , Sampler238_g85005 , Coords238_g85005 , WorldPosition238_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85005) = _NormalTex7;
				SamplerState Sampler246_g85005 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition246_g85005 = worldPos;
				half3 WorldNormal246_g85005 = WorldNormal;
				half4 localSamplePlanar3D246_g85005 = SamplePlanar3D( Texture246_g85005 , Sampler246_g85005 , Coords246_g85005 , WorldPosition246_g85005 , WorldNormal246_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85005) = _NormalTex7;
				SamplerState Sampler234_g85005 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85005 = temp_output_37_0_g85005;
				float3 WorldPosition234_g85005 = worldPos;
				float4 localSampleStochastic2D234_g85005 = SampleStochastic2D( Texture234_g85005 , Sampler234_g85005 , Coords234_g85005 , WorldPosition234_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85005) = _NormalTex7;
				SamplerState Sampler263_g85005 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition263_g85005 = worldPos;
				half3 WorldNormal263_g85005 = WorldNormal;
				half4 localSampleStochastic3D263_g85005 = SampleStochastic3D( Texture263_g85005 , Sampler263_g85005 , Coords263_g85005 , WorldPosition263_g85005 , WorldNormal263_g85005 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8688_g84942 = localSamplePlanar2D238_g85005;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8688_g84942 = localSamplePlanar3D246_g85005;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8688_g84942 = localSampleStochastic2D234_g85005;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8688_g84942 = localSampleStochastic3D263_g85005;
				#else
				float4 staticSwitch8688_g84942 = localSamplePlanar2D238_g85005;
				#endif
				half4 Layer338_g84959 = staticSwitch8688_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85006) = _NormalTex8;
				SamplerState Sampler238_g85006 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85006 = Input_Coords_088749_g84942;
				half4 Coords238_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition238_g85006 = worldPos;
				half4 localSamplePlanar2D238_g85006 = SamplePlanar2D( Texture238_g85006 , Sampler238_g85006 , Coords238_g85006 , WorldPosition238_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85006) = _NormalTex8;
				SamplerState Sampler246_g85006 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition246_g85006 = worldPos;
				half3 WorldNormal246_g85006 = WorldNormal;
				half4 localSamplePlanar3D246_g85006 = SamplePlanar3D( Texture246_g85006 , Sampler246_g85006 , Coords246_g85006 , WorldPosition246_g85006 , WorldNormal246_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85006) = _NormalTex8;
				SamplerState Sampler234_g85006 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85006 = temp_output_37_0_g85006;
				float3 WorldPosition234_g85006 = worldPos;
				float4 localSampleStochastic2D234_g85006 = SampleStochastic2D( Texture234_g85006 , Sampler234_g85006 , Coords234_g85006 , WorldPosition234_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85006) = _NormalTex8;
				SamplerState Sampler263_g85006 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition263_g85006 = worldPos;
				half3 WorldNormal263_g85006 = WorldNormal;
				half4 localSampleStochastic3D263_g85006 = SampleStochastic3D( Texture263_g85006 , Sampler263_g85006 , Coords263_g85006 , WorldPosition263_g85006 , WorldNormal263_g85006 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8689_g84942 = localSamplePlanar2D238_g85006;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8689_g84942 = localSamplePlanar3D246_g85006;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8689_g84942 = localSampleStochastic2D234_g85006;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8689_g84942 = localSampleStochastic3D263_g85006;
				#else
				float4 staticSwitch8689_g84942 = localSamplePlanar2D238_g85006;
				#endif
				half4 Layer439_g84959 = staticSwitch8689_g84942;
				float4 weightedBlendVar31_g84959 = Weights52_g84959;
				float4 weightedBlend31_g84959 = ( weightedBlendVar31_g84959.x*Layer133_g84959 + weightedBlendVar31_g84959.y*Layer237_g84959 + weightedBlendVar31_g84959.z*Layer338_g84959 + weightedBlendVar31_g84959.w*Layer439_g84959 );
				half4 Terrain_Normal_088684_g84942 = weightedBlend31_g84959;
				half4 Layer_0810_g84953 = Terrain_Normal_088684_g84942;
				half4 Weights52_g84969 = Terrain_Weights_127710_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85015) = _NormalTex9;
				SamplerState Sampler238_g85015 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85015 = Input_Coords_098833_g84942;
				half4 Coords238_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition238_g85015 = worldPos;
				half4 localSamplePlanar2D238_g85015 = SamplePlanar2D( Texture238_g85015 , Sampler238_g85015 , Coords238_g85015 , WorldPosition238_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85015) = _NormalTex9;
				SamplerState Sampler246_g85015 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition246_g85015 = worldPos;
				half3 WorldNormal246_g85015 = WorldNormal;
				half4 localSamplePlanar3D246_g85015 = SamplePlanar3D( Texture246_g85015 , Sampler246_g85015 , Coords246_g85015 , WorldPosition246_g85015 , WorldNormal246_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85015) = _NormalTex9;
				SamplerState Sampler234_g85015 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85015 = temp_output_37_0_g85015;
				float3 WorldPosition234_g85015 = worldPos;
				float4 localSampleStochastic2D234_g85015 = SampleStochastic2D( Texture234_g85015 , Sampler234_g85015 , Coords234_g85015 , WorldPosition234_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85015) = _NormalTex9;
				SamplerState Sampler263_g85015 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition263_g85015 = worldPos;
				half3 WorldNormal263_g85015 = WorldNormal;
				half4 localSampleStochastic3D263_g85015 = SampleStochastic3D( Texture263_g85015 , Sampler263_g85015 , Coords263_g85015 , WorldPosition263_g85015 , WorldNormal263_g85015 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8849_g84942 = localSamplePlanar2D238_g85015;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8849_g84942 = localSamplePlanar3D246_g85015;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8849_g84942 = localSampleStochastic2D234_g85015;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8849_g84942 = localSampleStochastic3D263_g85015;
				#else
				float4 staticSwitch8849_g84942 = localSamplePlanar2D238_g85015;
				#endif
				half4 Layer133_g84969 = staticSwitch8849_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85016) = _NormalTex10;
				SamplerState Sampler238_g85016 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85016 = Input_Coords_108834_g84942;
				half4 Coords238_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition238_g85016 = worldPos;
				half4 localSamplePlanar2D238_g85016 = SamplePlanar2D( Texture238_g85016 , Sampler238_g85016 , Coords238_g85016 , WorldPosition238_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85016) = _NormalTex10;
				SamplerState Sampler246_g85016 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition246_g85016 = worldPos;
				half3 WorldNormal246_g85016 = WorldNormal;
				half4 localSamplePlanar3D246_g85016 = SamplePlanar3D( Texture246_g85016 , Sampler246_g85016 , Coords246_g85016 , WorldPosition246_g85016 , WorldNormal246_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85016) = _NormalTex10;
				SamplerState Sampler234_g85016 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85016 = temp_output_37_0_g85016;
				float3 WorldPosition234_g85016 = worldPos;
				float4 localSampleStochastic2D234_g85016 = SampleStochastic2D( Texture234_g85016 , Sampler234_g85016 , Coords234_g85016 , WorldPosition234_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85016) = _NormalTex10;
				SamplerState Sampler263_g85016 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition263_g85016 = worldPos;
				half3 WorldNormal263_g85016 = WorldNormal;
				half4 localSampleStochastic3D263_g85016 = SampleStochastic3D( Texture263_g85016 , Sampler263_g85016 , Coords263_g85016 , WorldPosition263_g85016 , WorldNormal263_g85016 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8876_g84942 = localSamplePlanar2D238_g85016;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8876_g84942 = localSamplePlanar3D246_g85016;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8876_g84942 = localSampleStochastic2D234_g85016;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8876_g84942 = localSampleStochastic3D263_g85016;
				#else
				float4 staticSwitch8876_g84942 = localSamplePlanar2D238_g85016;
				#endif
				half4 Layer237_g84969 = staticSwitch8876_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85017) = _NormalTex11;
				SamplerState Sampler238_g85017 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85017 = Input_Coords_118835_g84942;
				half4 Coords238_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition238_g85017 = worldPos;
				half4 localSamplePlanar2D238_g85017 = SamplePlanar2D( Texture238_g85017 , Sampler238_g85017 , Coords238_g85017 , WorldPosition238_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85017) = _NormalTex11;
				SamplerState Sampler246_g85017 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition246_g85017 = worldPos;
				half3 WorldNormal246_g85017 = WorldNormal;
				half4 localSamplePlanar3D246_g85017 = SamplePlanar3D( Texture246_g85017 , Sampler246_g85017 , Coords246_g85017 , WorldPosition246_g85017 , WorldNormal246_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85017) = _NormalTex11;
				SamplerState Sampler234_g85017 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85017 = temp_output_37_0_g85017;
				float3 WorldPosition234_g85017 = worldPos;
				float4 localSampleStochastic2D234_g85017 = SampleStochastic2D( Texture234_g85017 , Sampler234_g85017 , Coords234_g85017 , WorldPosition234_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85017) = _NormalTex11;
				SamplerState Sampler263_g85017 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition263_g85017 = worldPos;
				half3 WorldNormal263_g85017 = WorldNormal;
				half4 localSampleStochastic3D263_g85017 = SampleStochastic3D( Texture263_g85017 , Sampler263_g85017 , Coords263_g85017 , WorldPosition263_g85017 , WorldNormal263_g85017 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8850_g84942 = localSamplePlanar2D238_g85017;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8850_g84942 = localSamplePlanar3D246_g85017;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8850_g84942 = localSampleStochastic2D234_g85017;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8850_g84942 = localSampleStochastic3D263_g85017;
				#else
				float4 staticSwitch8850_g84942 = localSamplePlanar2D238_g85017;
				#endif
				half4 Layer338_g84969 = staticSwitch8850_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85018) = _NormalTex12;
				SamplerState Sampler238_g85018 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85018 = Input_Coords_128836_g84942;
				half4 Coords238_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition238_g85018 = worldPos;
				half4 localSamplePlanar2D238_g85018 = SamplePlanar2D( Texture238_g85018 , Sampler238_g85018 , Coords238_g85018 , WorldPosition238_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85018) = _NormalTex12;
				SamplerState Sampler246_g85018 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition246_g85018 = worldPos;
				half3 WorldNormal246_g85018 = WorldNormal;
				half4 localSamplePlanar3D246_g85018 = SamplePlanar3D( Texture246_g85018 , Sampler246_g85018 , Coords246_g85018 , WorldPosition246_g85018 , WorldNormal246_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85018) = _NormalTex12;
				SamplerState Sampler234_g85018 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85018 = temp_output_37_0_g85018;
				float3 WorldPosition234_g85018 = worldPos;
				float4 localSampleStochastic2D234_g85018 = SampleStochastic2D( Texture234_g85018 , Sampler234_g85018 , Coords234_g85018 , WorldPosition234_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85018) = _NormalTex12;
				SamplerState Sampler263_g85018 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition263_g85018 = worldPos;
				half3 WorldNormal263_g85018 = WorldNormal;
				half4 localSampleStochastic3D263_g85018 = SampleStochastic3D( Texture263_g85018 , Sampler263_g85018 , Coords263_g85018 , WorldPosition263_g85018 , WorldNormal263_g85018 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8877_g84942 = localSamplePlanar2D238_g85018;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8877_g84942 = localSamplePlanar3D246_g85018;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8877_g84942 = localSampleStochastic2D234_g85018;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8877_g84942 = localSampleStochastic3D263_g85018;
				#else
				float4 staticSwitch8877_g84942 = localSamplePlanar2D238_g85018;
				#endif
				half4 Layer439_g84969 = staticSwitch8877_g84942;
				float4 weightedBlendVar31_g84969 = Weights52_g84969;
				float4 weightedBlend31_g84969 = ( weightedBlendVar31_g84969.x*Layer133_g84969 + weightedBlendVar31_g84969.y*Layer237_g84969 + weightedBlendVar31_g84969.z*Layer338_g84969 + weightedBlendVar31_g84969.w*Layer439_g84969 );
				half4 Terrain_Normal_128865_g84942 = weightedBlend31_g84969;
				half4 Layer_1243_g84953 = Terrain_Normal_128865_g84942;
				half4 Weights52_g84979 = Terrain_Weights_167709_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85034) = _NormalTex13;
				SamplerState Sampler238_g85034 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85034 = Input_Coords_138960_g84942;
				half4 Coords238_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition238_g85034 = worldPos;
				half4 localSamplePlanar2D238_g85034 = SamplePlanar2D( Texture238_g85034 , Sampler238_g85034 , Coords238_g85034 , WorldPosition238_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85034) = _NormalTex13;
				SamplerState Sampler246_g85034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition246_g85034 = worldPos;
				half3 WorldNormal246_g85034 = WorldNormal;
				half4 localSamplePlanar3D246_g85034 = SamplePlanar3D( Texture246_g85034 , Sampler246_g85034 , Coords246_g85034 , WorldPosition246_g85034 , WorldNormal246_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85034) = _NormalTex13;
				SamplerState Sampler234_g85034 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85034 = temp_output_37_0_g85034;
				float3 WorldPosition234_g85034 = worldPos;
				float4 localSampleStochastic2D234_g85034 = SampleStochastic2D( Texture234_g85034 , Sampler234_g85034 , Coords234_g85034 , WorldPosition234_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85034) = _NormalTex13;
				SamplerState Sampler263_g85034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition263_g85034 = worldPos;
				half3 WorldNormal263_g85034 = WorldNormal;
				half4 localSampleStochastic3D263_g85034 = SampleStochastic3D( Texture263_g85034 , Sampler263_g85034 , Coords263_g85034 , WorldPosition263_g85034 , WorldNormal263_g85034 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch8991_g84942 = localSamplePlanar2D238_g85034;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch8991_g84942 = localSamplePlanar3D246_g85034;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch8991_g84942 = localSampleStochastic2D234_g85034;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch8991_g84942 = localSampleStochastic3D263_g85034;
				#else
				float4 staticSwitch8991_g84942 = localSamplePlanar2D238_g85034;
				#endif
				half4 Layer133_g84979 = staticSwitch8991_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85027) = _NormalTex14;
				SamplerState Sampler238_g85027 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85027 = Input_Coords_148961_g84942;
				half4 Coords238_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition238_g85027 = worldPos;
				half4 localSamplePlanar2D238_g85027 = SamplePlanar2D( Texture238_g85027 , Sampler238_g85027 , Coords238_g85027 , WorldPosition238_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85027) = _NormalTex14;
				SamplerState Sampler246_g85027 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition246_g85027 = worldPos;
				half3 WorldNormal246_g85027 = WorldNormal;
				half4 localSamplePlanar3D246_g85027 = SamplePlanar3D( Texture246_g85027 , Sampler246_g85027 , Coords246_g85027 , WorldPosition246_g85027 , WorldNormal246_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85027) = _NormalTex14;
				SamplerState Sampler234_g85027 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85027 = temp_output_37_0_g85027;
				float3 WorldPosition234_g85027 = worldPos;
				float4 localSampleStochastic2D234_g85027 = SampleStochastic2D( Texture234_g85027 , Sampler234_g85027 , Coords234_g85027 , WorldPosition234_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85027) = _NormalTex14;
				SamplerState Sampler263_g85027 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition263_g85027 = worldPos;
				half3 WorldNormal263_g85027 = WorldNormal;
				half4 localSampleStochastic3D263_g85027 = SampleStochastic3D( Texture263_g85027 , Sampler263_g85027 , Coords263_g85027 , WorldPosition263_g85027 , WorldNormal263_g85027 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch8990_g84942 = localSamplePlanar2D238_g85027;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch8990_g84942 = localSamplePlanar3D246_g85027;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch8990_g84942 = localSampleStochastic2D234_g85027;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch8990_g84942 = localSampleStochastic3D263_g85027;
				#else
				float4 staticSwitch8990_g84942 = localSamplePlanar2D238_g85027;
				#endif
				half4 Layer237_g84979 = staticSwitch8990_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85028) = _NormalTex15;
				SamplerState Sampler238_g85028 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85028 = Input_Coords_158962_g84942;
				half4 Coords238_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition238_g85028 = worldPos;
				half4 localSamplePlanar2D238_g85028 = SamplePlanar2D( Texture238_g85028 , Sampler238_g85028 , Coords238_g85028 , WorldPosition238_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85028) = _NormalTex15;
				SamplerState Sampler246_g85028 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition246_g85028 = worldPos;
				half3 WorldNormal246_g85028 = WorldNormal;
				half4 localSamplePlanar3D246_g85028 = SamplePlanar3D( Texture246_g85028 , Sampler246_g85028 , Coords246_g85028 , WorldPosition246_g85028 , WorldNormal246_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85028) = _NormalTex15;
				SamplerState Sampler234_g85028 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85028 = temp_output_37_0_g85028;
				float3 WorldPosition234_g85028 = worldPos;
				float4 localSampleStochastic2D234_g85028 = SampleStochastic2D( Texture234_g85028 , Sampler234_g85028 , Coords234_g85028 , WorldPosition234_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85028) = _NormalTex15;
				SamplerState Sampler263_g85028 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition263_g85028 = worldPos;
				half3 WorldNormal263_g85028 = WorldNormal;
				half4 localSampleStochastic3D263_g85028 = SampleStochastic3D( Texture263_g85028 , Sampler263_g85028 , Coords263_g85028 , WorldPosition263_g85028 , WorldNormal263_g85028 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch8989_g84942 = localSamplePlanar2D238_g85028;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch8989_g84942 = localSamplePlanar3D246_g85028;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch8989_g84942 = localSampleStochastic2D234_g85028;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch8989_g84942 = localSampleStochastic3D263_g85028;
				#else
				float4 staticSwitch8989_g84942 = localSamplePlanar2D238_g85028;
				#endif
				half4 Layer338_g84979 = staticSwitch8989_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85029) = _NormalTex16;
				SamplerState Sampler238_g85029 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85029 = Input_Coords_168959_g84942;
				half4 Coords238_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition238_g85029 = worldPos;
				half4 localSamplePlanar2D238_g85029 = SamplePlanar2D( Texture238_g85029 , Sampler238_g85029 , Coords238_g85029 , WorldPosition238_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85029) = _NormalTex16;
				SamplerState Sampler246_g85029 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition246_g85029 = worldPos;
				half3 WorldNormal246_g85029 = WorldNormal;
				half4 localSamplePlanar3D246_g85029 = SamplePlanar3D( Texture246_g85029 , Sampler246_g85029 , Coords246_g85029 , WorldPosition246_g85029 , WorldNormal246_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85029) = _NormalTex16;
				SamplerState Sampler234_g85029 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85029 = temp_output_37_0_g85029;
				float3 WorldPosition234_g85029 = worldPos;
				float4 localSampleStochastic2D234_g85029 = SampleStochastic2D( Texture234_g85029 , Sampler234_g85029 , Coords234_g85029 , WorldPosition234_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85029) = _NormalTex16;
				SamplerState Sampler263_g85029 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition263_g85029 = worldPos;
				half3 WorldNormal263_g85029 = WorldNormal;
				half4 localSampleStochastic3D263_g85029 = SampleStochastic3D( Texture263_g85029 , Sampler263_g85029 , Coords263_g85029 , WorldPosition263_g85029 , WorldNormal263_g85029 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch8988_g84942 = localSamplePlanar2D238_g85029;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch8988_g84942 = localSamplePlanar3D246_g85029;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch8988_g84942 = localSampleStochastic2D234_g85029;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch8988_g84942 = localSampleStochastic3D263_g85029;
				#else
				float4 staticSwitch8988_g84942 = localSamplePlanar2D238_g85029;
				#endif
				half4 Layer439_g84979 = staticSwitch8988_g84942;
				float4 weightedBlendVar31_g84979 = Weights52_g84979;
				float4 weightedBlend31_g84979 = ( weightedBlendVar31_g84979.x*Layer133_g84979 + weightedBlendVar31_g84979.y*Layer237_g84979 + weightedBlendVar31_g84979.z*Layer338_g84979 + weightedBlendVar31_g84979.w*Layer439_g84979 );
				half4 Terrain_Normal_168987_g84942 = weightedBlend31_g84979;
				half4 Layer_1644_g84953 = Terrain_Normal_168987_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84953 = Layer_045_g84953;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 + Layer_1243_g84953 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 + Layer_1243_g84953 + Layer_1644_g84953 );
				#else
				float4 staticSwitch40_g84953 = Layer_045_g84953;
				#endif
				half4 Blend_Normal7512_g84942 = staticSwitch40_g84953;
				half4 Normal_Packed45_g85037 = Blend_Normal7512_g84942;
				float2 appendResult58_g85037 = (float2(( (Normal_Packed45_g85037).x * (Normal_Packed45_g85037).w ) , (Normal_Packed45_g85037).y));
				half2 Normal_Default50_g85037 = appendResult58_g85037;
				half2 Normal_ASTC41_g85037 = (Normal_Packed45_g85037).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g85037 = Normal_ASTC41_g85037;
				#else
				float2 staticSwitch38_g85037 = Normal_Default50_g85037;
				#endif
				half2 Normal_NO_DTX544_g85037 = (Normal_Packed45_g85037).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g85037 = Normal_NO_DTX544_g85037;
				#else
				float2 staticSwitch37_g85037 = staticSwitch38_g85037;
				#endif
				half4 Weights52_g84945 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84945 = temp_output_6970_0_g84942;
				half4 Layer237_g84945 = temp_output_6977_0_g84942;
				half4 Layer338_g84945 = temp_output_6978_0_g84942;
				half4 Layer439_g84945 = temp_output_6983_0_g84942;
				float4 weightedBlendVar31_g84945 = Weights52_g84945;
				float4 weightedBlend31_g84945 = ( weightedBlendVar31_g84945.x*Layer133_g84945 + weightedBlendVar31_g84945.y*Layer237_g84945 + weightedBlendVar31_g84945.z*Layer338_g84945 + weightedBlendVar31_g84945.w*Layer439_g84945 );
				half4 Terrain_Masks_047203_g84942 = weightedBlend31_g84945;
				half4 Layer_045_g84955 = Terrain_Masks_047203_g84942;
				half4 Weights52_g84962 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84962 = temp_output_8714_0_g84942;
				half4 Layer237_g84962 = temp_output_8721_0_g84942;
				half4 Layer338_g84962 = temp_output_8724_0_g84942;
				half4 Layer439_g84962 = temp_output_8727_0_g84942;
				float4 weightedBlendVar31_g84962 = Weights52_g84962;
				float4 weightedBlend31_g84962 = ( weightedBlendVar31_g84962.x*Layer133_g84962 + weightedBlendVar31_g84962.y*Layer237_g84962 + weightedBlendVar31_g84962.z*Layer338_g84962 + weightedBlendVar31_g84962.w*Layer439_g84962 );
				half4 Terrain_Masks_088730_g84942 = weightedBlend31_g84962;
				half4 Layer_0810_g84955 = Terrain_Masks_088730_g84942;
				half4 Weights52_g84972 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84972 = temp_output_8815_0_g84942;
				half4 Layer237_g84972 = temp_output_8818_0_g84942;
				half4 Layer338_g84972 = temp_output_8819_0_g84942;
				half4 Layer439_g84972 = temp_output_8820_0_g84942;
				float4 weightedBlendVar31_g84972 = Weights52_g84972;
				float4 weightedBlend31_g84972 = ( weightedBlendVar31_g84972.x*Layer133_g84972 + weightedBlendVar31_g84972.y*Layer237_g84972 + weightedBlendVar31_g84972.z*Layer338_g84972 + weightedBlendVar31_g84972.w*Layer439_g84972 );
				half4 Terrain_Masks_128871_g84942 = weightedBlend31_g84972;
				half4 Layer_1243_g84955 = Terrain_Masks_128871_g84942;
				half4 Weights52_g84982 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84982 = temp_output_8931_0_g84942;
				half4 Layer237_g84982 = temp_output_8934_0_g84942;
				half4 Layer338_g84982 = temp_output_8935_0_g84942;
				half4 Layer439_g84982 = temp_output_8936_0_g84942;
				float4 weightedBlendVar31_g84982 = Weights52_g84982;
				float4 weightedBlend31_g84982 = ( weightedBlendVar31_g84982.x*Layer133_g84982 + weightedBlendVar31_g84982.y*Layer237_g84982 + weightedBlendVar31_g84982.z*Layer338_g84982 + weightedBlendVar31_g84982.w*Layer439_g84982 );
				half4 Terrain_Masks_169014_g84942 = weightedBlend31_g84982;
				half4 Layer_1644_g84955 = Terrain_Masks_169014_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84955 = Layer_045_g84955;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 + Layer_1243_g84955 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 + Layer_1243_g84955 + Layer_1644_g84955 );
				#else
				float4 staticSwitch40_g84955 = Layer_045_g84955;
				#endif
				half4 Blend_Masks7420_g84942 = staticSwitch40_g84955;
				half4 Normal_Packed45_g85036 = Blend_Masks7420_g84942;
				half2 Normal_NO_DTX544_g85036 = (Normal_Packed45_g85036).wy;
				#ifdef TVE_PACKED_TEX
				float2 staticSwitch9080_g84942 = (Normal_NO_DTX544_g85036*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g84942 = (staticSwitch37_g85037*2.0 + -1.0);
				#endif
				half4 Weights52_g84949 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84949 = _Params1;
				half4 Layer237_g84949 = _Params2;
				half4 Layer338_g84949 = _Params3;
				half4 Layer439_g84949 = _Params4;
				float4 weightedBlendVar31_g84949 = Weights52_g84949;
				float4 weightedBlend31_g84949 = ( weightedBlendVar31_g84949.x*Layer133_g84949 + weightedBlendVar31_g84949.y*Layer237_g84949 + weightedBlendVar31_g84949.z*Layer338_g84949 + weightedBlendVar31_g84949.w*Layer439_g84949 );
				half4 Terrain_Params_047533_g84942 = weightedBlend31_g84949;
				half4 Layer_045_g84956 = Terrain_Params_047533_g84942;
				half4 Weights52_g84966 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84966 = _Params5;
				half4 Layer237_g84966 = _Params6;
				half4 Layer338_g84966 = _Params7;
				half4 Layer439_g84966 = _Params8;
				float4 weightedBlendVar31_g84966 = Weights52_g84966;
				float4 weightedBlend31_g84966 = ( weightedBlendVar31_g84966.x*Layer133_g84966 + weightedBlendVar31_g84966.y*Layer237_g84966 + weightedBlendVar31_g84966.z*Layer338_g84966 + weightedBlendVar31_g84966.w*Layer439_g84966 );
				half4 Terrain_Params_088739_g84942 = weightedBlend31_g84966;
				half4 Layer_0810_g84956 = Terrain_Params_088739_g84942;
				half4 Weights52_g84976 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84976 = _Params9;
				half4 Layer237_g84976 = _Params10;
				half4 Layer338_g84976 = _Params11;
				half4 Layer439_g84976 = _Params12;
				float4 weightedBlendVar31_g84976 = Weights52_g84976;
				float4 weightedBlend31_g84976 = ( weightedBlendVar31_g84976.x*Layer133_g84976 + weightedBlendVar31_g84976.y*Layer237_g84976 + weightedBlendVar31_g84976.z*Layer338_g84976 + weightedBlendVar31_g84976.w*Layer439_g84976 );
				half4 Terrain_Params_128867_g84942 = weightedBlend31_g84976;
				half4 Layer_1243_g84956 = Terrain_Params_128867_g84942;
				half4 Weights52_g84986 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84986 = _Params13;
				half4 Layer237_g84986 = _Params14;
				half4 Layer338_g84986 = _Params15;
				half4 Layer439_g84986 = _Params16;
				float4 weightedBlendVar31_g84986 = Weights52_g84986;
				float4 weightedBlend31_g84986 = ( weightedBlendVar31_g84986.x*Layer133_g84986 + weightedBlendVar31_g84986.y*Layer237_g84986 + weightedBlendVar31_g84986.z*Layer338_g84986 + weightedBlendVar31_g84986.w*Layer439_g84986 );
				half4 Terrain_Params_169017_g84942 = weightedBlend31_g84986;
				half4 Layer_1644_g84956 = Terrain_Params_169017_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84956 = Layer_045_g84956;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 + Layer_1243_g84956 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 + Layer_1243_g84956 + Layer_1644_g84956 );
				#else
				float4 staticSwitch40_g84956 = Layer_045_g84956;
				#endif
				half4 Blend_Params7547_g84942 = staticSwitch40_g84956;
				half2 Normal_Planar45_g85038 = ( staticSwitch9080_g84942 * (Blend_Params7547_g84942).z );
				float2 break64_g85038 = Normal_Planar45_g85038;
				float3 appendResult65_g85038 = (float3(break64_g85038.x , 0.0 , break64_g85038.y));
				half2 Terrain_Normal8038_g84806 = ( (mul( ase_worldToTangent, appendResult65_g85038 )).xy * _TerrainNormalValue );
				float2 lerpResult7797_g84806 = lerp( Blend_Normal_Detail312_g84806 , Terrain_Normal8038_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float2 staticSwitch7796_g84806 = lerpResult7797_g84806;
				#else
				float2 staticSwitch7796_g84806 = Blend_Normal_Detail312_g84806;
				#endif
				half2 Blend_Normal_Terrain7762_g84806 = staticSwitch7796_g84806;
				float3 appendResult7377_g84806 = (float3(Blend_Normal_Terrain7762_g84806 , 1.0));
				float3 tanNormal7376_g84806 = appendResult7377_g84806;
				float3 worldNormal7376_g84806 = float3(dot(tanToWorld0,tanNormal7376_g84806), dot(tanToWorld1,tanNormal7376_g84806), dot(tanToWorld2,tanNormal7376_g84806));
				half3 Blend_NormalWS_Terrain7375_g84806 = worldNormal7376_g84806;
				float lerpResult7446_g84806 = lerp( (Blend_NormalWS_Terrain7375_g84806).y , IN.ase_normal.y , Vertex_DynamicMode5112_g84806);
				float lerpResult6757_g84806 = lerp( 1.0 , saturate( lerpResult7446_g84806 ) , _OverlayProjectionValue);
				half Overlay_Projection6081_g84806 = lerpResult6757_g84806;
				half Overlay_Shading6688_g84806 = Blend_Albedo_Globals6410_g84806;
				half Overlay_Custom6707_g84806 = 1.0;
				float lerpResult8034_g84806 = lerp( Occlusion_Mask6432_g84806 , ( 1.0 - Occlusion_Mask6432_g84806 ) , _VertexOcclusionOverlayMode);
				float lerpResult8032_g84806 = lerp( Occlusion_Alpha6463_g84806 , 1.0 , lerpResult8034_g84806);
				half Occlusion_Overlay6471_g84806 = lerpResult8032_g84806;
				float temp_output_7_0_g84929 = 0.1;
				float temp_output_10_0_g84929 = ( 0.2 - temp_output_7_0_g84929 );
				half Overlay_Mask_High6064_g84806 = saturate( ( ( ( Overlay_Value5738_g84806 * Overlay_Projection6081_g84806 * Overlay_Shading6688_g84806 * Overlay_Custom6707_g84806 * Occlusion_Overlay6471_g84806 ) - temp_output_7_0_g84929 ) / ( temp_output_10_0_g84929 + 0.0001 ) ) );
				half Overlay_Mask269_g84806 = Overlay_Mask_High6064_g84806;
				float3 lerpResult336_g84806 = lerp( Blend_Albedo_Colored863_g84806 , Global_OverlayColor1758_g84806 , Overlay_Mask269_g84806);
				half3 Blend_Albedo_Overlay359_g84806 = lerpResult336_g84806;
				half Global_WetnessContrast6502_g84806 = TVE_WetnessContrast;
				half Global_Extras_Wetness305_g84806 = break456_g84833.y;
				half Wetness_Value6343_g84806 = ( Global_Extras_Wetness305_g84806 * _GlobalWetness );
				float3 lerpResult6367_g84806 = lerp( Blend_Albedo_Overlay359_g84806 , ( Blend_Albedo_Overlay359_g84806 * Blend_Albedo_Overlay359_g84806 ) , ( Global_WetnessContrast6502_g84806 * Wetness_Value6343_g84806 ));
				half3 Blend_Albedo_Wetness6351_g84806 = lerpResult6367_g84806;
				float vertexToFrag11_g84914 = IN.ase_texcoord10.w;
				half3 Tint_Highlight_Color5771_g84806 = ( ( (_MotionHighlightColor).rgb * vertexToFrag11_g84914 ) + float3( 1,1,1 ) );
				float3 temp_output_6309_0_g84806 = ( Blend_Albedo_Wetness6351_g84806 * Tint_Highlight_Color5771_g84806 );
				half3 Subsurface_Color1722_g84806 = ( (_SubsurfaceColor).rgb * Blend_Albedo_Wetness6351_g84806 );
				half Global_Subsurface4041_g84806 = TVE_SubsurfaceValue;
				half Global_OverlaySubsurface5667_g84806 = TVE_OverlaySubsurface;
				float lerpResult7362_g84806 = lerp( 1.0 , Global_OverlaySubsurface5667_g84806 , Overlay_Value5738_g84806);
				half Overlay_Subsurface7361_g84806 = lerpResult7362_g84806;
				half Subsurface_Intensity1752_g84806 = ( _SubsurfaceValue * Global_Subsurface4041_g84806 * Overlay_Subsurface7361_g84806 );
				float lerpResult8014_g84806 = lerp( 1.0 , Blend_MaskRemap_Detail6621_g84806 , _SubsurfaceMaskValue);
				half Subsurface_Mask1557_g84806 = lerpResult8014_g84806;
				half3 MainLight_Direction3926_g84806 = TVE_MainLightDirection;
				float3 normalizeResult2169_g84806 = normalize( worldViewDir );
				float3 ViewDirection3963_g84806 = normalizeResult2169_g84806;
				float dotResult785_g84806 = dot( -MainLight_Direction3926_g84806 , ViewDirection3963_g84806 );
				float saferPower1624_g84806 = abs( saturate( dotResult785_g84806 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch1602_g84806 = 0.0;
				#else
				float staticSwitch1602_g84806 = ( pow( saferPower1624_g84806 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View782_g84806 = staticSwitch1602_g84806;
				half3 Subsurface_Approximation1693_g84806 = ( Subsurface_Color1722_g84806 * Subsurface_Intensity1752_g84806 * Subsurface_Mask1557_g84806 * Mask_Subsurface_View782_g84806 );
				half3 Blend_Albedo_Subsurface149_g84806 = ( temp_output_6309_0_g84806 + Subsurface_Approximation1693_g84806 );
				half3 Blend_Albedo_RimLight7316_g84806 = Blend_Albedo_Subsurface149_g84806;
				
				half Global_OverlayNormalScale6581_g84806 = TVE_OverlayNormalValue;
				float lerpResult6585_g84806 = lerp( 1.0 , Global_OverlayNormalScale6581_g84806 , Overlay_Mask269_g84806);
				half2 Blend_Normal_Overlay366_g84806 = ( Blend_Normal_Terrain7762_g84806 * lerpResult6585_g84806 );
				half Global_WetnessNormalScale6571_g84806 = TVE_WetnessNormalValue;
				float lerpResult6579_g84806 = lerp( 1.0 , Global_WetnessNormalScale6571_g84806 , ( Wetness_Value6343_g84806 * Wetness_Value6343_g84806 ));
				half2 Blend_Normal_Wetness6372_g84806 = ( Blend_Normal_Overlay366_g84806 * lerpResult6579_g84806 );
				float3 appendResult6568_g84806 = (float3(Blend_Normal_Wetness6372_g84806 , 1.0));
				float3 temp_output_13_0_g84834 = appendResult6568_g84806;
				float3 temp_output_33_0_g84834 = ( temp_output_13_0_g84834 * _render_normals );
				float3 switchResult12_g84834 = (((ase_vface>0)?(temp_output_13_0_g84834):(temp_output_33_0_g84834)));
				
				float3 temp_cast_19 = (0.0).xxx;
				half3 Emissive_Color7162_g84806 = (_EmissiveColor).rgb;
				half2 Emissive_UVs2468_g84806 = ( ( IN.ase_texcoord9.xy * (_EmissiveUVs).xy ) + (_EmissiveUVs).zw );
				float temp_output_7_0_g84938 = _EmissiveTexMinValue;
				float3 temp_cast_20 = (temp_output_7_0_g84938).xxx;
				float temp_output_10_0_g84938 = ( _EmissiveTexMaxValue - temp_output_7_0_g84938 );
				half3 Emissive_Texture7022_g84806 = saturate( ( ( (SAMPLE_TEXTURE2D( _EmissiveTex, sampler_Linear_Repeat, Emissive_UVs2468_g84806 )).rgb - temp_cast_20 ) / ( temp_output_10_0_g84938 + 0.0001 ) ) );
				half Global_Extras_Emissive4203_g84806 = break456_g84833.x;
				float lerpResult4206_g84806 = lerp( 1.0 , Global_Extras_Emissive4203_g84806 , _GlobalEmissive);
				half Emissive_Value7024_g84806 = ( ( lerpResult4206_g84806 * _EmissivePhaseValue ) - 1.0 );
				half3 Emissive_Mask6968_g84806 = saturate( ( Emissive_Texture7022_g84806 + Emissive_Value7024_g84806 ) );
				float3 temp_output_3_0_g84937 = ( Emissive_Color7162_g84806 * Emissive_Mask6968_g84806 );
				float temp_output_15_0_g84937 = _emissive_intensity_value;
				float3 temp_output_23_0_g84937 = ( temp_output_3_0_g84937 * temp_output_15_0_g84937 );
				#ifdef TVE_EMISSIVE
				float3 staticSwitch8018_g84806 = temp_output_23_0_g84937;
				#else
				float3 staticSwitch8018_g84806 = temp_cast_19;
				#endif
				half3 Blend_Emissive2476_g84806 = staticSwitch8018_g84806;
				half3 Terrain_Emissive7933_g84806 = ( (Blend_Specular7446_g84942).rgb * (Blend_Albedo7468_g84942).xyz );
				float3 lerpResult7927_g84806 = lerp( Blend_Emissive2476_g84806 , Terrain_Emissive7933_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7912_g84806 = lerpResult7927_g84806;
				#else
				float3 staticSwitch7912_g84806 = Blend_Emissive2476_g84806;
				#endif
				half3 Blend_Emissive_Terrain7909_g84806 = staticSwitch7912_g84806;
				
				half Render_Specular4861_g84806 = _RenderSpecular;
				float3 temp_cast_21 = (( 0.04 * Render_Specular4861_g84806 )).xxx;
				
				float lerpResult240_g84806 = lerp( 1.0 , tex2DNode35_g84806.g , _MainOcclusionValue);
				half Main_Occlusion247_g84806 = lerpResult240_g84806;
				float lerpResult239_g84806 = lerp( 1.0 , tex2DNode33_g84806.g , _SecondOcclusionValue);
				half Second_Occlusion251_g84806 = lerpResult239_g84806;
				float lerpResult294_g84806 = lerp( Main_Occlusion247_g84806 , Second_Occlusion251_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch310_g84806 = lerpResult294_g84806;
				#else
				float staticSwitch310_g84806 = Main_Occlusion247_g84806;
				#endif
				half Blend_Occlusion_Detail323_g84806 = staticSwitch310_g84806;
				#ifdef TVE_PACKED_TEX
				float staticSwitch9097_g84942 = 1.0;
				#else
				float staticSwitch9097_g84942 = ( (Blend_Masks7420_g84942).y * _TerrainOcclusionValue );
				#endif
				half Terrain_Occlusion8041_g84806 = staticSwitch9097_g84942;
				float lerpResult7815_g84806 = lerp( Blend_Occlusion_Detail323_g84806 , Terrain_Occlusion8041_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float staticSwitch7814_g84806 = lerpResult7815_g84806;
				#else
				float staticSwitch7814_g84806 = Blend_Occlusion_Detail323_g84806;
				#endif
				half Blend_Occlusion_Terrain7820_g84806 = staticSwitch7814_g84806;
				
				half Main_Smoothness227_g84806 = ( tex2DNode35_g84806.a * _MainSmoothnessValue );
				half Second_Smoothness236_g84806 = ( tex2DNode33_g84806.a * _SecondSmoothnessValue );
				float lerpResult266_g84806 = lerp( Main_Smoothness227_g84806 , Second_Smoothness236_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch297_g84806 = lerpResult266_g84806;
				#else
				float staticSwitch297_g84806 = Main_Smoothness227_g84806;
				#endif
				half Blend_Smoothness_Detail314_g84806 = staticSwitch297_g84806;
				#ifdef TVE_PACKED_TEX
				float staticSwitch9105_g84942 = (Blend_Masks7420_g84942).x;
				#else
				float staticSwitch9105_g84942 = (Blend_Masks7420_g84942).w;
				#endif
				half Terrain_Smoothness8042_g84806 = ( staticSwitch9105_g84942 * (Blend_Params7547_g84942).w * _TerrainSmoothnessValue );
				float lerpResult7801_g84806 = lerp( Blend_Smoothness_Detail314_g84806 , Terrain_Smoothness8042_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float staticSwitch7800_g84806 = lerpResult7801_g84806;
				#else
				float staticSwitch7800_g84806 = Blend_Smoothness_Detail314_g84806;
				#endif
				half Blend_Smoothness_Terrain7806_g84806 = staticSwitch7800_g84806;
				half Global_OverlaySmoothness311_g84806 = TVE_OverlaySmoothness;
				float lerpResult343_g84806 = lerp( Blend_Smoothness_Terrain7806_g84806 , Global_OverlaySmoothness311_g84806 , Overlay_Mask269_g84806);
				half Blend_Smoothness_Overlay371_g84806 = lerpResult343_g84806;
				float temp_output_6499_0_g84806 = ( 1.0 - Wetness_Value6343_g84806 );
				half Blend_Smoothness_Wetness4130_g84806 = saturate( ( Blend_Smoothness_Overlay371_g84806 + ( 1.0 - ( temp_output_6499_0_g84806 * temp_output_6499_0_g84806 ) ) ) );
				
				float localCustomAlphaClip19_g84928 = ( 0.0 );
				half Main_Alpha316_g84806 = tex2DNode29_g84806.a;
				half Second_Alpha5007_g84806 = tex2DNode89_g84806.a;
				float lerpResult6153_g84806 = lerp( Main_Alpha316_g84806 , Second_Alpha5007_g84806 , Detail_Mask147_g84806);
				float lerpResult6785_g84806 = lerp( ( Main_Alpha316_g84806 * Second_Alpha5007_g84806 ) , lerpResult6153_g84806 , _DetailAlphaMode);
				#ifdef TVE_DETAIL
				float staticSwitch6158_g84806 = lerpResult6785_g84806;
				#else
				float staticSwitch6158_g84806 = Main_Alpha316_g84806;
				#endif
				half Blend_Alpha_Detail6157_g84806 = staticSwitch6158_g84806;
				half AlphaTreshold2132_g84806 = _AlphaClipValue;
				half Global_Extras_Alpha1033_g84806 = saturate( break456_g84833.w );
				float lerpResult5154_g84806 = lerp( 0.0 , Global_MeshVariation5104_g84806 , _AlphaVariationValue);
				half Global_Alpha_Variation5158_g84806 = lerpResult5154_g84806;
				float Emissive_Alpha7942_g84806 = 0.0;
				float lerpResult6866_g84806 = lerp( ( 1.0 - Detail_Mask147_g84806 ) , 1.0 , _DetailFadeMode);
				#ifdef TVE_DETAIL
				float staticSwitch6612_g84806 = lerpResult6866_g84806;
				#else
				float staticSwitch6612_g84806 = 1.0;
				#endif
				half Detail_Mask_Invert6260_g84806 = staticSwitch6612_g84806;
				half Alpha_Mask6234_g84806 = ( 1.0 * Detail_Mask_Invert6260_g84806 );
				float lerpResult5203_g84806 = lerp( 1.0 , saturate( ( ( Global_Extras_Alpha1033_g84806 - saturate( ( Global_Alpha_Variation5158_g84806 + Emissive_Alpha7942_g84806 ) ) ) + ( Global_Extras_Alpha1033_g84806 * 0.1 ) ) ) , ( Alpha_Mask6234_g84806 * _GlobalAlpha ));
				float lerpResult16_g84925 = lerp( 1.0 , lerpResult5203_g84806 , TVE_IsEnabled);
				half Global_Alpha315_g84806 = lerpResult16_g84925;
				half Fade_Alpha3727_g84806 = 1.0;
				half Final_Alpha7344_g84806 = min( ( ( Blend_Alpha_Detail6157_g84806 - AlphaTreshold2132_g84806 ) * Global_Alpha315_g84806 ) , Fade_Alpha3727_g84806 );
				float temp_output_3_0_g84928 = Final_Alpha7344_g84806;
				float Alpha19_g84928 = temp_output_3_0_g84928;
				float temp_output_15_0_g84928 = 0.01;
				float Treshold19_g84928 = temp_output_15_0_g84928;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_ALPHA_FADE) || defined (TVE_ALPHA_GLOBAL)
				#if defined (TVE_IS_HD_PIPELINE)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g84928 - Treshold19_g84928);
				#endif
				#else
				clip(Alpha19_g84928 - Treshold19_g84928);
				#endif
				#endif
				}
				half Main_Color_Alpha6121_g84806 = (lerpResult7986_g84806).a;
				half Second_Color_Alpha6152_g84806 = (lerpResult7997_g84806).a;
				float lerpResult6168_g84806 = lerp( Main_Color_Alpha6121_g84806 , Second_Color_Alpha6152_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch6174_g84806 = lerpResult6168_g84806;
				#else
				float staticSwitch6174_g84806 = Main_Color_Alpha6121_g84806;
				#endif
				half Blend_ColorAlpha_Detail6167_g84806 = staticSwitch6174_g84806;
				half Final_Clip914_g84806 = saturate( ( Alpha19_g84928 * Blend_ColorAlpha_Detail6167_g84806 ) );
				
				o.Albedo = Blend_Albedo_RimLight7316_g84806;
				o.Normal = switchResult12_g84834;
				o.Emission = Blend_Emissive_Terrain7909_g84806;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = fixed3( 0, 0, 0 );
					o.Gloss = 0;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = temp_cast_21;
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = Blend_Occlusion_Terrain7820_g84806;
					o.Smoothness = Blend_Smoothness_Wetness4130_g84806;
				#endif

				o.Alpha = Final_Clip914_g84806;
				float AlphaClipThreshold = 0.5;
				float3 Transmission = 1;
				float3 Translucency = 1;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;
				gi.light.color *= atten;

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard( o, worldViewDir, gi );
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "Deferred"
			Tags { "LightMode"="Deferred" }

			AlphaToMask Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma target 3.0
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma multi_compile_prepassfinal
			#ifndef UNITY_PASS_DEFERRED
				#define UNITY_PASS_DEFERRED
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_COLOR
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_FRAG_WORLD_VIEW_DIR
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local TVE_TERRAIN
			#pragma shader_feature_local TVE_DETAIL
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_HEIGHT_BLEND
			#pragma shader_feature_local_fragment TVE_SAMPLE_01_PLANAR_2D TVE_SAMPLE_01_PLANAR_3D TVE_SAMPLE_01_STOCHASTIC_2D TVE_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_02_PLANAR_2D TVE_SAMPLE_02_PLANAR_3D TVE_SAMPLE_02_STOCHASTIC_2D TVE_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_03_PLANAR_2D TVE_SAMPLE_03_PLANAR_3D TVE_SAMPLE_03_STOCHASTIC_2D TVE_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_04_PLANAR_2D TVE_SAMPLE_04_PLANAR_3D TVE_SAMPLE_04_STOCHASTIC_2D TVE_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_05_PLANAR_2D TVE_SAMPLE_05_PLANAR_3D TVE_SAMPLE_05_STOCHASTIC_2D TVE_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_06_PLANAR_2D TVE_SAMPLE_06_PLANAR_3D TVE_SAMPLE_06_STOCHASTIC_2D TVE_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_07_PLANAR_2D TVE_SAMPLE_07_PLANAR_3D TVE_SAMPLE_07_STOCHASTIC_2D TVE_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_08_PLANAR_2D TVE_SAMPLE_08_PLANAR_3D TVE_SAMPLE_08_STOCHASTIC_2D TVE_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_09_PLANAR_2D TVE_SAMPLE_09_PLANAR_3D TVE_SAMPLE_09_STOCHASTIC_2D TVE_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_10_PLANAR_2D TVE_SAMPLE_10_PLANAR_3D TVE_SAMPLE_10_STOCHASTIC_2D TVE_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_11_PLANAR_2D TVE_SAMPLE_11_PLANAR_3D TVE_SAMPLE_11_STOCHASTIC_2D TVE_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_12_PLANAR_2D TVE_SAMPLE_12_PLANAR_3D TVE_SAMPLE_12_STOCHASTIC_2D TVE_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_13_PLANAR_2D TVE_SAMPLE_13_PLANAR_3D TVE_SAMPLE_13_STOCHASTIC_2D TVE_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_14_PLANAR_2D TVE_SAMPLE_14_PLANAR_3D TVE_SAMPLE_14_STOCHASTIC_2D TVE_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_15_PLANAR_2D TVE_SAMPLE_15_PLANAR_3D TVE_SAMPLE_15_STOCHASTIC_2D TVE_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_16_PLANAR_2D TVE_SAMPLE_16_PLANAR_3D TVE_SAMPLE_16_STOCHASTIC_2D TVE_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_PACKED_TEX
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#define THE_VEGETATION_ENGINE
			#define TVE_IS_STANDARD_PIPELINE
			#define TVE_IS_STANDARD_SHADER
			#define TVE_IS_PLANT_SHADER
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				float4 lmap : TEXCOORD2;
				#ifndef LIGHTMAP_ON
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						half3 sh : TEXCOORD3;
					#endif
				#else
					#ifdef DIRLIGHTMAP_OFF
						float4 lmapFadePos : TEXCOORD4;
					#endif
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float3 ase_normal : NORMAL;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef LIGHTMAP_ON
			float4 unity_LightmapFade;
			#endif
			fixed4 unity_Ambient;
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _render_cull;
			uniform half _render_coverage;
			uniform half _render_zw;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _IsStandardShader;
			uniform float _IsPlantShader;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform float _SubsurfaceDiffusion;
			uniform half _Cutoff;
			uniform float4 _MaxBoundsInfo;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderZWrite;
			uniform half _RenderClip;
			uniform half _RenderCull;
			uniform half _RenderQueue;
			uniform half _RenderPriority;
			uniform half _RenderMode;
			uniform half _CategoryRender;
			uniform half _RenderNormals;
			uniform half _MessageGlobalsVariation;
			uniform half _IsTVEShader;
			uniform half _HasOcclusion;
			uniform half _IsIdentifier;
			uniform half _IsCollected;
			uniform half _IsShared;
			uniform half _IsCustomShader;
			uniform half _HasGradient;
			uniform half _HasEmissive;
			uniform half _VertexVariationMode;
			uniform half _IsVersion;
			uniform half _RenderCoverage;
			uniform half _DetailTypeMode;
			uniform half _DetailOpaqueMode;
			uniform half _DetailCoordMode;
			uniform half _SpaceGlobalLocals;
			uniform half _SpaceSubsurface;
			uniform half _CategoryGlobals;
			uniform half _CategoryMain;
			uniform half _CategoryPerspective;
			uniform half _CategorySizeFade;
			uniform half _SpaceRenderFade;
			uniform half _RenderDirect;
			uniform half _RenderAmbient;
			uniform half _RenderShadow;
			uniform half _IsBlanketShader;
			uniform half4 _Color;
			uniform half _CategoryMotion;
			uniform half _MessageMotionVariation;
			uniform half4 _MainMaskRemap;
			uniform half4 _SecondMaskRemap;
			uniform half _CategoryDetail;
			uniform half _CategoryTerrain;
			uniform half _CategoryOcclusion;
			uniform half _CategoryGradient;
			uniform half _CategoryNoise;
			uniform half _CategoryRimLight;
			uniform half _CategoryMatcap;
			uniform half _CategorySubsurface;
			uniform half _CategoryEmissive;
			uniform half _SpaceGlobalLayers;
			uniform half _SpaceGlobalOptions;
			uniform half _SpaceMotionGlobals;
			uniform half _ColorsMaskMinValue;
			uniform half _ColorsMaskMaxValue;
			uniform half _DetailMeshInvertMode;
			uniform half _DetailMaskInvertMode;
			uniform half _MotionValue_31;
			uniform half _MotionValue_21;
			uniform half _MessageMainMask;
			uniform half _MessageSecondMask;
			uniform half4 _DetailBlendRemap;
			uniform half4 _DetailMeshRemap;
			uniform half4 _DetailMaskRemap;
			uniform half4 _VertexOcclusionRemap;
			uniform half4 _GradientMaskRemap;
			uniform half4 _NoiseMaskRemap;
			uniform half4 _RimLightRemap;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceAngleValue;
			uniform half _SubsurfaceScatteringValue;
			uniform half4 _EmissiveTexRemap;
			uniform half _EmissiveMode;
			uniform half _EmissiveIntensityValue;
			uniform half _EmissiveFlagMode;
			uniform half _EmissiveIntensityMode;
			uniform half _MessageSubsurface;
			uniform half _MessageOcclusion;
			uniform half _MessageTerrain;
			uniform half4 _TerrainBlendRemap;
			uniform half _TerrainTexMode;
			uniform half _TerrainBlendMode;
			uniform half _TerrainLayersMode;
			uniform half _LayerSampleMode1;
			uniform half _LayerSampleMode2;
			uniform half _LayerSampleMode3;
			uniform half _LayerSampleMode4;
			uniform half _LayerSampleMode5;
			uniform half _LayerSampleMode6;
			uniform half _LayerSampleMode7;
			uniform half _LayerSampleMode8;
			uniform half _LayerSampleMode9;
			uniform half _LayerSampleMode10;
			uniform half _LayerSampleMode11;
			uniform half _LayerSampleMode12;
			uniform half _LayerSampleMode13;
			uniform half _LayerSampleMode14;
			uniform half _LayerSampleMode15;
			uniform half _LayerSampleMode16;
			uniform half _VertexPivotMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(TVE_NoiseTex);
			uniform float3 TVE_WorldOrigin;
			uniform half _MotionPosition_10;
			uniform float _MotionScale_10;
			uniform half TVE_NoiseTexTilling;
			uniform half4 TVE_MotionParams;
			uniform half4 TVE_TimeParams;
			uniform float _MotionSpeed_10;
			uniform half _MotionVariation_10;
			uniform half _VertexDynamicMode;
			SamplerState sampler_Linear_Repeat;
			uniform half _LayerMotionValue;
			uniform float TVE_MotionUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_MotionTex);
			uniform half4 TVE_MotionCoords;
			SamplerState sampler_Linear_Clamp;
			uniform half4 TVE_WindEditor;
			uniform half _MotionAmplitude_10;
			uniform half TVE_MotionValue_10;
			uniform half _InteractionMaskValue;
			uniform half _InteractionAmplitude;
			uniform half _LayerVertexValue;
			uniform float TVE_VertexUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_VertexTex);
			uniform half4 TVE_VertexCoords;
			uniform half _VertexPositionMode;
			uniform half4 TVE_VertexParams;
			uniform half _GlobalOrientation;
			uniform half _MotionScale_20;
			uniform half _MotionVariation_20;
			uniform half _MotionSpeed_20;
			uniform half _MotionFacingValue;
			uniform half _MotionAmplitude_20;
			uniform half TVE_MotionValue_20;
			uniform half _MotionAmplitude_22;
			uniform float _MotionScale_32;
			uniform float _MotionVariation_32;
			uniform float _MotionSpeed_32;
			uniform half _MotionAmplitude_32;
			uniform half TVE_MotionFadeEnd;
			uniform half TVE_MotionFadeStart;
			uniform half TVE_MotionValue_30;
			uniform half _PerspectivePushValue;
			uniform half _PerspectiveNoiseValue;
			uniform half _PerspectiveAngleValue;
			uniform half _GlobalSize;
			uniform half TVE_DistanceFadeBias;
			uniform half _SizeFadeEndValue;
			uniform half _SizeFadeStartValue;
			uniform half _ConformOffsetMode;
			uniform half _ConformOffsetValue;
			uniform half _GlobalConform;
			uniform half TVE_IsEnabled;
			uniform half _DisableSRPBatcher;
			uniform float _TerrainBlendOffsetValue;
			uniform float _TerrainBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			uniform half4 _MainUVs;
			SamplerState sampler_MainAlbedoTex;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainMaskTex);
			uniform half _MainMaskMinValue;
			uniform half _MainMaskMaxValue;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_uvs_mode;
			uniform half4 _SecondUVs;
			uniform half _SecondUVsScaleMode;
			SamplerState sampler_SecondAlbedoTex;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half _SecondMaskMinValue;
			uniform half _SecondMaskMaxValue;
			uniform half _SecondColorMode;
			uniform half _DetailBlendMode;
			uniform half _DetailMaskMode;
			uniform half _DetailMaskMinValue;
			uniform half _DetailMaskMaxValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _DetailMeshMode;
			uniform half _DetailMeshMinValue;
			uniform half _DetailMeshMaxValue;
			uniform half _DetailBlendMinValue;
			uniform half _DetailBlendMaxValue;
			uniform half _DetailMode;
			uniform half _DetailValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMinValue;
			uniform half _GradientMaxValue;
			uniform half4 _VertexOcclusionColor;
			uniform half _VertexOcclusionMinValue;
			uniform half _VertexOcclusionMaxValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex1);
			uniform half4 _TerrainPosition;
			uniform half4 _TerrainSize;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex1);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _Coords1;
			uniform half4 _MaskMin1;
			uniform half4 _MaskMax1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex2);
			uniform half4 _Coords2;
			uniform half4 _MaskMin2;
			uniform half4 _MaskMax2;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex3);
			uniform half4 _Coords3;
			uniform half4 _MaskMin3;
			uniform half4 _MaskMax3;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex4);
			uniform half4 _Coords4;
			uniform half4 _MaskMin4;
			uniform half4 _MaskMax4;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex5);
			uniform half4 _Coords5;
			uniform half4 _MaskMin5;
			uniform half4 _MaskMax5;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex6);
			uniform half4 _Coords6;
			uniform half4 _MaskMin6;
			uniform half4 _MaskMax6;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex7);
			uniform half4 _Coords7;
			uniform half4 _MaskMin7;
			uniform half4 _MaskMax7;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex8);
			uniform half4 _Coords8;
			uniform half4 _MaskMin8;
			uniform half4 _MaskMax8;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex9);
			uniform half4 _Coords9;
			uniform half4 _MaskMin9;
			uniform half4 _MaskMax9;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex10);
			uniform half4 _Coords10;
			uniform half4 _MaskMin10;
			uniform half4 _MaskMax10;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex11);
			uniform half4 _Coords11;
			uniform half4 _MaskMin11;
			uniform half4 _MaskMax11;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex12);
			uniform half4 _Coords12;
			uniform half4 _MaskMin12;
			uniform half4 _MaskMax12;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex13);
			uniform half4 _Coords13;
			uniform half4 _MaskMin13;
			uniform half4 _MaskMax13;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex14);
			uniform half4 _Coords14;
			uniform half4 _MaskMin14;
			uniform half4 _MaskMax14;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex15);
			uniform half4 _Coords15;
			uniform half4 _MaskMin15;
			uniform half4 _MaskMax15;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex16);
			uniform half4 _Coords16;
			uniform half4 _MaskMin16;
			uniform half4 _MaskMax16;
			uniform half _TerrainHeightBlendValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex1);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex5);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex6);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex7);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex8);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex9);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex10);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex11);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex12);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex13);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex14);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex15);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex16);
			uniform half4 _TerrainColor;
			uniform half _DetailNormalValue;
			uniform half _SecondUVsMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _TerrainMode;
			uniform half _TerrainBlendMinValue;
			uniform half _TerrainBlendMaxValue;
			uniform half _LayerColorsValue;
			uniform float TVE_ColorsUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_ColorsTex);
			uniform half4 TVE_ColorsCoords;
			uniform half _ColorsPositionMode;
			uniform half4 TVE_ColorsParams;
			uniform half _ColorsIntensityValue;
			uniform half4 _Specular1;
			uniform half4 _Specular2;
			uniform half4 _Specular3;
			uniform half4 _Specular4;
			uniform half4 _Specular5;
			uniform half4 _Specular6;
			uniform half4 _Specular7;
			uniform half4 _Specular8;
			uniform half4 _Specular9;
			uniform half4 _Specular10;
			uniform half4 _Specular11;
			uniform half4 _Specular12;
			uniform half4 _Specular13;
			uniform half4 _Specular14;
			uniform half4 _Specular15;
			uniform half4 _Specular16;
			uniform half _GlobalColors;
			uniform half _ColorsVariationValue;
			uniform half _VertexOcclusionColorsMode;
			uniform half4 TVE_OverlayColor;
			uniform half _GlobalOverlay;
			uniform half _LayerExtrasValue;
			uniform float TVE_ExtrasUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_ExtrasTex);
			uniform half4 TVE_ExtrasCoords;
			uniform half _ExtrasPositionMode;
			uniform half4 TVE_ExtrasParams;
			uniform half _OverlayVariationValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex1);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex5);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex6);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex7);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex8);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex9);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex10);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex11);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex12);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex13);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex14);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex15);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex16);
			uniform half4 _Params1;
			uniform half4 _Params2;
			uniform half4 _Params3;
			uniform half4 _Params4;
			uniform half4 _Params5;
			uniform half4 _Params6;
			uniform half4 _Params7;
			uniform half4 _Params8;
			uniform half4 _Params9;
			uniform half4 _Params10;
			uniform half4 _Params11;
			uniform half4 _Params12;
			uniform half4 _Params13;
			uniform half4 _Params14;
			uniform half4 _Params15;
			uniform half4 _Params16;
			uniform half _TerrainNormalValue;
			uniform half _OverlayProjectionValue;
			uniform half _VertexOcclusionOverlayMode;
			uniform half TVE_WetnessContrast;
			uniform half _GlobalWetness;
			uniform half4 _MotionHighlightColor;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceValue;
			uniform half TVE_SubsurfaceValue;
			uniform half TVE_OverlaySubsurface;
			uniform half _SubsurfaceMaskValue;
			uniform half3 TVE_MainLightDirection;
			uniform half TVE_OverlayNormalValue;
			uniform half TVE_WetnessNormalValue;
			uniform half3 _render_normals;
			uniform half4 _EmissiveColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveTex);
			uniform half4 _EmissiveUVs;
			uniform half _EmissiveTexMinValue;
			uniform half _EmissiveTexMaxValue;
			uniform half _GlobalEmissive;
			uniform half _EmissivePhaseValue;
			uniform float _emissive_intensity_value;
			uniform half _RenderSpecular;
			uniform half _MainOcclusionValue;
			uniform half _SecondOcclusionValue;
			uniform half _TerrainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half _SecondSmoothnessValue;
			uniform half _TerrainSmoothnessValue;
			uniform half TVE_OverlaySmoothness;
			uniform half _DetailAlphaMode;
			uniform half _AlphaClipValue;
			uniform half _AlphaVariationValue;
			uniform half _DetailFadeMode;
			uniform half _GlobalAlpha;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xy + Coords.zw;
				ZY = WorldPosition.zy * Coords.xy + Coords.zw; 
				XY = WorldPosition.xy * Coords.xy + Coords.zw;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float3 VertexPosition3588_g84806 = v.vertex.xyz;
				float3 appendResult60_g84814 = (float3(v.ase_texcoord3.x , v.ase_texcoord3.z , v.ase_texcoord3.y));
				half3 Mesh_PivotsData2831_g84806 = ( appendResult60_g84814 * _VertexPivotMode );
				half3 Mesh_PivotsOS2291_g84806 = Mesh_PivotsData2831_g84806;
				float3 temp_output_2283_0_g84806 = ( VertexPosition3588_g84806 - Mesh_PivotsOS2291_g84806 );
				half3 VertexPos40_g84886 = temp_output_2283_0_g84806;
				half3 VertexPos40_g84887 = VertexPos40_g84886;
				float3 appendResult74_g84887 = (float3(VertexPos40_g84887.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g84887 = appendResult74_g84887;
				float3 break84_g84887 = VertexPos40_g84887;
				float3 appendResult81_g84887 = (float3(0.0 , break84_g84887.y , break84_g84887.z));
				half3 VertexPosOtherAxis82_g84887 = appendResult81_g84887;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag3890_g84806 = ase_worldPos;
				float3 WorldPosition3905_g84806 = vertexToFrag3890_g84806;
				float3 WorldPosition_Shifted7477_g84806 = ( WorldPosition3905_g84806 - TVE_WorldOrigin );
				float4x4 break19_g84843 = unity_ObjectToWorld;
				float3 appendResult20_g84843 = (float3(break19_g84843[ 0 ][ 3 ] , break19_g84843[ 1 ][ 3 ] , break19_g84843[ 2 ][ 3 ]));
				float3 temp_output_122_0_g84843 = Mesh_PivotsData2831_g84806;
				float3 PivotsOnly105_g84843 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g84843 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g84845 = ( appendResult20_g84843 + PivotsOnly105_g84843 );
				half3 WorldData19_g84845 = ase_worldPos;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84845 = WorldData19_g84845;
				#else
				float3 staticSwitch14_g84845 = ObjectData20_g84845;
				#endif
				float3 temp_output_114_0_g84843 = staticSwitch14_g84845;
				float3 vertexToFrag4224_g84806 = temp_output_114_0_g84843;
				float3 ObjectPosition4223_g84806 = vertexToFrag4224_g84806;
				float3 ObjectPosition_Shifted7481_g84806 = ( ObjectPosition4223_g84806 - TVE_WorldOrigin );
				float3 lerpResult6766_g84806 = lerp( WorldPosition_Shifted7477_g84806 , ObjectPosition_Shifted7481_g84806 , _MotionPosition_10);
				float3 Motion_10_Position6738_g84806 = lerpResult6766_g84806;
				half3 Input_Position419_g84851 = Motion_10_Position6738_g84806;
				float Input_MotionScale287_g84851 = ( _MotionScale_10 + 0.2 );
				half NoiseTex_Tilling735_g84851 = TVE_NoiseTexTilling;
				float2 temp_output_597_0_g84851 = (( Input_Position419_g84851 * Input_MotionScale287_g84851 * NoiseTex_Tilling735_g84851 * 0.0075 )).xz;
				float2 temp_output_447_0_g84811 = ((TVE_MotionParams).xy*2.0 + -1.0);
				half2 Global_Wind_DirectionWS4683_g84806 = temp_output_447_0_g84811;
				half2 Input_DirectionWS423_g84851 = Global_Wind_DirectionWS4683_g84806;
				float lerpResult128_g84852 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84851 = _MotionSpeed_10;
				half Input_MotionVariation284_g84851 = _MotionVariation_10;
				half3 Input_Position167_g84900 = ObjectPosition_Shifted7481_g84806;
				float dotResult156_g84900 = dot( (Input_Position167_g84900).xz , float2( 12.9898,78.233 ) );
				half Vertex_DynamicMode5112_g84806 = _VertexDynamicMode;
				half Input_DynamicMode120_g84900 = Vertex_DynamicMode5112_g84806;
				float Postion_Random162_g84900 = ( sin( dotResult156_g84900 ) * ( 1.0 - Input_DynamicMode120_g84900 ) );
				float Mesh_Variation16_g84806 = v.ase_color.r;
				half Input_Variation124_g84900 = Mesh_Variation16_g84806;
				half ObjectData20_g84902 = frac( ( Postion_Random162_g84900 + Input_Variation124_g84900 ) );
				half WorldData19_g84902 = Input_Variation124_g84900;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84902 = WorldData19_g84902;
				#else
				float staticSwitch14_g84902 = ObjectData20_g84902;
				#endif
				float temp_output_112_0_g84900 = staticSwitch14_g84902;
				float clampResult171_g84900 = clamp( temp_output_112_0_g84900 , 0.01 , 0.99 );
				float Global_MeshVariation5104_g84806 = clampResult171_g84900;
				half Input_GlobalMeshVariation569_g84851 = Global_MeshVariation5104_g84806;
				float temp_output_630_0_g84851 = ( ( ( lerpResult128_g84852 * Input_MotionSpeed62_g84851 ) + ( Input_MotionVariation284_g84851 * Input_GlobalMeshVariation569_g84851 ) ) * 0.03 );
				float temp_output_607_0_g84851 = frac( temp_output_630_0_g84851 );
				float4 lerpResult590_g84851 = lerp( SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( temp_output_597_0_g84851 + ( -Input_DirectionWS423_g84851 * temp_output_607_0_g84851 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( temp_output_597_0_g84851 + ( -Input_DirectionWS423_g84851 * frac( ( temp_output_630_0_g84851 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_607_0_g84851 - 0.5 ) ) / 0.5 ));
				half4 Noise_Complex703_g84851 = lerpResult590_g84851;
				float2 temp_output_645_0_g84851 = ((Noise_Complex703_g84851).rg*2.0 + -1.0);
				float2 break650_g84851 = temp_output_645_0_g84851;
				float3 appendResult649_g84851 = (float3(break650_g84851.x , 0.0 , break650_g84851.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Global_Noise_OS5548_g84806 = (( mul( unity_WorldToObject, float4( appendResult649_g84851 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_Noise_DirectionOS487_g84866 = Global_Noise_OS5548_g84806;
				float2 break448_g84811 = temp_output_447_0_g84811;
				float3 appendResult452_g84811 = (float3(break448_g84811.x , 0.0 , break448_g84811.y));
				half2 Global_Wind_DirectionOS5692_g84806 = (( mul( unity_WorldToObject, float4( appendResult452_g84811 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_Wind_DirectionOS458_g84866 = Global_Wind_DirectionOS5692_g84806;
				float temp_output_84_0_g84815 = _LayerMotionValue;
				float temp_output_19_0_g84819 = TVE_MotionUsage[(int)temp_output_84_0_g84815];
				float4 temp_output_91_19_g84815 = TVE_MotionCoords;
				half2 UV94_g84815 = ( (temp_output_91_19_g84815).zw + ( (temp_output_91_19_g84815).xy * (ObjectPosition4223_g84806).xz ) );
				float4 tex2DArrayNode50_g84815 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_MotionTex, sampler_Linear_Clamp, float3(UV94_g84815,temp_output_84_0_g84815), 0.0 );
				float4 temp_output_17_0_g84819 = tex2DArrayNode50_g84815;
				float4 temp_output_112_19_g84815 = TVE_MotionParams;
				float4 temp_output_3_0_g84819 = temp_output_112_19_g84815;
				float4 ifLocalVar18_g84819 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84819 >= 0.5 )
				ifLocalVar18_g84819 = temp_output_17_0_g84819;
				else
				ifLocalVar18_g84819 = temp_output_3_0_g84819;
				float4 lerpResult22_g84819 = lerp( temp_output_3_0_g84819 , temp_output_17_0_g84819 , temp_output_19_0_g84819);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84819 = lerpResult22_g84819;
				#else
				float4 staticSwitch24_g84819 = ifLocalVar18_g84819;
				#endif
				half4 Global_Motion_Params3909_g84806 = staticSwitch24_g84819;
				float4 break322_g84811 = Global_Motion_Params3909_g84806;
				float lerpResult457_g84811 = lerp( break322_g84811.z , TVE_WindEditor.z , TVE_WindEditor.w);
				float temp_output_459_0_g84811 = ( 1.0 - lerpResult457_g84811 );
				half Global_Wind_Power2223_g84806 = ( 1.0 - ( temp_output_459_0_g84811 * temp_output_459_0_g84811 ) );
				half Input_WindPower449_g84866 = Global_Wind_Power2223_g84806;
				float2 lerpResult516_g84866 = lerp( Input_Noise_DirectionOS487_g84866 , Input_Wind_DirectionOS458_g84866 , ( Input_WindPower449_g84866 * 0.6 ));
				half Mesh_Motion_107613_g84806 = v.ase_color.a;
				half Input_MeshHeight388_g84866 = Mesh_Motion_107613_g84806;
				half ObjectData20_g84867 = Input_MeshHeight388_g84866;
				float enc62_g84861 = v.ase_texcoord.w;
				float2 localDecodeFloatToVector262_g84861 = DecodeFloatToVector2( enc62_g84861 );
				float2 break63_g84861 = ( localDecodeFloatToVector262_g84861 * 100.0 );
				float Bounds_Height5230_g84806 = break63_g84861.x;
				half Input_BoundsHeight390_g84866 = Bounds_Height5230_g84806;
				half WorldData19_g84867 = ( Input_MeshHeight388_g84866 * Input_MeshHeight388_g84866 * Input_BoundsHeight390_g84866 );
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84867 = WorldData19_g84867;
				#else
				float staticSwitch14_g84867 = ObjectData20_g84867;
				#endif
				half Final_Motion10_Mask321_g84866 = ( staticSwitch14_g84867 * 2.0 );
				half Motion_10_Amplitude2258_g84806 = _MotionAmplitude_10;
				half Input_BendingAmplitude376_g84866 = Motion_10_Amplitude2258_g84806;
				half Global_MotionValue640_g84866 = TVE_MotionValue_10;
				half2 Final_Bending631_g84866 = ( lerpResult516_g84866 * ( Final_Motion10_Mask321_g84866 * Input_BendingAmplitude376_g84866 * Input_WindPower449_g84866 * Input_WindPower449_g84866 * Global_MotionValue640_g84866 ) );
				float2 appendResult433_g84811 = (float2(break322_g84811.x , break322_g84811.y));
				float2 temp_output_436_0_g84811 = (appendResult433_g84811*2.0 + -1.0);
				float2 break441_g84811 = temp_output_436_0_g84811;
				float3 appendResult440_g84811 = (float3(break441_g84811.x , 0.0 , break441_g84811.y));
				half2 Global_React_DirectionOS39_g84806 = (( mul( unity_WorldToObject, float4( appendResult440_g84811 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_React_DirectionOS358_g84866 = Global_React_DirectionOS39_g84806;
				float clampResult17_g84869 = clamp( Input_MeshHeight388_g84866 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84868 = 0.0;
				half Input_InteractionUseMask62_g84866 = _InteractionMaskValue;
				float temp_output_10_0_g84868 = ( Input_InteractionUseMask62_g84866 - temp_output_7_0_g84868 );
				half Final_InteractionRemap594_g84866 = saturate( ( ( clampResult17_g84869 - temp_output_7_0_g84868 ) / ( temp_output_10_0_g84868 + 0.0001 ) ) );
				half ObjectData20_g84870 = Final_InteractionRemap594_g84866;
				half WorldData19_g84870 = ( Final_InteractionRemap594_g84866 * Final_InteractionRemap594_g84866 * Input_BoundsHeight390_g84866 );
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84870 = WorldData19_g84870;
				#else
				float staticSwitch14_g84870 = ObjectData20_g84870;
				#endif
				half Final_InteractionMask373_g84866 = ( staticSwitch14_g84870 * 2.0 );
				half Interaction_Amplitude7501_g84806 = _InteractionAmplitude;
				half Input_InteractionAmplitude58_g84866 = Interaction_Amplitude7501_g84806;
				half2 Final_Interaction632_g84866 = ( Input_React_DirectionOS358_g84866 * Final_InteractionMask373_g84866 * Input_InteractionAmplitude58_g84866 );
				half Global_Interaction_Mask66_g84806 = ( break322_g84811.w * break322_g84811.w * break322_g84811.w * break322_g84811.w );
				float Input_InteractionGlobalMask330_g84866 = Global_Interaction_Mask66_g84806;
				half Final_InteractionValue525_g84866 = saturate( ( Input_InteractionAmplitude58_g84866 * Input_InteractionGlobalMask330_g84866 ) );
				float2 lerpResult551_g84866 = lerp( Final_Bending631_g84866 , Final_Interaction632_g84866 , Final_InteractionValue525_g84866);
				float2 break364_g84866 = lerpResult551_g84866;
				float3 appendResult638_g84866 = (float3(break364_g84866.x , 0.0 , break364_g84866.y));
				half3 Motion_10_Interaction7519_g84806 = appendResult638_g84866;
				float temp_output_84_0_g84835 = _LayerVertexValue;
				float temp_output_19_0_g84839 = TVE_VertexUsage[(int)temp_output_84_0_g84835];
				float4 temp_output_94_19_g84835 = TVE_VertexCoords;
				float3 lerpResult7575_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _VertexPositionMode);
				half2 UV97_g84835 = ( (temp_output_94_19_g84835).zw + ( (temp_output_94_19_g84835).xy * (lerpResult7575_g84806).xz ) );
				float4 tex2DArrayNode50_g84835 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_VertexTex, sampler_Linear_Clamp, float3(UV97_g84835,temp_output_84_0_g84835), 0.0 );
				float4 temp_output_17_0_g84839 = tex2DArrayNode50_g84835;
				float4 temp_output_111_19_g84835 = TVE_VertexParams;
				float4 temp_output_3_0_g84839 = temp_output_111_19_g84835;
				float4 ifLocalVar18_g84839 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84839 >= 0.5 )
				ifLocalVar18_g84839 = temp_output_17_0_g84839;
				else
				ifLocalVar18_g84839 = temp_output_3_0_g84839;
				float4 lerpResult22_g84839 = lerp( temp_output_3_0_g84839 , temp_output_17_0_g84839 , temp_output_19_0_g84839);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84839 = lerpResult22_g84839;
				#else
				float4 staticSwitch24_g84839 = ifLocalVar18_g84839;
				#endif
				half4 Global_Vertex_Params4173_g84806 = staticSwitch24_g84839;
				float4 break322_g84873 = Global_Vertex_Params4173_g84806;
				float2 appendResult355_g84873 = (float2(break322_g84873.x , break322_g84873.y));
				float2 temp_output_356_0_g84873 = (appendResult355_g84873*2.0 + -1.0);
				float2 break357_g84873 = temp_output_356_0_g84873;
				float3 appendResult361_g84873 = (float3(break357_g84873.x , 0.0 , break357_g84873.y));
				half2 Global_VertexOrientationOS7550_g84806 = (( mul( unity_WorldToObject, float4( appendResult361_g84873 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult7535_g84806 = lerp( float2( 0,0 ) , Global_VertexOrientationOS7550_g84806 , _GlobalOrientation);
				float2 break7552_g84806 = lerpResult7535_g84806;
				float3 appendResult7553_g84806 = (float3(break7552_g84806.x , 0.0 , break7552_g84806.y));
				half3 Vertex_Orientation7542_g84806 = appendResult7553_g84806;
				half3 Angle44_g84886 = ( Motion_10_Interaction7519_g84806 + Vertex_Orientation7542_g84806 );
				half Angle44_g84887 = (Angle44_g84886).z;
				half3 VertexPos40_g84888 = ( VertexPosRotationAxis50_g84887 + ( VertexPosOtherAxis82_g84887 * cos( Angle44_g84887 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g84887 ) * sin( Angle44_g84887 ) ) );
				float3 appendResult74_g84888 = (float3(0.0 , 0.0 , VertexPos40_g84888.z));
				half3 VertexPosRotationAxis50_g84888 = appendResult74_g84888;
				float3 break84_g84888 = VertexPos40_g84888;
				float3 appendResult81_g84888 = (float3(break84_g84888.x , break84_g84888.y , 0.0));
				half3 VertexPosOtherAxis82_g84888 = appendResult81_g84888;
				half Angle44_g84888 = -(Angle44_g84886).x;
				half3 Input_Position419_g84859 = WorldPosition_Shifted7477_g84806;
				float3 break459_g84859 = Input_Position419_g84859;
				float Sum_Position446_g84859 = ( break459_g84859.x + break459_g84859.y + break459_g84859.z );
				half Input_MotionScale321_g84859 = ( _MotionScale_20 * 0.1 );
				half Input_MotionVariation330_g84859 = _MotionVariation_20;
				half Input_GlobalVariation400_g84859 = Global_MeshVariation5104_g84806;
				float lerpResult128_g84860 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84859 = _MotionSpeed_20;
				float temp_output_404_0_g84859 = ( lerpResult128_g84860 * Input_MotionSpeed62_g84859 );
				half Motion_SineA450_g84859 = sin( ( ( Sum_Position446_g84859 * Input_MotionScale321_g84859 ) + ( Input_MotionVariation330_g84859 * Input_GlobalVariation400_g84859 ) + temp_output_404_0_g84859 ) );
				half Motion_SineB395_g84859 = sin( ( ( temp_output_404_0_g84859 * 0.6842 ) + ( Sum_Position446_g84859 * Input_MotionScale321_g84859 ) ) );
				half3 Input_Position419_g84898 = VertexPosition3588_g84806;
				float3 normalizeResult518_g84898 = normalize( Input_Position419_g84898 );
				half2 Input_DirectionOS423_g84898 = Global_React_DirectionOS39_g84806;
				float2 break521_g84898 = -Input_DirectionOS423_g84898;
				float3 appendResult522_g84898 = (float3(break521_g84898.x , 0.0 , break521_g84898.y));
				float dotResult519_g84898 = dot( normalizeResult518_g84898 , appendResult522_g84898 );
				half Input_Value62_g84898 = _MotionFacingValue;
				float lerpResult524_g84898 = lerp( 1.0 , (dotResult519_g84898*0.5 + 0.5) , Input_Value62_g84898);
				half ObjectData20_g84899 = max( lerpResult524_g84898 , 0.001 );
				half WorldData19_g84899 = 1.0;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84899 = WorldData19_g84899;
				#else
				float staticSwitch14_g84899 = ObjectData20_g84899;
				#endif
				half Motion_FacingMask5214_g84806 = staticSwitch14_g84899;
				half Motion_20_Amplitude4381_g84806 = Motion_FacingMask5214_g84806;
				half Input_MotionAmplitude384_g84859 = Motion_20_Amplitude4381_g84806;
				half Input_GlobalWind407_g84859 = Global_Wind_Power2223_g84806;
				float4 break638_g84851 = abs( Noise_Complex703_g84851 );
				half Global_Noise_B5526_g84806 = break638_g84851.b;
				half Input_GlobalNoise411_g84859 = Global_Noise_B5526_g84806;
				float lerpResult413_g84859 = lerp( 1.8 , 0.4 , Input_GlobalWind407_g84859);
				half Motion_Amplitude418_g84859 = ( Input_MotionAmplitude384_g84859 * Input_GlobalWind407_g84859 * pow( Input_GlobalNoise411_g84859 , lerpResult413_g84859 ) );
				half Input_Squash58_g84859 = _MotionAmplitude_20;
				float enc59_g84861 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector259_g84861 = DecodeFloatToVector2( enc59_g84861 );
				float2 break61_g84861 = localDecodeFloatToVector259_g84861;
				half Mesh_Motion_2060_g84806 = break61_g84861.x;
				half Input_MeshMotion_20388_g84859 = Mesh_Motion_2060_g84806;
				float Bounds_Radius5231_g84806 = break63_g84861.y;
				half Input_BoundsRadius390_g84859 = Bounds_Radius5231_g84806;
				half Global_MotionValue462_g84859 = TVE_MotionValue_20;
				half2 Input_DirectionOS366_g84859 = Global_React_DirectionOS39_g84806;
				float2 break371_g84859 = Input_DirectionOS366_g84859;
				float3 appendResult372_g84859 = (float3(break371_g84859.x , ( Motion_SineA450_g84859 * 0.3 ) , break371_g84859.y));
				half3 Motion_20_Squash4418_g84806 = ( ( (max( Motion_SineA450_g84859 , Motion_SineB395_g84859 )*0.5 + 0.5) * Motion_Amplitude418_g84859 * Input_Squash58_g84859 * Input_MeshMotion_20388_g84859 * Input_BoundsRadius390_g84859 * Global_MotionValue462_g84859 ) * appendResult372_g84859 );
				half3 VertexPos40_g84876 = ( ( VertexPosRotationAxis50_g84888 + ( VertexPosOtherAxis82_g84888 * cos( Angle44_g84888 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g84888 ) * sin( Angle44_g84888 ) ) ) + Motion_20_Squash4418_g84806 );
				float3 appendResult74_g84876 = (float3(0.0 , VertexPos40_g84876.y , 0.0));
				float3 VertexPosRotationAxis50_g84876 = appendResult74_g84876;
				float3 break84_g84876 = VertexPos40_g84876;
				float3 appendResult81_g84876 = (float3(break84_g84876.x , 0.0 , break84_g84876.z));
				float3 VertexPosOtherAxis82_g84876 = appendResult81_g84876;
				half Input_Rolling379_g84859 = _MotionAmplitude_22;
				half Motion_20_Rolling5257_g84806 = ( Motion_SineA450_g84859 * Motion_Amplitude418_g84859 * Input_Rolling379_g84859 * Input_MeshMotion_20388_g84859 * Global_MotionValue462_g84859 );
				half Angle44_g84876 = Motion_20_Rolling5257_g84806;
				half3 Input_Position500_g84855 = WorldPosition_Shifted7477_g84806;
				half Input_MotionScale321_g84855 = _MotionScale_32;
				half Input_MotionVariation330_g84855 = _MotionVariation_32;
				half Input_GlobalVariation372_g84855 = Global_MeshVariation5104_g84806;
				float lerpResult128_g84856 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84855 = _MotionSpeed_32;
				float4 tex2DNode460_g84855 = SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g84855).xz * Input_MotionScale321_g84855 * 0.03 ) + ( Input_MotionVariation330_g84855 * Input_GlobalVariation372_g84855 ) + ( lerpResult128_g84856 * Input_MotionSpeed62_g84855 * 0.02 ) ), 0.0 );
				float3 appendResult462_g84855 = (float3(tex2DNode460_g84855.r , tex2DNode460_g84855.g , tex2DNode460_g84855.b));
				half3 Flutter_Texture489_g84855 = (appendResult462_g84855*2.0 + -1.0);
				float temp_output_7_0_g84841 = TVE_MotionFadeEnd;
				float temp_output_10_0_g84841 = ( TVE_MotionFadeStart - temp_output_7_0_g84841 );
				half Motion_FadeOut4005_g84806 = saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g84841 ) / ( temp_output_10_0_g84841 + 0.0001 ) ) );
				half Motion_30_Amplitude4960_g84806 = ( _MotionAmplitude_32 * Motion_FacingMask5214_g84806 * Motion_FadeOut4005_g84806 );
				half Input_MotionAmplitude58_g84855 = Motion_30_Amplitude4960_g84806;
				half Mesh_Motion_30144_g84806 = break61_g84861.y;
				half Input_MeshMotion_30374_g84855 = Mesh_Motion_30144_g84806;
				half Input_GlobalWind471_g84855 = Global_Wind_Power2223_g84806;
				half Global_MotionValue503_g84855 = TVE_MotionValue_30;
				half Input_GlobalNoise472_g84855 = Global_Noise_B5526_g84806;
				float lerpResult466_g84855 = lerp( 2.4 , 0.6 , Input_GlobalWind471_g84855);
				half Flutter_Amplitude491_g84855 = ( Input_MotionAmplitude58_g84855 * Input_MeshMotion_30374_g84855 * Input_GlobalWind471_g84855 * Global_MotionValue503_g84855 * pow( Input_GlobalNoise472_g84855 , lerpResult466_g84855 ) );
				half3 Motion_30_Flutter263_g84806 = ( Flutter_Texture489_g84855 * Flutter_Amplitude491_g84855 );
				float3 Vertex_Motion_Object833_g84806 = ( ( VertexPosRotationAxis50_g84876 + ( VertexPosOtherAxis82_g84876 * cos( Angle44_g84876 ) ) + ( cross( float3(0,1,0) , VertexPosOtherAxis82_g84876 ) * sin( Angle44_g84876 ) ) ) + Motion_30_Flutter263_g84806 );
				half3 ObjectData20_g84877 = Vertex_Motion_Object833_g84806;
				float3 temp_output_3474_0_g84806 = ( VertexPosition3588_g84806 - Mesh_PivotsOS2291_g84806 );
				float3 Vertex_Motion_World1118_g84806 = ( ( ( temp_output_3474_0_g84806 + ( Motion_10_Interaction7519_g84806 + Vertex_Orientation7542_g84806 ) ) + Motion_20_Squash4418_g84806 ) + Motion_30_Flutter263_g84806 );
				half3 WorldData19_g84877 = Vertex_Motion_World1118_g84806;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84877 = WorldData19_g84877;
				#else
				float3 staticSwitch14_g84877 = ObjectData20_g84877;
				#endif
				float3 temp_output_7495_0_g84806 = staticSwitch14_g84877;
				float3 Vertex_Motion7493_g84806 = temp_output_7495_0_g84806;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = normalize(ase_worldViewDir);
				float3 normalizeResult2169_g84806 = normalize( ase_worldViewDir );
				float3 ViewDirection3963_g84806 = normalizeResult2169_g84806;
				float3 break2709_g84806 = cross( ViewDirection3963_g84806 , half3(0,1,0) );
				float3 appendResult2710_g84806 = (float3(-break2709_g84806.z , 0.0 , break2709_g84806.x));
				float3 appendResult2667_g84806 = (float3(Global_MeshVariation5104_g84806 , 0.5 , Global_MeshVariation5104_g84806));
				half Mesh_Height1524_g84806 = v.ase_color.a;
				float dotResult2212_g84806 = dot( ViewDirection3963_g84806 , float3(0,1,0) );
				half Mask_HView2656_g84806 = dotResult2212_g84806;
				float saferPower2652_g84806 = abs( Mask_HView2656_g84806 );
				half3 Grass_Perspective2661_g84806 = ( ( ( mul( unity_WorldToObject, float4( appendResult2710_g84806 , 0.0 ) ).xyz * _PerspectivePushValue ) + ( (appendResult2667_g84806*2.0 + -1.0) * _PerspectiveNoiseValue ) ) * Mesh_Height1524_g84806 * pow( saferPower2652_g84806 , _PerspectiveAngleValue ) );
				half Global_VertexSize174_g84806 = saturate( break322_g84873.w );
				float lerpResult346_g84806 = lerp( 1.0 , Global_VertexSize174_g84806 , _GlobalSize);
				float3 appendResult3480_g84806 = (float3(lerpResult346_g84806 , lerpResult346_g84806 , lerpResult346_g84806));
				half3 ObjectData20_g84880 = appendResult3480_g84806;
				half3 _Vector11 = half3(1,1,1);
				half3 WorldData19_g84880 = _Vector11;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84880 = WorldData19_g84880;
				#else
				float3 staticSwitch14_g84880 = ObjectData20_g84880;
				#endif
				half3 Vertex_Size1741_g84806 = staticSwitch14_g84880;
				float temp_output_7_0_g84881 = _SizeFadeEndValue;
				float temp_output_10_0_g84881 = ( _SizeFadeStartValue - temp_output_7_0_g84881 );
				float temp_output_7453_0_g84806 = saturate( ( ( ( distance( _WorldSpaceCameraPos , ObjectPosition4223_g84806 ) * ( 1.0 / TVE_DistanceFadeBias ) ) - temp_output_7_0_g84881 ) / ( temp_output_10_0_g84881 + 0.0001 ) ) );
				float3 appendResult3482_g84806 = (float3(temp_output_7453_0_g84806 , temp_output_7453_0_g84806 , temp_output_7453_0_g84806));
				half3 ObjectData20_g84879 = appendResult3482_g84806;
				half3 _Vector5 = half3(1,1,1);
				half3 WorldData19_g84879 = _Vector5;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84879 = WorldData19_g84879;
				#else
				float3 staticSwitch14_g84879 = ObjectData20_g84879;
				#endif
				float3 Vertex_SizeFade1740_g84806 = staticSwitch14_g84879;
				half Global_VertexOffset7549_g84806 = break322_g84873.z;
				float3 ase_objectScale = float3( length( unity_ObjectToWorld[ 0 ].xyz ), length( unity_ObjectToWorld[ 1 ].xyz ), length( unity_ObjectToWorld[ 2 ].xyz ) );
				float3 appendResult7547_g84806 = (float3(0.0 , ( ( ( ( Global_VertexOffset7549_g84806 - ( (ObjectPosition_Shifted7481_g84806).y * _ConformOffsetMode ) ) + _ConformOffsetValue ) / ase_objectScale.y ) * _GlobalConform ) , 0.0));
				half3 Vertex_Offset7544_g84806 = appendResult7547_g84806;
				float3 lerpResult16_g84882 = lerp( VertexPosition3588_g84806 , ( ( ( Vertex_Motion7493_g84806 + Grass_Perspective2661_g84806 ) * Vertex_Size1741_g84806 * Vertex_SizeFade1740_g84806 ) + Mesh_PivotsOS2291_g84806 + Vertex_Offset7544_g84806 ) , TVE_IsEnabled);
				float3 temp_output_4912_0_g84806 = lerpResult16_g84882;
				float3 Final_VertexPosition890_g84806 = ( temp_output_4912_0_g84806 + _DisableSRPBatcher );
				
				half2 Global_VertexOrientationWS7551_g84806 = temp_output_356_0_g84873;
				float2 break7779_g84806 = Global_VertexOrientationWS7551_g84806;
				float dotResult8067_g84806 = dot( Global_VertexOrientationWS7551_g84806 , Global_VertexOrientationWS7551_g84806 );
				float3 appendResult7781_g84806 = (float3(break7779_g84806.x , sqrt( ( 1.0 - saturate( dotResult8067_g84806 ) ) ) , break7779_g84806.y));
				float3 normalizeResult8063_g84806 = normalize( appendResult7781_g84806 );
				float3 worldToObjDir7782_g84806 = ASESafeNormalize( mul( unity_WorldToObject, float4( normalizeResult8063_g84806, 0 ) ).xyz );
				half Terrain_Blend_Offset8086_g84806 = _TerrainBlendOffsetValue;
				half Terrain_Mask_Vertex8085_g84806 = saturate( ( ( Global_VertexOffset7549_g84806 + ( Terrain_Blend_Offset8086_g84806 * _TerrainBlendNormalValue ) ) - (WorldPosition_Shifted7477_g84806).y ) );
				float3 lerpResult7784_g84806 = lerp( v.normal , worldToObjDir7782_g84806 , Terrain_Mask_Vertex8085_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7896_g84806 = lerpResult7784_g84806;
				#else
				float3 staticSwitch7896_g84806 = v.normal;
				#endif
				
				float4 break33_g84872 = _second_uvs_mode;
				float2 temp_output_30_0_g84872 = ( v.ase_texcoord.xy * break33_g84872.x );
				float2 appendResult21_g84861 = (float2(v.texcoord1.xyzw.z , v.texcoord1.xyzw.w));
				float2 Mesh_DetailCoord3_g84806 = appendResult21_g84861;
				float2 temp_output_29_0_g84872 = ( Mesh_DetailCoord3_g84806 * break33_g84872.y );
				float2 temp_output_31_0_g84872 = ( (WorldPosition_Shifted7477_g84806).xz * break33_g84872.z );
				half2 Second_UVs_Tilling7656_g84806 = (_SecondUVs).xy;
				half2 Second_UVs_Scale7664_g84806 = ( 1.0 / Second_UVs_Tilling7656_g84806 );
				float2 lerpResult7660_g84806 = lerp( Second_UVs_Tilling7656_g84806 , Second_UVs_Scale7664_g84806 , _SecondUVsScaleMode);
				half2 Second_UVs_Offset7657_g84806 = (_SecondUVs).zw;
				float2 vertexToFrag11_g84871 = ( ( ( temp_output_30_0_g84872 + temp_output_29_0_g84872 + temp_output_31_0_g84872 ) * lerpResult7660_g84806 ) + Second_UVs_Offset7657_g84806 );
				o.ase_texcoord9.xy = vertexToFrag11_g84871;
				float vertexToFrag11_g84941 = saturate( ( ( Global_VertexOffset7549_g84806 + Terrain_Blend_Offset8086_g84806 ) - (WorldPosition_Shifted7477_g84806).y ) );
				o.ase_texcoord9.z = vertexToFrag11_g84941;
				o.ase_texcoord10.xyz = vertexToFrag3890_g84806;
				o.ase_texcoord11.xyz = vertexToFrag4224_g84806;
				half Global_Noise_A4860_g84806 = break638_g84851.a;
				half Tint_Highlight_Value3231_g84806 = ( Global_Noise_A4860_g84806 * Global_Wind_Power2223_g84806 * Motion_FadeOut4005_g84806 * Mesh_Height1524_g84806 );
				float vertexToFrag11_g84914 = Tint_Highlight_Value3231_g84806;
				o.ase_texcoord9.w = vertexToFrag11_g84914;
				
				o.ase_texcoord8 = v.ase_texcoord;
				o.ase_color = v.ase_color;
				o.ase_normal = v.normal;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.w = 0;
				o.ase_texcoord11.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = Final_VertexPosition890_g84806;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = staticSwitch7896_g84806;
				v.tangent = v.tangent;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#ifdef DYNAMICLIGHTMAP_ON
					o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#else
					o.lmap.zw = 0;
				#endif
				#ifdef LIGHTMAP_ON
					o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#ifdef DIRLIGHTMAP_OFF
						o.lmapFadePos.xyz = (mul(unity_ObjectToWorld, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;
						o.lmapFadePos.w = (-UnityObjectToViewPos(v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);
					#endif
				#else
					o.lmap.xy = 0;
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						o.sh = 0;
						o.sh = ShadeSHPerVertex (worldNormal, o.sh);
					#endif
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			void frag (v2f IN , bool ase_vface : SV_IsFrontFace
				, out half4 outGBuffer0 : SV_Target0
				, out half4 outGBuffer1 : SV_Target1
				, out half4 outGBuffer2 : SV_Target2
				, out half4 outEmission : SV_Target3
				#if defined(SHADOWS_SHADOWMASK) && (UNITY_ALLOWED_MRT_COUNT > 4)
				, out half4 outShadowMask : SV_Target4
				#endif
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
			)
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				half atten = 1;

				half2 Main_UVs15_g84806 = ( ( IN.ase_texcoord8.xy * (_MainUVs).xy ) + (_MainUVs).zw );
				float4 tex2DNode29_g84806 = SAMPLE_TEXTURE2D( _MainAlbedoTex, sampler_MainAlbedoTex, Main_UVs15_g84806 );
				float3 lerpResult6223_g84806 = lerp( float3( 1,1,1 ) , (tex2DNode29_g84806).rgb , _MainAlbedoValue);
				float4 tex2DNode35_g84806 = SAMPLE_TEXTURE2D( _MainMaskTex, sampler_Linear_Repeat, Main_UVs15_g84806 );
				half Main_Mask57_g84806 = tex2DNode35_g84806.b;
				float clampResult17_g84892 = clamp( Main_Mask57_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84893 = _MainMaskMinValue;
				float temp_output_10_0_g84893 = ( _MainMaskMaxValue - temp_output_7_0_g84893 );
				half Main_Mask_Remap5765_g84806 = saturate( ( ( clampResult17_g84892 - temp_output_7_0_g84893 ) / ( temp_output_10_0_g84893 + 0.0001 ) ) );
				float lerpResult8007_g84806 = lerp( 1.0 , Main_Mask_Remap5765_g84806 , _MainColorMode);
				float4 lerpResult7986_g84806 = lerp( _MainColorTwo , _MainColor , lerpResult8007_g84806);
				half3 Main_Color_RGB7994_g84806 = (lerpResult7986_g84806).rgb;
				half3 Main_Albedo99_g84806 = ( lerpResult6223_g84806 * Main_Color_RGB7994_g84806 );
				float2 vertexToFrag11_g84871 = IN.ase_texcoord9.xy;
				half2 Second_UVs17_g84806 = vertexToFrag11_g84871;
				float4 tex2DNode89_g84806 = SAMPLE_TEXTURE2D( _SecondAlbedoTex, sampler_SecondAlbedoTex, Second_UVs17_g84806 );
				float3 lerpResult6225_g84806 = lerp( float3( 1,1,1 ) , (tex2DNode89_g84806).rgb , _SecondAlbedoValue);
				float4 tex2DNode33_g84806 = SAMPLE_TEXTURE2D( _SecondMaskTex, sampler_Linear_Repeat, Second_UVs17_g84806 );
				half Second_Mask81_g84806 = tex2DNode33_g84806.b;
				float clampResult17_g84895 = clamp( Second_Mask81_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84896 = _SecondMaskMinValue;
				float temp_output_10_0_g84896 = ( _SecondMaskMaxValue - temp_output_7_0_g84896 );
				half Second_Mask_Remap6130_g84806 = saturate( ( ( clampResult17_g84895 - temp_output_7_0_g84896 ) / ( temp_output_10_0_g84896 + 0.0001 ) ) );
				float lerpResult8008_g84806 = lerp( 1.0 , Second_Mask_Remap6130_g84806 , _SecondColorMode);
				float4 lerpResult7997_g84806 = lerp( _SecondColorTwo , _SecondColor , lerpResult8008_g84806);
				half3 Second_Color_RGB8005_g84806 = (lerpResult7997_g84806).rgb;
				half3 Second_Albedo153_g84806 = ( lerpResult6225_g84806 * Second_Color_RGB8005_g84806 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g84905 = 2.0;
				#else
				float staticSwitch1_g84905 = 4.594794;
				#endif
				float3 lerpResult4834_g84806 = lerp( ( Main_Albedo99_g84806 * Second_Albedo153_g84806 * staticSwitch1_g84905 ) , Second_Albedo153_g84806 , _DetailBlendMode);
				float lerpResult6885_g84806 = lerp( Main_Mask57_g84806 , Second_Mask81_g84806 , _DetailMaskMode);
				float clampResult17_g84911 = clamp( lerpResult6885_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84910 = _DetailMaskMinValue;
				float temp_output_10_0_g84910 = ( _DetailMaskMaxValue - temp_output_7_0_g84910 );
				half Detail_Mask_Texture6794_g84806 = saturate( ( ( clampResult17_g84911 - temp_output_7_0_g84910 ) / ( temp_output_10_0_g84910 + 0.0001 ) ) );
				half Mesh_DetailMask90_g84806 = IN.ase_color.b;
				half4 Normal_Packed45_g84891 = SAMPLE_TEXTURE2D( _MainNormalTex, sampler_Linear_Repeat, Main_UVs15_g84806 );
				float2 appendResult58_g84891 = (float2(( (Normal_Packed45_g84891).x * (Normal_Packed45_g84891).w ) , (Normal_Packed45_g84891).y));
				half2 Normal_Default50_g84891 = appendResult58_g84891;
				half2 Normal_ASTC41_g84891 = (Normal_Packed45_g84891).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g84891 = Normal_ASTC41_g84891;
				#else
				float2 staticSwitch38_g84891 = Normal_Default50_g84891;
				#endif
				half2 Normal_NO_DTX544_g84891 = (Normal_Packed45_g84891).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g84891 = Normal_NO_DTX544_g84891;
				#else
				float2 staticSwitch37_g84891 = staticSwitch38_g84891;
				#endif
				float2 temp_output_6555_0_g84806 = ( (staticSwitch37_g84891*2.0 + -1.0) * _MainNormalValue );
				float3 appendResult7388_g84806 = (float3(temp_output_6555_0_g84806 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal7389_g84806 = appendResult7388_g84806;
				float3 worldNormal7389_g84806 = float3(dot(tanToWorld0,tanNormal7389_g84806), dot(tanToWorld1,tanNormal7389_g84806), dot(tanToWorld2,tanNormal7389_g84806));
				half3 Main_NormalWS7390_g84806 = worldNormal7389_g84806;
				float lerpResult6884_g84806 = lerp( Mesh_DetailMask90_g84806 , ((Main_NormalWS7390_g84806).y*0.5 + 0.5) , _DetailMeshMode);
				float clampResult17_g84909 = clamp( lerpResult6884_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84908 = _DetailMeshMinValue;
				float temp_output_10_0_g84908 = ( _DetailMeshMaxValue - temp_output_7_0_g84908 );
				half Detail_Mask_Surface1540_g84806 = saturate( ( ( clampResult17_g84909 - temp_output_7_0_g84908 ) / ( temp_output_10_0_g84908 + 0.0001 ) ) );
				float clampResult17_g84912 = clamp( ( Detail_Mask_Texture6794_g84806 * Detail_Mask_Surface1540_g84806 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g84913 = _DetailBlendMinValue;
				float temp_output_10_0_g84913 = ( _DetailBlendMaxValue - temp_output_7_0_g84913 );
				half Detail_Mask147_g84806 = ( saturate( ( ( clampResult17_g84912 - temp_output_7_0_g84913 ) / ( temp_output_10_0_g84913 + 0.0001 ) ) ) * _DetailMode * _DetailValue );
				float3 lerpResult235_g84806 = lerp( Main_Albedo99_g84806 , lerpResult4834_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float3 staticSwitch255_g84806 = lerpResult235_g84806;
				#else
				float3 staticSwitch255_g84806 = Main_Albedo99_g84806;
				#endif
				half3 Blend_Albedo_Detail265_g84806 = staticSwitch255_g84806;
				half Mesh_Height1524_g84806 = IN.ase_color.a;
				float temp_output_7_0_g84916 = _GradientMinValue;
				float temp_output_10_0_g84916 = ( _GradientMaxValue - temp_output_7_0_g84916 );
				half Tint_Gradient_Value2784_g84806 = saturate( ( ( Mesh_Height1524_g84806 - temp_output_7_0_g84916 ) / ( temp_output_10_0_g84916 + 0.0001 ) ) );
				float3 lerpResult2779_g84806 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Tint_Gradient_Value2784_g84806);
				float lerpResult6617_g84806 = lerp( Main_Mask_Remap5765_g84806 , Second_Mask_Remap6130_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch6623_g84806 = lerpResult6617_g84806;
				#else
				float staticSwitch6623_g84806 = Main_Mask_Remap5765_g84806;
				#endif
				half Blend_MaskRemap_Detail6621_g84806 = staticSwitch6623_g84806;
				half Tint_Gradient_Mask6207_g84806 = Blend_MaskRemap_Detail6621_g84806;
				float3 lerpResult6208_g84806 = lerp( float3( 1,1,1 ) , lerpResult2779_g84806 , Tint_Gradient_Mask6207_g84806);
				half3 Tint_Gradient_Color5769_g84806 = lerpResult6208_g84806;
				half3 Tint_Noise_Color5770_g84806 = float3(1,1,1);
				half3 Tint_User_Color7335_g84806 = float3(1,1,1);
				float Mesh_Occlusion318_g84806 = IN.ase_color.g;
				float clampResult17_g84915 = clamp( Mesh_Occlusion318_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84917 = _VertexOcclusionMinValue;
				float temp_output_10_0_g84917 = ( _VertexOcclusionMaxValue - temp_output_7_0_g84917 );
				half Occlusion_Mask6432_g84806 = saturate( ( ( clampResult17_g84915 - temp_output_7_0_g84917 ) / ( temp_output_10_0_g84917 + 0.0001 ) ) );
				float3 lerpResult2945_g84806 = lerp( (_VertexOcclusionColor).rgb , float3( 1,1,1 ) , Occlusion_Mask6432_g84806);
				half3 Occlusion_Color648_g84806 = lerpResult2945_g84806;
				half3 Matcap_Color7428_g84806 = half3(0,0,0);
				half3 Blend_Albedo_Tinted2808_g84806 = ( ( Blend_Albedo_Detail265_g84806 * Tint_Gradient_Color5769_g84806 * Tint_Noise_Color5770_g84806 * Tint_User_Color7335_g84806 * Occlusion_Color648_g84806 ) + Matcap_Color7428_g84806 );
				float localHeightBasedBlending7362_g84942 = ( 0.0 );
				float4 appendResult9125_g84942 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g85039 = appendResult9125_g84942;
				float2 InputScale48_g85039 = (temp_output_35_0_g85039).zw;
				half2 FinalScale53_g85039 = ( 1.0 / InputScale48_g85039 );
				float2 InputPosition52_g85039 = (temp_output_35_0_g85039).xy;
				half2 FinalPosition58_g85039 = -( FinalScale53_g85039 * InputPosition52_g85039 );
				float2 Terrain_Control_UV7873_g84942 = ( ( (worldPos).xz * FinalScale53_g85039 ) + FinalPosition58_g85039 );
				half4 Terrain_Control_047365_g84942 = SAMPLE_TEXTURE2D( _ControlTex1, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_047362_g84942 = Terrain_Control_047365_g84942;
				half4 Terrain_Control_087366_g84942 = SAMPLE_TEXTURE2D( _ControlTex2, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_087362_g84942 = Terrain_Control_087366_g84942;
				half4 Terrain_Control_127712_g84942 = SAMPLE_TEXTURE2D( _ControlTex3, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_127362_g84942 = Terrain_Control_127712_g84942;
				half4 Terrain_Control_167711_g84942 = SAMPLE_TEXTURE2D( _ControlTex4, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_167362_g84942 = Terrain_Control_167711_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84995) = _MaskTex1;
				SamplerState Sampler238_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_016785_g84942 = _Coords1;
				float4 temp_output_37_0_g84995 = Input_Coords_016785_g84942;
				half4 Coords238_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition238_g84995 = worldPos;
				half4 localSamplePlanar2D238_g84995 = SamplePlanar2D( Texture238_g84995 , Sampler238_g84995 , Coords238_g84995 , WorldPosition238_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84995) = _MaskTex1;
				SamplerState Sampler246_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition246_g84995 = worldPos;
				half3 WorldNormal246_g84995 = WorldNormal;
				half4 localSamplePlanar3D246_g84995 = SamplePlanar3D( Texture246_g84995 , Sampler246_g84995 , Coords246_g84995 , WorldPosition246_g84995 , WorldNormal246_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84995) = _MaskTex1;
				SamplerState Sampler234_g84995 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84995 = temp_output_37_0_g84995;
				float3 WorldPosition234_g84995 = worldPos;
				float4 localSampleStochastic2D234_g84995 = SampleStochastic2D( Texture234_g84995 , Sampler234_g84995 , Coords234_g84995 , WorldPosition234_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84995) = _MaskTex1;
				SamplerState Sampler263_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition263_g84995 = worldPos;
				half3 WorldNormal263_g84995 = WorldNormal;
				half4 localSampleStochastic3D263_g84995 = SampleStochastic3D( Texture263_g84995 , Sampler263_g84995 , Coords263_g84995 , WorldPosition263_g84995 , WorldNormal263_g84995 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8639_g84942 = localSamplePlanar2D238_g84995;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8639_g84942 = localSamplePlanar3D246_g84995;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8639_g84942 = localSampleStochastic2D234_g84995;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8639_g84942 = localSampleStochastic3D263_g84995;
				#else
				float4 staticSwitch8639_g84942 = localSamplePlanar2D238_g84995;
				#endif
				float4 temp_output_7_0_g84944 = _MaskMin1;
				float4 temp_output_10_0_g84944 = ( _MaskMax1 - temp_output_7_0_g84944 );
				float4 temp_output_6970_0_g84942 = saturate( ( ( staticSwitch8639_g84942 - temp_output_7_0_g84944 ) / ( temp_output_10_0_g84944 + 0.0001 ) ) );
				half4 Masks_015_g84952 = temp_output_6970_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84996) = _MaskTex2;
				SamplerState Sampler238_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_026787_g84942 = _Coords2;
				float4 temp_output_37_0_g84996 = Input_Coords_026787_g84942;
				half4 Coords238_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition238_g84996 = worldPos;
				half4 localSamplePlanar2D238_g84996 = SamplePlanar2D( Texture238_g84996 , Sampler238_g84996 , Coords238_g84996 , WorldPosition238_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84996) = _MaskTex2;
				SamplerState Sampler246_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition246_g84996 = worldPos;
				half3 WorldNormal246_g84996 = WorldNormal;
				half4 localSamplePlanar3D246_g84996 = SamplePlanar3D( Texture246_g84996 , Sampler246_g84996 , Coords246_g84996 , WorldPosition246_g84996 , WorldNormal246_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84996) = _MaskTex2;
				SamplerState Sampler234_g84996 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84996 = temp_output_37_0_g84996;
				float3 WorldPosition234_g84996 = worldPos;
				float4 localSampleStochastic2D234_g84996 = SampleStochastic2D( Texture234_g84996 , Sampler234_g84996 , Coords234_g84996 , WorldPosition234_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84996) = _MaskTex2;
				SamplerState Sampler263_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition263_g84996 = worldPos;
				half3 WorldNormal263_g84996 = WorldNormal;
				half4 localSampleStochastic3D263_g84996 = SampleStochastic3D( Texture263_g84996 , Sampler263_g84996 , Coords263_g84996 , WorldPosition263_g84996 , WorldNormal263_g84996 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8640_g84942 = localSamplePlanar2D238_g84996;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8640_g84942 = localSamplePlanar3D246_g84996;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8640_g84942 = localSampleStochastic2D234_g84996;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8640_g84942 = localSampleStochastic3D263_g84996;
				#else
				float4 staticSwitch8640_g84942 = localSamplePlanar2D238_g84996;
				#endif
				float4 temp_output_7_0_g84946 = _MaskMin2;
				float4 temp_output_10_0_g84946 = ( _MaskMax2 - temp_output_7_0_g84946 );
				float4 temp_output_6977_0_g84942 = saturate( ( ( staticSwitch8640_g84942 - temp_output_7_0_g84946 ) / ( temp_output_10_0_g84946 + 0.0001 ) ) );
				half4 Masks_0210_g84952 = temp_output_6977_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84997) = _MaskTex3;
				SamplerState Sampler238_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_036789_g84942 = _Coords3;
				float4 temp_output_37_0_g84997 = Input_Coords_036789_g84942;
				half4 Coords238_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition238_g84997 = worldPos;
				half4 localSamplePlanar2D238_g84997 = SamplePlanar2D( Texture238_g84997 , Sampler238_g84997 , Coords238_g84997 , WorldPosition238_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84997) = _MaskTex3;
				SamplerState Sampler246_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition246_g84997 = worldPos;
				half3 WorldNormal246_g84997 = WorldNormal;
				half4 localSamplePlanar3D246_g84997 = SamplePlanar3D( Texture246_g84997 , Sampler246_g84997 , Coords246_g84997 , WorldPosition246_g84997 , WorldNormal246_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84997) = _MaskTex3;
				SamplerState Sampler234_g84997 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84997 = temp_output_37_0_g84997;
				float3 WorldPosition234_g84997 = worldPos;
				float4 localSampleStochastic2D234_g84997 = SampleStochastic2D( Texture234_g84997 , Sampler234_g84997 , Coords234_g84997 , WorldPosition234_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84997) = _MaskTex3;
				SamplerState Sampler263_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition263_g84997 = worldPos;
				half3 WorldNormal263_g84997 = WorldNormal;
				half4 localSampleStochastic3D263_g84997 = SampleStochastic3D( Texture263_g84997 , Sampler263_g84997 , Coords263_g84997 , WorldPosition263_g84997 , WorldNormal263_g84997 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8641_g84942 = localSamplePlanar2D238_g84997;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8641_g84942 = localSamplePlanar3D246_g84997;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8641_g84942 = localSampleStochastic2D234_g84997;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8641_g84942 = localSampleStochastic3D263_g84997;
				#else
				float4 staticSwitch8641_g84942 = localSamplePlanar2D238_g84997;
				#endif
				float4 temp_output_7_0_g84947 = _MaskMin3;
				float4 temp_output_10_0_g84947 = ( _MaskMax3 - temp_output_7_0_g84947 );
				float4 temp_output_6978_0_g84942 = saturate( ( ( staticSwitch8641_g84942 - temp_output_7_0_g84947 ) / ( temp_output_10_0_g84947 + 0.0001 ) ) );
				half4 Masks_0312_g84952 = temp_output_6978_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84998) = _MaskTex4;
				SamplerState Sampler238_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_046791_g84942 = _Coords4;
				float4 temp_output_37_0_g84998 = Input_Coords_046791_g84942;
				half4 Coords238_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition238_g84998 = worldPos;
				half4 localSamplePlanar2D238_g84998 = SamplePlanar2D( Texture238_g84998 , Sampler238_g84998 , Coords238_g84998 , WorldPosition238_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84998) = _MaskTex4;
				SamplerState Sampler246_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition246_g84998 = worldPos;
				half3 WorldNormal246_g84998 = WorldNormal;
				half4 localSamplePlanar3D246_g84998 = SamplePlanar3D( Texture246_g84998 , Sampler246_g84998 , Coords246_g84998 , WorldPosition246_g84998 , WorldNormal246_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84998) = _MaskTex4;
				SamplerState Sampler234_g84998 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84998 = temp_output_37_0_g84998;
				float3 WorldPosition234_g84998 = worldPos;
				float4 localSampleStochastic2D234_g84998 = SampleStochastic2D( Texture234_g84998 , Sampler234_g84998 , Coords234_g84998 , WorldPosition234_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84998) = _MaskTex4;
				SamplerState Sampler263_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition263_g84998 = worldPos;
				half3 WorldNormal263_g84998 = WorldNormal;
				half4 localSampleStochastic3D263_g84998 = SampleStochastic3D( Texture263_g84998 , Sampler263_g84998 , Coords263_g84998 , WorldPosition263_g84998 , WorldNormal263_g84998 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8642_g84942 = localSamplePlanar2D238_g84998;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8642_g84942 = localSamplePlanar3D246_g84998;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8642_g84942 = localSampleStochastic2D234_g84998;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8642_g84942 = localSampleStochastic3D263_g84998;
				#else
				float4 staticSwitch8642_g84942 = localSamplePlanar2D238_g84998;
				#endif
				float4 temp_output_7_0_g84948 = _MaskMin4;
				float4 temp_output_10_0_g84948 = ( _MaskMax4 - temp_output_7_0_g84948 );
				float4 temp_output_6983_0_g84942 = saturate( ( ( staticSwitch8642_g84942 - temp_output_7_0_g84948 ) / ( temp_output_10_0_g84948 + 0.0001 ) ) );
				half4 Masks_0414_g84952 = temp_output_6983_0_g84942;
				float4 appendResult29_g84952 = (float4((Masks_015_g84952).z , (Masks_0210_g84952).z , (Masks_0312_g84952).z , (Masks_0414_g84952).z));
				half4 Control31_g84952 = Terrain_Control_047365_g84942;
				half4 Terrain_Height_047210_g84942 = ( appendResult29_g84952 * Control31_g84952 );
				float4 heights_047362_g84942 = Terrain_Height_047210_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85007) = _MaskTex5;
				SamplerState Sampler238_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_058750_g84942 = _Coords5;
				float4 temp_output_37_0_g85007 = Input_Coords_058750_g84942;
				half4 Coords238_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition238_g85007 = worldPos;
				half4 localSamplePlanar2D238_g85007 = SamplePlanar2D( Texture238_g85007 , Sampler238_g85007 , Coords238_g85007 , WorldPosition238_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85007) = _MaskTex5;
				SamplerState Sampler246_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition246_g85007 = worldPos;
				half3 WorldNormal246_g85007 = WorldNormal;
				half4 localSamplePlanar3D246_g85007 = SamplePlanar3D( Texture246_g85007 , Sampler246_g85007 , Coords246_g85007 , WorldPosition246_g85007 , WorldNormal246_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85007) = _MaskTex5;
				SamplerState Sampler234_g85007 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85007 = temp_output_37_0_g85007;
				float3 WorldPosition234_g85007 = worldPos;
				float4 localSampleStochastic2D234_g85007 = SampleStochastic2D( Texture234_g85007 , Sampler234_g85007 , Coords234_g85007 , WorldPosition234_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85007) = _MaskTex5;
				SamplerState Sampler263_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition263_g85007 = worldPos;
				half3 WorldNormal263_g85007 = WorldNormal;
				half4 localSampleStochastic3D263_g85007 = SampleStochastic3D( Texture263_g85007 , Sampler263_g85007 , Coords263_g85007 , WorldPosition263_g85007 , WorldNormal263_g85007 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8710_g84942 = localSamplePlanar2D238_g85007;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8710_g84942 = localSamplePlanar3D246_g85007;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8710_g84942 = localSampleStochastic2D234_g85007;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8710_g84942 = localSampleStochastic3D263_g85007;
				#else
				float4 staticSwitch8710_g84942 = localSamplePlanar2D238_g85007;
				#endif
				float4 temp_output_7_0_g84960 = _MaskMin5;
				float4 temp_output_10_0_g84960 = ( _MaskMax5 - temp_output_7_0_g84960 );
				float4 temp_output_8714_0_g84942 = saturate( ( ( staticSwitch8710_g84942 - temp_output_7_0_g84960 ) / ( temp_output_10_0_g84960 + 0.0001 ) ) );
				half4 Masks_015_g84961 = temp_output_8714_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85008) = _MaskTex6;
				SamplerState Sampler238_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_068751_g84942 = _Coords6;
				float4 temp_output_37_0_g85008 = Input_Coords_068751_g84942;
				half4 Coords238_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition238_g85008 = worldPos;
				half4 localSamplePlanar2D238_g85008 = SamplePlanar2D( Texture238_g85008 , Sampler238_g85008 , Coords238_g85008 , WorldPosition238_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85008) = _MaskTex6;
				SamplerState Sampler246_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition246_g85008 = worldPos;
				half3 WorldNormal246_g85008 = WorldNormal;
				half4 localSamplePlanar3D246_g85008 = SamplePlanar3D( Texture246_g85008 , Sampler246_g85008 , Coords246_g85008 , WorldPosition246_g85008 , WorldNormal246_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85008) = _MaskTex6;
				SamplerState Sampler234_g85008 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85008 = temp_output_37_0_g85008;
				float3 WorldPosition234_g85008 = worldPos;
				float4 localSampleStochastic2D234_g85008 = SampleStochastic2D( Texture234_g85008 , Sampler234_g85008 , Coords234_g85008 , WorldPosition234_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85008) = _MaskTex6;
				SamplerState Sampler263_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition263_g85008 = worldPos;
				half3 WorldNormal263_g85008 = WorldNormal;
				half4 localSampleStochastic3D263_g85008 = SampleStochastic3D( Texture263_g85008 , Sampler263_g85008 , Coords263_g85008 , WorldPosition263_g85008 , WorldNormal263_g85008 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8711_g84942 = localSamplePlanar2D238_g85008;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8711_g84942 = localSamplePlanar3D246_g85008;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8711_g84942 = localSampleStochastic2D234_g85008;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8711_g84942 = localSampleStochastic3D263_g85008;
				#else
				float4 staticSwitch8711_g84942 = localSamplePlanar2D238_g85008;
				#endif
				float4 temp_output_7_0_g84963 = _MaskMin6;
				float4 temp_output_10_0_g84963 = ( _MaskMax6 - temp_output_7_0_g84963 );
				float4 temp_output_8721_0_g84942 = saturate( ( ( staticSwitch8711_g84942 - temp_output_7_0_g84963 ) / ( temp_output_10_0_g84963 + 0.0001 ) ) );
				half4 Masks_0210_g84961 = temp_output_8721_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85009) = _MaskTex7;
				SamplerState Sampler238_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_078752_g84942 = _Coords7;
				float4 temp_output_37_0_g85009 = Input_Coords_078752_g84942;
				half4 Coords238_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition238_g85009 = worldPos;
				half4 localSamplePlanar2D238_g85009 = SamplePlanar2D( Texture238_g85009 , Sampler238_g85009 , Coords238_g85009 , WorldPosition238_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85009) = _MaskTex7;
				SamplerState Sampler246_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition246_g85009 = worldPos;
				half3 WorldNormal246_g85009 = WorldNormal;
				half4 localSamplePlanar3D246_g85009 = SamplePlanar3D( Texture246_g85009 , Sampler246_g85009 , Coords246_g85009 , WorldPosition246_g85009 , WorldNormal246_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85009) = _MaskTex7;
				SamplerState Sampler234_g85009 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85009 = temp_output_37_0_g85009;
				float3 WorldPosition234_g85009 = worldPos;
				float4 localSampleStochastic2D234_g85009 = SampleStochastic2D( Texture234_g85009 , Sampler234_g85009 , Coords234_g85009 , WorldPosition234_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85009) = _MaskTex7;
				SamplerState Sampler263_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition263_g85009 = worldPos;
				half3 WorldNormal263_g85009 = WorldNormal;
				half4 localSampleStochastic3D263_g85009 = SampleStochastic3D( Texture263_g85009 , Sampler263_g85009 , Coords263_g85009 , WorldPosition263_g85009 , WorldNormal263_g85009 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8712_g84942 = localSamplePlanar2D238_g85009;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8712_g84942 = localSamplePlanar3D246_g85009;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8712_g84942 = localSampleStochastic2D234_g85009;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8712_g84942 = localSampleStochastic3D263_g85009;
				#else
				float4 staticSwitch8712_g84942 = localSamplePlanar2D238_g85009;
				#endif
				float4 temp_output_7_0_g84964 = _MaskMin7;
				float4 temp_output_10_0_g84964 = ( _MaskMax7 - temp_output_7_0_g84964 );
				float4 temp_output_8724_0_g84942 = saturate( ( ( staticSwitch8712_g84942 - temp_output_7_0_g84964 ) / ( temp_output_10_0_g84964 + 0.0001 ) ) );
				half4 Masks_0312_g84961 = temp_output_8724_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85010) = _MaskTex8;
				SamplerState Sampler238_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_088749_g84942 = _Coords8;
				float4 temp_output_37_0_g85010 = Input_Coords_088749_g84942;
				half4 Coords238_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition238_g85010 = worldPos;
				half4 localSamplePlanar2D238_g85010 = SamplePlanar2D( Texture238_g85010 , Sampler238_g85010 , Coords238_g85010 , WorldPosition238_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85010) = _MaskTex8;
				SamplerState Sampler246_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition246_g85010 = worldPos;
				half3 WorldNormal246_g85010 = WorldNormal;
				half4 localSamplePlanar3D246_g85010 = SamplePlanar3D( Texture246_g85010 , Sampler246_g85010 , Coords246_g85010 , WorldPosition246_g85010 , WorldNormal246_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85010) = _MaskTex8;
				SamplerState Sampler234_g85010 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85010 = temp_output_37_0_g85010;
				float3 WorldPosition234_g85010 = worldPos;
				float4 localSampleStochastic2D234_g85010 = SampleStochastic2D( Texture234_g85010 , Sampler234_g85010 , Coords234_g85010 , WorldPosition234_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85010) = _MaskTex8;
				SamplerState Sampler263_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition263_g85010 = worldPos;
				half3 WorldNormal263_g85010 = WorldNormal;
				half4 localSampleStochastic3D263_g85010 = SampleStochastic3D( Texture263_g85010 , Sampler263_g85010 , Coords263_g85010 , WorldPosition263_g85010 , WorldNormal263_g85010 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8713_g84942 = localSamplePlanar2D238_g85010;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8713_g84942 = localSamplePlanar3D246_g85010;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8713_g84942 = localSampleStochastic2D234_g85010;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8713_g84942 = localSampleStochastic3D263_g85010;
				#else
				float4 staticSwitch8713_g84942 = localSamplePlanar2D238_g85010;
				#endif
				float4 temp_output_7_0_g84965 = _MaskMin8;
				float4 temp_output_10_0_g84965 = ( _MaskMax8 - temp_output_7_0_g84965 );
				float4 temp_output_8727_0_g84942 = saturate( ( ( staticSwitch8713_g84942 - temp_output_7_0_g84965 ) / ( temp_output_10_0_g84965 + 0.0001 ) ) );
				half4 Masks_0414_g84961 = temp_output_8727_0_g84942;
				float4 appendResult29_g84961 = (float4((Masks_015_g84961).z , (Masks_0210_g84961).z , (Masks_0312_g84961).z , (Masks_0414_g84961).z));
				half4 Control31_g84961 = Terrain_Control_087366_g84942;
				half4 Terrain_Height_088731_g84942 = ( appendResult29_g84961 * Control31_g84961 );
				float4 heights_087362_g84942 = Terrain_Height_088731_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85019) = _MaskTex9;
				SamplerState Sampler238_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_098833_g84942 = _Coords9;
				float4 temp_output_37_0_g85019 = Input_Coords_098833_g84942;
				half4 Coords238_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition238_g85019 = worldPos;
				half4 localSamplePlanar2D238_g85019 = SamplePlanar2D( Texture238_g85019 , Sampler238_g85019 , Coords238_g85019 , WorldPosition238_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85019) = _MaskTex9;
				SamplerState Sampler246_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition246_g85019 = worldPos;
				half3 WorldNormal246_g85019 = WorldNormal;
				half4 localSamplePlanar3D246_g85019 = SamplePlanar3D( Texture246_g85019 , Sampler246_g85019 , Coords246_g85019 , WorldPosition246_g85019 , WorldNormal246_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85019) = _MaskTex9;
				SamplerState Sampler234_g85019 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85019 = temp_output_37_0_g85019;
				float3 WorldPosition234_g85019 = worldPos;
				float4 localSampleStochastic2D234_g85019 = SampleStochastic2D( Texture234_g85019 , Sampler234_g85019 , Coords234_g85019 , WorldPosition234_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85019) = _MaskTex9;
				SamplerState Sampler263_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition263_g85019 = worldPos;
				half3 WorldNormal263_g85019 = WorldNormal;
				half4 localSampleStochastic3D263_g85019 = SampleStochastic3D( Texture263_g85019 , Sampler263_g85019 , Coords263_g85019 , WorldPosition263_g85019 , WorldNormal263_g85019 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8878_g84942 = localSamplePlanar2D238_g85019;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8878_g84942 = localSamplePlanar3D246_g85019;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8878_g84942 = localSampleStochastic2D234_g85019;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8878_g84942 = localSampleStochastic3D263_g85019;
				#else
				float4 staticSwitch8878_g84942 = localSamplePlanar2D238_g85019;
				#endif
				float4 temp_output_7_0_g84970 = _MaskMin9;
				float4 temp_output_10_0_g84970 = ( _MaskMax9 - temp_output_7_0_g84970 );
				float4 temp_output_8815_0_g84942 = saturate( ( ( staticSwitch8878_g84942 - temp_output_7_0_g84970 ) / ( temp_output_10_0_g84970 + 0.0001 ) ) );
				half4 Masks_015_g84971 = temp_output_8815_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85020) = _MaskTex10;
				SamplerState Sampler238_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_108834_g84942 = _Coords10;
				float4 temp_output_37_0_g85020 = Input_Coords_108834_g84942;
				half4 Coords238_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition238_g85020 = worldPos;
				half4 localSamplePlanar2D238_g85020 = SamplePlanar2D( Texture238_g85020 , Sampler238_g85020 , Coords238_g85020 , WorldPosition238_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85020) = _MaskTex10;
				SamplerState Sampler246_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition246_g85020 = worldPos;
				half3 WorldNormal246_g85020 = WorldNormal;
				half4 localSamplePlanar3D246_g85020 = SamplePlanar3D( Texture246_g85020 , Sampler246_g85020 , Coords246_g85020 , WorldPosition246_g85020 , WorldNormal246_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85020) = _MaskTex10;
				SamplerState Sampler234_g85020 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85020 = temp_output_37_0_g85020;
				float3 WorldPosition234_g85020 = worldPos;
				float4 localSampleStochastic2D234_g85020 = SampleStochastic2D( Texture234_g85020 , Sampler234_g85020 , Coords234_g85020 , WorldPosition234_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85020) = _MaskTex10;
				SamplerState Sampler263_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition263_g85020 = worldPos;
				half3 WorldNormal263_g85020 = WorldNormal;
				half4 localSampleStochastic3D263_g85020 = SampleStochastic3D( Texture263_g85020 , Sampler263_g85020 , Coords263_g85020 , WorldPosition263_g85020 , WorldNormal263_g85020 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8860_g84942 = localSamplePlanar2D238_g85020;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8860_g84942 = localSamplePlanar3D246_g85020;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8860_g84942 = localSampleStochastic2D234_g85020;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8860_g84942 = localSampleStochastic3D263_g85020;
				#else
				float4 staticSwitch8860_g84942 = localSamplePlanar2D238_g85020;
				#endif
				float4 temp_output_7_0_g84973 = _MaskMin10;
				float4 temp_output_10_0_g84973 = ( _MaskMax10 - temp_output_7_0_g84973 );
				float4 temp_output_8818_0_g84942 = saturate( ( ( staticSwitch8860_g84942 - temp_output_7_0_g84973 ) / ( temp_output_10_0_g84973 + 0.0001 ) ) );
				half4 Masks_0210_g84971 = temp_output_8818_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85021) = _MaskTex11;
				SamplerState Sampler238_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_118835_g84942 = _Coords11;
				float4 temp_output_37_0_g85021 = Input_Coords_118835_g84942;
				half4 Coords238_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition238_g85021 = worldPos;
				half4 localSamplePlanar2D238_g85021 = SamplePlanar2D( Texture238_g85021 , Sampler238_g85021 , Coords238_g85021 , WorldPosition238_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85021) = _MaskTex11;
				SamplerState Sampler246_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition246_g85021 = worldPos;
				half3 WorldNormal246_g85021 = WorldNormal;
				half4 localSamplePlanar3D246_g85021 = SamplePlanar3D( Texture246_g85021 , Sampler246_g85021 , Coords246_g85021 , WorldPosition246_g85021 , WorldNormal246_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85021) = _MaskTex11;
				SamplerState Sampler234_g85021 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85021 = temp_output_37_0_g85021;
				float3 WorldPosition234_g85021 = worldPos;
				float4 localSampleStochastic2D234_g85021 = SampleStochastic2D( Texture234_g85021 , Sampler234_g85021 , Coords234_g85021 , WorldPosition234_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85021) = _MaskTex11;
				SamplerState Sampler263_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition263_g85021 = worldPos;
				half3 WorldNormal263_g85021 = WorldNormal;
				half4 localSampleStochastic3D263_g85021 = SampleStochastic3D( Texture263_g85021 , Sampler263_g85021 , Coords263_g85021 , WorldPosition263_g85021 , WorldNormal263_g85021 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8861_g84942 = localSamplePlanar2D238_g85021;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8861_g84942 = localSamplePlanar3D246_g85021;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8861_g84942 = localSampleStochastic2D234_g85021;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8861_g84942 = localSampleStochastic3D263_g85021;
				#else
				float4 staticSwitch8861_g84942 = localSamplePlanar2D238_g85021;
				#endif
				float4 temp_output_7_0_g84974 = _MaskMin11;
				float4 temp_output_10_0_g84974 = ( _MaskMax11 - temp_output_7_0_g84974 );
				float4 temp_output_8819_0_g84942 = saturate( ( ( staticSwitch8861_g84942 - temp_output_7_0_g84974 ) / ( temp_output_10_0_g84974 + 0.0001 ) ) );
				half4 Masks_0312_g84971 = temp_output_8819_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85022) = _MaskTex12;
				SamplerState Sampler238_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_128836_g84942 = _Coords12;
				float4 temp_output_37_0_g85022 = Input_Coords_128836_g84942;
				half4 Coords238_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition238_g85022 = worldPos;
				half4 localSamplePlanar2D238_g85022 = SamplePlanar2D( Texture238_g85022 , Sampler238_g85022 , Coords238_g85022 , WorldPosition238_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85022) = _MaskTex12;
				SamplerState Sampler246_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition246_g85022 = worldPos;
				half3 WorldNormal246_g85022 = WorldNormal;
				half4 localSamplePlanar3D246_g85022 = SamplePlanar3D( Texture246_g85022 , Sampler246_g85022 , Coords246_g85022 , WorldPosition246_g85022 , WorldNormal246_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85022) = _MaskTex12;
				SamplerState Sampler234_g85022 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85022 = temp_output_37_0_g85022;
				float3 WorldPosition234_g85022 = worldPos;
				float4 localSampleStochastic2D234_g85022 = SampleStochastic2D( Texture234_g85022 , Sampler234_g85022 , Coords234_g85022 , WorldPosition234_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85022) = _MaskTex12;
				SamplerState Sampler263_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition263_g85022 = worldPos;
				half3 WorldNormal263_g85022 = WorldNormal;
				half4 localSampleStochastic3D263_g85022 = SampleStochastic3D( Texture263_g85022 , Sampler263_g85022 , Coords263_g85022 , WorldPosition263_g85022 , WorldNormal263_g85022 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8879_g84942 = localSamplePlanar2D238_g85022;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8879_g84942 = localSamplePlanar3D246_g85022;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8879_g84942 = localSampleStochastic2D234_g85022;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8879_g84942 = localSampleStochastic3D263_g85022;
				#else
				float4 staticSwitch8879_g84942 = localSamplePlanar2D238_g85022;
				#endif
				float4 temp_output_7_0_g84975 = _MaskMin12;
				float4 temp_output_10_0_g84975 = ( _MaskMax12 - temp_output_7_0_g84975 );
				float4 temp_output_8820_0_g84942 = saturate( ( ( staticSwitch8879_g84942 - temp_output_7_0_g84975 ) / ( temp_output_10_0_g84975 + 0.0001 ) ) );
				half4 Masks_0414_g84971 = temp_output_8820_0_g84942;
				float4 appendResult29_g84971 = (float4((Masks_015_g84971).z , (Masks_0210_g84971).z , (Masks_0312_g84971).z , (Masks_0414_g84971).z));
				half4 Control31_g84971 = Terrain_Control_127712_g84942;
				half4 Terrain_Height_128870_g84942 = ( appendResult29_g84971 * Control31_g84971 );
				float4 heights_127362_g84942 = Terrain_Height_128870_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85030) = _MaskTex13;
				SamplerState Sampler238_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_138960_g84942 = _Coords13;
				float4 temp_output_37_0_g85030 = Input_Coords_138960_g84942;
				half4 Coords238_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition238_g85030 = worldPos;
				half4 localSamplePlanar2D238_g85030 = SamplePlanar2D( Texture238_g85030 , Sampler238_g85030 , Coords238_g85030 , WorldPosition238_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85030) = _MaskTex13;
				SamplerState Sampler246_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition246_g85030 = worldPos;
				half3 WorldNormal246_g85030 = WorldNormal;
				half4 localSamplePlanar3D246_g85030 = SamplePlanar3D( Texture246_g85030 , Sampler246_g85030 , Coords246_g85030 , WorldPosition246_g85030 , WorldNormal246_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85030) = _MaskTex13;
				SamplerState Sampler234_g85030 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85030 = temp_output_37_0_g85030;
				float3 WorldPosition234_g85030 = worldPos;
				float4 localSampleStochastic2D234_g85030 = SampleStochastic2D( Texture234_g85030 , Sampler234_g85030 , Coords234_g85030 , WorldPosition234_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85030) = _MaskTex13;
				SamplerState Sampler263_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition263_g85030 = worldPos;
				half3 WorldNormal263_g85030 = WorldNormal;
				half4 localSampleStochastic3D263_g85030 = SampleStochastic3D( Texture263_g85030 , Sampler263_g85030 , Coords263_g85030 , WorldPosition263_g85030 , WorldNormal263_g85030 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch9000_g84942 = localSamplePlanar2D238_g85030;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch9000_g84942 = localSamplePlanar3D246_g85030;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch9000_g84942 = localSampleStochastic2D234_g85030;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch9000_g84942 = localSampleStochastic3D263_g85030;
				#else
				float4 staticSwitch9000_g84942 = localSamplePlanar2D238_g85030;
				#endif
				float4 temp_output_7_0_g84980 = _MaskMin13;
				float4 temp_output_10_0_g84980 = ( _MaskMax13 - temp_output_7_0_g84980 );
				float4 temp_output_8931_0_g84942 = saturate( ( ( staticSwitch9000_g84942 - temp_output_7_0_g84980 ) / ( temp_output_10_0_g84980 + 0.0001 ) ) );
				half4 Masks_015_g84981 = temp_output_8931_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85031) = _MaskTex14;
				SamplerState Sampler238_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_148961_g84942 = _Coords14;
				float4 temp_output_37_0_g85031 = Input_Coords_148961_g84942;
				half4 Coords238_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition238_g85031 = worldPos;
				half4 localSamplePlanar2D238_g85031 = SamplePlanar2D( Texture238_g85031 , Sampler238_g85031 , Coords238_g85031 , WorldPosition238_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85031) = _MaskTex14;
				SamplerState Sampler246_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition246_g85031 = worldPos;
				half3 WorldNormal246_g85031 = WorldNormal;
				half4 localSamplePlanar3D246_g85031 = SamplePlanar3D( Texture246_g85031 , Sampler246_g85031 , Coords246_g85031 , WorldPosition246_g85031 , WorldNormal246_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85031) = _MaskTex14;
				SamplerState Sampler234_g85031 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85031 = temp_output_37_0_g85031;
				float3 WorldPosition234_g85031 = worldPos;
				float4 localSampleStochastic2D234_g85031 = SampleStochastic2D( Texture234_g85031 , Sampler234_g85031 , Coords234_g85031 , WorldPosition234_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85031) = _MaskTex14;
				SamplerState Sampler263_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition263_g85031 = worldPos;
				half3 WorldNormal263_g85031 = WorldNormal;
				half4 localSampleStochastic3D263_g85031 = SampleStochastic3D( Texture263_g85031 , Sampler263_g85031 , Coords263_g85031 , WorldPosition263_g85031 , WorldNormal263_g85031 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch9001_g84942 = localSamplePlanar2D238_g85031;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch9001_g84942 = localSamplePlanar3D246_g85031;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch9001_g84942 = localSampleStochastic2D234_g85031;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch9001_g84942 = localSampleStochastic3D263_g85031;
				#else
				float4 staticSwitch9001_g84942 = localSamplePlanar2D238_g85031;
				#endif
				float4 temp_output_7_0_g84983 = _MaskMin14;
				float4 temp_output_10_0_g84983 = ( _MaskMax14 - temp_output_7_0_g84983 );
				float4 temp_output_8934_0_g84942 = saturate( ( ( staticSwitch9001_g84942 - temp_output_7_0_g84983 ) / ( temp_output_10_0_g84983 + 0.0001 ) ) );
				half4 Masks_0210_g84981 = temp_output_8934_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85032) = _MaskTex15;
				SamplerState Sampler238_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_158962_g84942 = _Coords15;
				float4 temp_output_37_0_g85032 = Input_Coords_158962_g84942;
				half4 Coords238_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition238_g85032 = worldPos;
				half4 localSamplePlanar2D238_g85032 = SamplePlanar2D( Texture238_g85032 , Sampler238_g85032 , Coords238_g85032 , WorldPosition238_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85032) = _MaskTex15;
				SamplerState Sampler246_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition246_g85032 = worldPos;
				half3 WorldNormal246_g85032 = WorldNormal;
				half4 localSamplePlanar3D246_g85032 = SamplePlanar3D( Texture246_g85032 , Sampler246_g85032 , Coords246_g85032 , WorldPosition246_g85032 , WorldNormal246_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85032) = _MaskTex15;
				SamplerState Sampler234_g85032 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85032 = temp_output_37_0_g85032;
				float3 WorldPosition234_g85032 = worldPos;
				float4 localSampleStochastic2D234_g85032 = SampleStochastic2D( Texture234_g85032 , Sampler234_g85032 , Coords234_g85032 , WorldPosition234_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85032) = _MaskTex15;
				SamplerState Sampler263_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition263_g85032 = worldPos;
				half3 WorldNormal263_g85032 = WorldNormal;
				half4 localSampleStochastic3D263_g85032 = SampleStochastic3D( Texture263_g85032 , Sampler263_g85032 , Coords263_g85032 , WorldPosition263_g85032 , WorldNormal263_g85032 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch9002_g84942 = localSamplePlanar2D238_g85032;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch9002_g84942 = localSamplePlanar3D246_g85032;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch9002_g84942 = localSampleStochastic2D234_g85032;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch9002_g84942 = localSampleStochastic3D263_g85032;
				#else
				float4 staticSwitch9002_g84942 = localSamplePlanar2D238_g85032;
				#endif
				float4 temp_output_7_0_g84984 = _MaskMin15;
				float4 temp_output_10_0_g84984 = ( _MaskMax15 - temp_output_7_0_g84984 );
				float4 temp_output_8935_0_g84942 = saturate( ( ( staticSwitch9002_g84942 - temp_output_7_0_g84984 ) / ( temp_output_10_0_g84984 + 0.0001 ) ) );
				half4 Masks_0312_g84981 = temp_output_8935_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85033) = _MaskTex16;
				SamplerState Sampler238_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_168959_g84942 = _Coords16;
				float4 temp_output_37_0_g85033 = Input_Coords_168959_g84942;
				half4 Coords238_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition238_g85033 = worldPos;
				half4 localSamplePlanar2D238_g85033 = SamplePlanar2D( Texture238_g85033 , Sampler238_g85033 , Coords238_g85033 , WorldPosition238_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85033) = _MaskTex16;
				SamplerState Sampler246_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition246_g85033 = worldPos;
				half3 WorldNormal246_g85033 = WorldNormal;
				half4 localSamplePlanar3D246_g85033 = SamplePlanar3D( Texture246_g85033 , Sampler246_g85033 , Coords246_g85033 , WorldPosition246_g85033 , WorldNormal246_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85033) = _MaskTex16;
				SamplerState Sampler234_g85033 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85033 = temp_output_37_0_g85033;
				float3 WorldPosition234_g85033 = worldPos;
				float4 localSampleStochastic2D234_g85033 = SampleStochastic2D( Texture234_g85033 , Sampler234_g85033 , Coords234_g85033 , WorldPosition234_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85033) = _MaskTex16;
				SamplerState Sampler263_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition263_g85033 = worldPos;
				half3 WorldNormal263_g85033 = WorldNormal;
				half4 localSampleStochastic3D263_g85033 = SampleStochastic3D( Texture263_g85033 , Sampler263_g85033 , Coords263_g85033 , WorldPosition263_g85033 , WorldNormal263_g85033 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch9003_g84942 = localSamplePlanar2D238_g85033;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch9003_g84942 = localSamplePlanar3D246_g85033;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch9003_g84942 = localSampleStochastic2D234_g85033;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch9003_g84942 = localSampleStochastic3D263_g85033;
				#else
				float4 staticSwitch9003_g84942 = localSamplePlanar2D238_g85033;
				#endif
				float4 temp_output_7_0_g84985 = _MaskMin16;
				float4 temp_output_10_0_g84985 = ( _MaskMax16 - temp_output_7_0_g84985 );
				float4 temp_output_8936_0_g84942 = saturate( ( ( staticSwitch9003_g84942 - temp_output_7_0_g84985 ) / ( temp_output_10_0_g84985 + 0.0001 ) ) );
				half4 Masks_0414_g84981 = temp_output_8936_0_g84942;
				float4 appendResult29_g84981 = (float4((Masks_015_g84981).z , (Masks_0210_g84981).z , (Masks_0312_g84981).z , (Masks_0414_g84981).z));
				half4 Control31_g84981 = Terrain_Control_167711_g84942;
				half4 Terrain_Height_169015_g84942 = ( appendResult29_g84981 * Control31_g84981 );
				float4 heights_167362_g84942 = Terrain_Height_169015_g84942;
				float heightTransition7362_g84942 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g84942 = float4( 0,0,0,0 );
				float4 weights_087362_g84942 = float4( 0,0,0,0 );
				float4 weights_127362_g84942 = float4( 0,0,0,0 );
				float4 weights_167362_g84942 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g84942.x;
				maxHeight = max(maxHeight, heights_047362_g84942.y);
				maxHeight = max(maxHeight, heights_047362_g84942.z);
				maxHeight = max(maxHeight, heights_047362_g84942.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				maxHeight = max(maxHeight, heights_127362_g84942.x);
				maxHeight = max(maxHeight, heights_127362_g84942.y);
				maxHeight = max(maxHeight, heights_127362_g84942.z);
				maxHeight = max(maxHeight, heights_127362_g84942.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				maxHeight = max(maxHeight, heights_127362_g84942.x);
				maxHeight = max(maxHeight, heights_127362_g84942.y);
				maxHeight = max(maxHeight, heights_127362_g84942.z);
				maxHeight = max(maxHeight, heights_127362_g84942.w);
				maxHeight = max(maxHeight, heights_167362_g84942.x);
				maxHeight = max(maxHeight, heights_167362_g84942.y);
				maxHeight = max(maxHeight, heights_167362_g84942.z);
				maxHeight = max(maxHeight, heights_167362_g84942.w);
				#endif
				float transition = max(heightTransition7362_g84942, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g84942.x, heights_047362_g84942.y, heights_047362_g84942.z, heights_047362_g84942.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g84942;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				weightedHeights_12 = float4 ( heights_127362_g84942.x, heights_127362_g84942.y, heights_127362_g84942.z, heights_127362_g84942.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g84942;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				weightedHeights_12 = float4 ( heights_127362_g84942.x, heights_127362_g84942.y, heights_127362_g84942.z, heights_127362_g84942.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g84942;
				weightedHeights_16 = float4 ( heights_167362_g84942.x, heights_167362_g84942.y, heights_167362_g84942.z, heights_167362_g84942.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g84942;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g84942 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g84942 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g84942 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g84942 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8792_g84942 = weights_047362_g84942;
				#else
				float4 staticSwitch8792_g84942 = control_047362_g84942;
				#endif
				half4 Terrain_Weights_046781_g84942 = staticSwitch8792_g84942;
				half4 Weights52_g84951 = Terrain_Weights_046781_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85035) = _AlbedoTex1;
				SamplerState Sampler238_g85035 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85035 = Input_Coords_016785_g84942;
				half4 Coords238_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition238_g85035 = worldPos;
				half4 localSamplePlanar2D238_g85035 = SamplePlanar2D( Texture238_g85035 , Sampler238_g85035 , Coords238_g85035 , WorldPosition238_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85035) = _AlbedoTex1;
				SamplerState Sampler246_g85035 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition246_g85035 = worldPos;
				half3 WorldNormal246_g85035 = WorldNormal;
				half4 localSamplePlanar3D246_g85035 = SamplePlanar3D( Texture246_g85035 , Sampler246_g85035 , Coords246_g85035 , WorldPosition246_g85035 , WorldNormal246_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85035) = _AlbedoTex1;
				SamplerState Sampler234_g85035 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85035 = temp_output_37_0_g85035;
				float3 WorldPosition234_g85035 = worldPos;
				float4 localSampleStochastic2D234_g85035 = SampleStochastic2D( Texture234_g85035 , Sampler234_g85035 , Coords234_g85035 , WorldPosition234_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85035) = _AlbedoTex1;
				SamplerState Sampler263_g85035 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition263_g85035 = worldPos;
				half3 WorldNormal263_g85035 = WorldNormal;
				half4 localSampleStochastic3D263_g85035 = SampleStochastic3D( Texture263_g85035 , Sampler263_g85035 , Coords263_g85035 , WorldPosition263_g85035 , WorldNormal263_g85035 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8614_g84942 = localSamplePlanar2D238_g85035;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8614_g84942 = localSamplePlanar3D246_g85035;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8614_g84942 = localSampleStochastic2D234_g85035;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8614_g84942 = localSampleStochastic3D263_g85035;
				#else
				float4 staticSwitch8614_g84942 = localSamplePlanar2D238_g85035;
				#endif
				half4 Layer133_g84951 = staticSwitch8614_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84988) = _AlbedoTex2;
				SamplerState Sampler238_g84988 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84988 = Input_Coords_026787_g84942;
				half4 Coords238_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition238_g84988 = worldPos;
				half4 localSamplePlanar2D238_g84988 = SamplePlanar2D( Texture238_g84988 , Sampler238_g84988 , Coords238_g84988 , WorldPosition238_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84988) = _AlbedoTex2;
				SamplerState Sampler246_g84988 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition246_g84988 = worldPos;
				half3 WorldNormal246_g84988 = WorldNormal;
				half4 localSamplePlanar3D246_g84988 = SamplePlanar3D( Texture246_g84988 , Sampler246_g84988 , Coords246_g84988 , WorldPosition246_g84988 , WorldNormal246_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84988) = _AlbedoTex2;
				SamplerState Sampler234_g84988 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84988 = temp_output_37_0_g84988;
				float3 WorldPosition234_g84988 = worldPos;
				float4 localSampleStochastic2D234_g84988 = SampleStochastic2D( Texture234_g84988 , Sampler234_g84988 , Coords234_g84988 , WorldPosition234_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84988) = _AlbedoTex2;
				SamplerState Sampler263_g84988 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition263_g84988 = worldPos;
				half3 WorldNormal263_g84988 = WorldNormal;
				half4 localSampleStochastic3D263_g84988 = SampleStochastic3D( Texture263_g84988 , Sampler263_g84988 , Coords263_g84988 , WorldPosition263_g84988 , WorldNormal263_g84988 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8629_g84942 = localSamplePlanar2D238_g84988;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8629_g84942 = localSamplePlanar3D246_g84988;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8629_g84942 = localSampleStochastic2D234_g84988;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8629_g84942 = localSampleStochastic3D263_g84988;
				#else
				float4 staticSwitch8629_g84942 = localSamplePlanar2D238_g84988;
				#endif
				half4 Layer237_g84951 = staticSwitch8629_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84989) = _AlbedoTex3;
				SamplerState Sampler238_g84989 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84989 = Input_Coords_036789_g84942;
				half4 Coords238_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition238_g84989 = worldPos;
				half4 localSamplePlanar2D238_g84989 = SamplePlanar2D( Texture238_g84989 , Sampler238_g84989 , Coords238_g84989 , WorldPosition238_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84989) = _AlbedoTex3;
				SamplerState Sampler246_g84989 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition246_g84989 = worldPos;
				half3 WorldNormal246_g84989 = WorldNormal;
				half4 localSamplePlanar3D246_g84989 = SamplePlanar3D( Texture246_g84989 , Sampler246_g84989 , Coords246_g84989 , WorldPosition246_g84989 , WorldNormal246_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84989) = _AlbedoTex3;
				SamplerState Sampler234_g84989 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84989 = temp_output_37_0_g84989;
				float3 WorldPosition234_g84989 = worldPos;
				float4 localSampleStochastic2D234_g84989 = SampleStochastic2D( Texture234_g84989 , Sampler234_g84989 , Coords234_g84989 , WorldPosition234_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84989) = _AlbedoTex3;
				SamplerState Sampler263_g84989 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition263_g84989 = worldPos;
				half3 WorldNormal263_g84989 = WorldNormal;
				half4 localSampleStochastic3D263_g84989 = SampleStochastic3D( Texture263_g84989 , Sampler263_g84989 , Coords263_g84989 , WorldPosition263_g84989 , WorldNormal263_g84989 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8630_g84942 = localSamplePlanar2D238_g84989;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8630_g84942 = localSamplePlanar3D246_g84989;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8630_g84942 = localSampleStochastic2D234_g84989;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8630_g84942 = localSampleStochastic3D263_g84989;
				#else
				float4 staticSwitch8630_g84942 = localSamplePlanar2D238_g84989;
				#endif
				half4 Layer338_g84951 = staticSwitch8630_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84990) = _AlbedoTex4;
				SamplerState Sampler238_g84990 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84990 = Input_Coords_046791_g84942;
				half4 Coords238_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition238_g84990 = worldPos;
				half4 localSamplePlanar2D238_g84990 = SamplePlanar2D( Texture238_g84990 , Sampler238_g84990 , Coords238_g84990 , WorldPosition238_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84990) = _AlbedoTex4;
				SamplerState Sampler246_g84990 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition246_g84990 = worldPos;
				half3 WorldNormal246_g84990 = WorldNormal;
				half4 localSamplePlanar3D246_g84990 = SamplePlanar3D( Texture246_g84990 , Sampler246_g84990 , Coords246_g84990 , WorldPosition246_g84990 , WorldNormal246_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84990) = _AlbedoTex4;
				SamplerState Sampler234_g84990 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84990 = temp_output_37_0_g84990;
				float3 WorldPosition234_g84990 = worldPos;
				float4 localSampleStochastic2D234_g84990 = SampleStochastic2D( Texture234_g84990 , Sampler234_g84990 , Coords234_g84990 , WorldPosition234_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84990) = _AlbedoTex4;
				SamplerState Sampler263_g84990 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition263_g84990 = worldPos;
				half3 WorldNormal263_g84990 = WorldNormal;
				half4 localSampleStochastic3D263_g84990 = SampleStochastic3D( Texture263_g84990 , Sampler263_g84990 , Coords263_g84990 , WorldPosition263_g84990 , WorldNormal263_g84990 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8631_g84942 = localSamplePlanar2D238_g84990;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8631_g84942 = localSamplePlanar3D246_g84990;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8631_g84942 = localSampleStochastic2D234_g84990;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8631_g84942 = localSampleStochastic3D263_g84990;
				#else
				float4 staticSwitch8631_g84942 = localSamplePlanar2D238_g84990;
				#endif
				half4 Layer439_g84951 = staticSwitch8631_g84942;
				float4 weightedBlendVar31_g84951 = Weights52_g84951;
				float4 weightedBlend31_g84951 = ( weightedBlendVar31_g84951.x*Layer133_g84951 + weightedBlendVar31_g84951.y*Layer237_g84951 + weightedBlendVar31_g84951.z*Layer338_g84951 + weightedBlendVar31_g84951.w*Layer439_g84951 );
				half4 Terrain_Albedo_047200_g84942 = weightedBlend31_g84951;
				half4 Layer_045_g84954 = Terrain_Albedo_047200_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8793_g84942 = weights_087362_g84942;
				#else
				float4 staticSwitch8793_g84942 = control_087362_g84942;
				#endif
				half4 Terrain_Weights_087340_g84942 = staticSwitch8793_g84942;
				half4 Weights52_g84958 = Terrain_Weights_087340_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84999) = _AlbedoTex5;
				SamplerState Sampler238_g84999 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84999 = Input_Coords_058750_g84942;
				half4 Coords238_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition238_g84999 = worldPos;
				half4 localSamplePlanar2D238_g84999 = SamplePlanar2D( Texture238_g84999 , Sampler238_g84999 , Coords238_g84999 , WorldPosition238_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84999) = _AlbedoTex5;
				SamplerState Sampler246_g84999 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition246_g84999 = worldPos;
				half3 WorldNormal246_g84999 = WorldNormal;
				half4 localSamplePlanar3D246_g84999 = SamplePlanar3D( Texture246_g84999 , Sampler246_g84999 , Coords246_g84999 , WorldPosition246_g84999 , WorldNormal246_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84999) = _AlbedoTex5;
				SamplerState Sampler234_g84999 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84999 = temp_output_37_0_g84999;
				float3 WorldPosition234_g84999 = worldPos;
				float4 localSampleStochastic2D234_g84999 = SampleStochastic2D( Texture234_g84999 , Sampler234_g84999 , Coords234_g84999 , WorldPosition234_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84999) = _AlbedoTex5;
				SamplerState Sampler263_g84999 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition263_g84999 = worldPos;
				half3 WorldNormal263_g84999 = WorldNormal;
				half4 localSampleStochastic3D263_g84999 = SampleStochastic3D( Texture263_g84999 , Sampler263_g84999 , Coords263_g84999 , WorldPosition263_g84999 , WorldNormal263_g84999 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8690_g84942 = localSamplePlanar2D238_g84999;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8690_g84942 = localSamplePlanar3D246_g84999;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8690_g84942 = localSampleStochastic2D234_g84999;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8690_g84942 = localSampleStochastic3D263_g84999;
				#else
				float4 staticSwitch8690_g84942 = localSamplePlanar2D238_g84999;
				#endif
				half4 Layer133_g84958 = staticSwitch8690_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85000) = _AlbedoTex6;
				SamplerState Sampler238_g85000 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85000 = Input_Coords_068751_g84942;
				half4 Coords238_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition238_g85000 = worldPos;
				half4 localSamplePlanar2D238_g85000 = SamplePlanar2D( Texture238_g85000 , Sampler238_g85000 , Coords238_g85000 , WorldPosition238_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85000) = _AlbedoTex6;
				SamplerState Sampler246_g85000 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition246_g85000 = worldPos;
				half3 WorldNormal246_g85000 = WorldNormal;
				half4 localSamplePlanar3D246_g85000 = SamplePlanar3D( Texture246_g85000 , Sampler246_g85000 , Coords246_g85000 , WorldPosition246_g85000 , WorldNormal246_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85000) = _AlbedoTex6;
				SamplerState Sampler234_g85000 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85000 = temp_output_37_0_g85000;
				float3 WorldPosition234_g85000 = worldPos;
				float4 localSampleStochastic2D234_g85000 = SampleStochastic2D( Texture234_g85000 , Sampler234_g85000 , Coords234_g85000 , WorldPosition234_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85000) = _AlbedoTex6;
				SamplerState Sampler263_g85000 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition263_g85000 = worldPos;
				half3 WorldNormal263_g85000 = WorldNormal;
				half4 localSampleStochastic3D263_g85000 = SampleStochastic3D( Texture263_g85000 , Sampler263_g85000 , Coords263_g85000 , WorldPosition263_g85000 , WorldNormal263_g85000 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8691_g84942 = localSamplePlanar2D238_g85000;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8691_g84942 = localSamplePlanar3D246_g85000;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8691_g84942 = localSampleStochastic2D234_g85000;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8691_g84942 = localSampleStochastic3D263_g85000;
				#else
				float4 staticSwitch8691_g84942 = localSamplePlanar2D238_g85000;
				#endif
				half4 Layer237_g84958 = staticSwitch8691_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85001) = _AlbedoTex7;
				SamplerState Sampler238_g85001 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85001 = Input_Coords_078752_g84942;
				half4 Coords238_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition238_g85001 = worldPos;
				half4 localSamplePlanar2D238_g85001 = SamplePlanar2D( Texture238_g85001 , Sampler238_g85001 , Coords238_g85001 , WorldPosition238_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85001) = _AlbedoTex7;
				SamplerState Sampler246_g85001 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition246_g85001 = worldPos;
				half3 WorldNormal246_g85001 = WorldNormal;
				half4 localSamplePlanar3D246_g85001 = SamplePlanar3D( Texture246_g85001 , Sampler246_g85001 , Coords246_g85001 , WorldPosition246_g85001 , WorldNormal246_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85001) = _AlbedoTex7;
				SamplerState Sampler234_g85001 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85001 = temp_output_37_0_g85001;
				float3 WorldPosition234_g85001 = worldPos;
				float4 localSampleStochastic2D234_g85001 = SampleStochastic2D( Texture234_g85001 , Sampler234_g85001 , Coords234_g85001 , WorldPosition234_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85001) = _AlbedoTex7;
				SamplerState Sampler263_g85001 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition263_g85001 = worldPos;
				half3 WorldNormal263_g85001 = WorldNormal;
				half4 localSampleStochastic3D263_g85001 = SampleStochastic3D( Texture263_g85001 , Sampler263_g85001 , Coords263_g85001 , WorldPosition263_g85001 , WorldNormal263_g85001 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8692_g84942 = localSamplePlanar2D238_g85001;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8692_g84942 = localSamplePlanar3D246_g85001;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8692_g84942 = localSampleStochastic2D234_g85001;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8692_g84942 = localSampleStochastic3D263_g85001;
				#else
				float4 staticSwitch8692_g84942 = localSamplePlanar2D238_g85001;
				#endif
				half4 Layer338_g84958 = staticSwitch8692_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85002) = _AlbedoTex8;
				SamplerState Sampler238_g85002 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85002 = Input_Coords_088749_g84942;
				half4 Coords238_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition238_g85002 = worldPos;
				half4 localSamplePlanar2D238_g85002 = SamplePlanar2D( Texture238_g85002 , Sampler238_g85002 , Coords238_g85002 , WorldPosition238_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85002) = _AlbedoTex8;
				SamplerState Sampler246_g85002 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition246_g85002 = worldPos;
				half3 WorldNormal246_g85002 = WorldNormal;
				half4 localSamplePlanar3D246_g85002 = SamplePlanar3D( Texture246_g85002 , Sampler246_g85002 , Coords246_g85002 , WorldPosition246_g85002 , WorldNormal246_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85002) = _AlbedoTex8;
				SamplerState Sampler234_g85002 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85002 = temp_output_37_0_g85002;
				float3 WorldPosition234_g85002 = worldPos;
				float4 localSampleStochastic2D234_g85002 = SampleStochastic2D( Texture234_g85002 , Sampler234_g85002 , Coords234_g85002 , WorldPosition234_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85002) = _AlbedoTex8;
				SamplerState Sampler263_g85002 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition263_g85002 = worldPos;
				half3 WorldNormal263_g85002 = WorldNormal;
				half4 localSampleStochastic3D263_g85002 = SampleStochastic3D( Texture263_g85002 , Sampler263_g85002 , Coords263_g85002 , WorldPosition263_g85002 , WorldNormal263_g85002 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8693_g84942 = localSamplePlanar2D238_g85002;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8693_g84942 = localSamplePlanar3D246_g85002;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8693_g84942 = localSampleStochastic2D234_g85002;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8693_g84942 = localSampleStochastic3D263_g85002;
				#else
				float4 staticSwitch8693_g84942 = localSamplePlanar2D238_g85002;
				#endif
				half4 Layer439_g84958 = staticSwitch8693_g84942;
				float4 weightedBlendVar31_g84958 = Weights52_g84958;
				float4 weightedBlend31_g84958 = ( weightedBlendVar31_g84958.x*Layer133_g84958 + weightedBlendVar31_g84958.y*Layer237_g84958 + weightedBlendVar31_g84958.z*Layer338_g84958 + weightedBlendVar31_g84958.w*Layer439_g84958 );
				half4 Terrain_Albedo_088665_g84942 = weightedBlend31_g84958;
				half4 Layer_0810_g84954 = Terrain_Albedo_088665_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8794_g84942 = weights_127362_g84942;
				#else
				float4 staticSwitch8794_g84942 = control_127362_g84942;
				#endif
				half4 Terrain_Weights_127710_g84942 = staticSwitch8794_g84942;
				half4 Weights52_g84968 = Terrain_Weights_127710_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85011) = _AlbedoTex9;
				SamplerState Sampler238_g85011 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85011 = Input_Coords_098833_g84942;
				half4 Coords238_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition238_g85011 = worldPos;
				half4 localSamplePlanar2D238_g85011 = SamplePlanar2D( Texture238_g85011 , Sampler238_g85011 , Coords238_g85011 , WorldPosition238_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85011) = _AlbedoTex9;
				SamplerState Sampler246_g85011 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition246_g85011 = worldPos;
				half3 WorldNormal246_g85011 = WorldNormal;
				half4 localSamplePlanar3D246_g85011 = SamplePlanar3D( Texture246_g85011 , Sampler246_g85011 , Coords246_g85011 , WorldPosition246_g85011 , WorldNormal246_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85011) = _AlbedoTex9;
				SamplerState Sampler234_g85011 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85011 = temp_output_37_0_g85011;
				float3 WorldPosition234_g85011 = worldPos;
				float4 localSampleStochastic2D234_g85011 = SampleStochastic2D( Texture234_g85011 , Sampler234_g85011 , Coords234_g85011 , WorldPosition234_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85011) = _AlbedoTex9;
				SamplerState Sampler263_g85011 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition263_g85011 = worldPos;
				half3 WorldNormal263_g85011 = WorldNormal;
				half4 localSampleStochastic3D263_g85011 = SampleStochastic3D( Texture263_g85011 , Sampler263_g85011 , Coords263_g85011 , WorldPosition263_g85011 , WorldNormal263_g85011 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8872_g84942 = localSamplePlanar2D238_g85011;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8872_g84942 = localSamplePlanar3D246_g85011;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8872_g84942 = localSampleStochastic2D234_g85011;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8872_g84942 = localSampleStochastic3D263_g85011;
				#else
				float4 staticSwitch8872_g84942 = localSamplePlanar2D238_g85011;
				#endif
				half4 Layer133_g84968 = staticSwitch8872_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85012) = _AlbedoTex10;
				SamplerState Sampler238_g85012 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85012 = Input_Coords_108834_g84942;
				half4 Coords238_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition238_g85012 = worldPos;
				half4 localSamplePlanar2D238_g85012 = SamplePlanar2D( Texture238_g85012 , Sampler238_g85012 , Coords238_g85012 , WorldPosition238_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85012) = _AlbedoTex10;
				SamplerState Sampler246_g85012 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition246_g85012 = worldPos;
				half3 WorldNormal246_g85012 = WorldNormal;
				half4 localSamplePlanar3D246_g85012 = SamplePlanar3D( Texture246_g85012 , Sampler246_g85012 , Coords246_g85012 , WorldPosition246_g85012 , WorldNormal246_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85012) = _AlbedoTex10;
				SamplerState Sampler234_g85012 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85012 = temp_output_37_0_g85012;
				float3 WorldPosition234_g85012 = worldPos;
				float4 localSampleStochastic2D234_g85012 = SampleStochastic2D( Texture234_g85012 , Sampler234_g85012 , Coords234_g85012 , WorldPosition234_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85012) = _AlbedoTex10;
				SamplerState Sampler263_g85012 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition263_g85012 = worldPos;
				half3 WorldNormal263_g85012 = WorldNormal;
				half4 localSampleStochastic3D263_g85012 = SampleStochastic3D( Texture263_g85012 , Sampler263_g85012 , Coords263_g85012 , WorldPosition263_g85012 , WorldNormal263_g85012 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8873_g84942 = localSamplePlanar2D238_g85012;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8873_g84942 = localSamplePlanar3D246_g85012;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8873_g84942 = localSampleStochastic2D234_g85012;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8873_g84942 = localSampleStochastic3D263_g85012;
				#else
				float4 staticSwitch8873_g84942 = localSamplePlanar2D238_g85012;
				#endif
				half4 Layer237_g84968 = staticSwitch8873_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85013) = _AlbedoTex11;
				SamplerState Sampler238_g85013 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85013 = Input_Coords_118835_g84942;
				half4 Coords238_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition238_g85013 = worldPos;
				half4 localSamplePlanar2D238_g85013 = SamplePlanar2D( Texture238_g85013 , Sampler238_g85013 , Coords238_g85013 , WorldPosition238_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85013) = _AlbedoTex11;
				SamplerState Sampler246_g85013 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition246_g85013 = worldPos;
				half3 WorldNormal246_g85013 = WorldNormal;
				half4 localSamplePlanar3D246_g85013 = SamplePlanar3D( Texture246_g85013 , Sampler246_g85013 , Coords246_g85013 , WorldPosition246_g85013 , WorldNormal246_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85013) = _AlbedoTex11;
				SamplerState Sampler234_g85013 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85013 = temp_output_37_0_g85013;
				float3 WorldPosition234_g85013 = worldPos;
				float4 localSampleStochastic2D234_g85013 = SampleStochastic2D( Texture234_g85013 , Sampler234_g85013 , Coords234_g85013 , WorldPosition234_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85013) = _AlbedoTex11;
				SamplerState Sampler263_g85013 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition263_g85013 = worldPos;
				half3 WorldNormal263_g85013 = WorldNormal;
				half4 localSampleStochastic3D263_g85013 = SampleStochastic3D( Texture263_g85013 , Sampler263_g85013 , Coords263_g85013 , WorldPosition263_g85013 , WorldNormal263_g85013 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8874_g84942 = localSamplePlanar2D238_g85013;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8874_g84942 = localSamplePlanar3D246_g85013;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8874_g84942 = localSampleStochastic2D234_g85013;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8874_g84942 = localSampleStochastic3D263_g85013;
				#else
				float4 staticSwitch8874_g84942 = localSamplePlanar2D238_g85013;
				#endif
				half4 Layer338_g84968 = staticSwitch8874_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85014) = _AlbedoTex12;
				SamplerState Sampler238_g85014 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85014 = Input_Coords_128836_g84942;
				half4 Coords238_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition238_g85014 = worldPos;
				half4 localSamplePlanar2D238_g85014 = SamplePlanar2D( Texture238_g85014 , Sampler238_g85014 , Coords238_g85014 , WorldPosition238_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85014) = _AlbedoTex12;
				SamplerState Sampler246_g85014 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition246_g85014 = worldPos;
				half3 WorldNormal246_g85014 = WorldNormal;
				half4 localSamplePlanar3D246_g85014 = SamplePlanar3D( Texture246_g85014 , Sampler246_g85014 , Coords246_g85014 , WorldPosition246_g85014 , WorldNormal246_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85014) = _AlbedoTex12;
				SamplerState Sampler234_g85014 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85014 = temp_output_37_0_g85014;
				float3 WorldPosition234_g85014 = worldPos;
				float4 localSampleStochastic2D234_g85014 = SampleStochastic2D( Texture234_g85014 , Sampler234_g85014 , Coords234_g85014 , WorldPosition234_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85014) = _AlbedoTex12;
				SamplerState Sampler263_g85014 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition263_g85014 = worldPos;
				half3 WorldNormal263_g85014 = WorldNormal;
				half4 localSampleStochastic3D263_g85014 = SampleStochastic3D( Texture263_g85014 , Sampler263_g85014 , Coords263_g85014 , WorldPosition263_g85014 , WorldNormal263_g85014 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8875_g84942 = localSamplePlanar2D238_g85014;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8875_g84942 = localSamplePlanar3D246_g85014;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8875_g84942 = localSampleStochastic2D234_g85014;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8875_g84942 = localSampleStochastic3D263_g85014;
				#else
				float4 staticSwitch8875_g84942 = localSamplePlanar2D238_g85014;
				#endif
				half4 Layer439_g84968 = staticSwitch8875_g84942;
				float4 weightedBlendVar31_g84968 = Weights52_g84968;
				float4 weightedBlend31_g84968 = ( weightedBlendVar31_g84968.x*Layer133_g84968 + weightedBlendVar31_g84968.y*Layer237_g84968 + weightedBlendVar31_g84968.z*Layer338_g84968 + weightedBlendVar31_g84968.w*Layer439_g84968 );
				half4 Terrain_Albedo_128851_g84942 = weightedBlend31_g84968;
				half4 Layer_1243_g84954 = Terrain_Albedo_128851_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8795_g84942 = weights_167362_g84942;
				#else
				float4 staticSwitch8795_g84942 = control_167362_g84942;
				#endif
				half4 Terrain_Weights_167709_g84942 = staticSwitch8795_g84942;
				half4 Weights52_g84978 = Terrain_Weights_167709_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85023) = _AlbedoTex13;
				SamplerState Sampler238_g85023 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85023 = Input_Coords_138960_g84942;
				half4 Coords238_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition238_g85023 = worldPos;
				half4 localSamplePlanar2D238_g85023 = SamplePlanar2D( Texture238_g85023 , Sampler238_g85023 , Coords238_g85023 , WorldPosition238_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85023) = _AlbedoTex13;
				SamplerState Sampler246_g85023 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition246_g85023 = worldPos;
				half3 WorldNormal246_g85023 = WorldNormal;
				half4 localSamplePlanar3D246_g85023 = SamplePlanar3D( Texture246_g85023 , Sampler246_g85023 , Coords246_g85023 , WorldPosition246_g85023 , WorldNormal246_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85023) = _AlbedoTex13;
				SamplerState Sampler234_g85023 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85023 = temp_output_37_0_g85023;
				float3 WorldPosition234_g85023 = worldPos;
				float4 localSampleStochastic2D234_g85023 = SampleStochastic2D( Texture234_g85023 , Sampler234_g85023 , Coords234_g85023 , WorldPosition234_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85023) = _AlbedoTex13;
				SamplerState Sampler263_g85023 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition263_g85023 = worldPos;
				half3 WorldNormal263_g85023 = WorldNormal;
				half4 localSampleStochastic3D263_g85023 = SampleStochastic3D( Texture263_g85023 , Sampler263_g85023 , Coords263_g85023 , WorldPosition263_g85023 , WorldNormal263_g85023 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch8972_g84942 = localSamplePlanar2D238_g85023;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch8972_g84942 = localSamplePlanar3D246_g85023;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch8972_g84942 = localSampleStochastic2D234_g85023;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch8972_g84942 = localSampleStochastic3D263_g85023;
				#else
				float4 staticSwitch8972_g84942 = localSamplePlanar2D238_g85023;
				#endif
				half4 Layer133_g84978 = staticSwitch8972_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85024) = _AlbedoTex14;
				SamplerState Sampler238_g85024 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85024 = Input_Coords_148961_g84942;
				half4 Coords238_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition238_g85024 = worldPos;
				half4 localSamplePlanar2D238_g85024 = SamplePlanar2D( Texture238_g85024 , Sampler238_g85024 , Coords238_g85024 , WorldPosition238_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85024) = _AlbedoTex14;
				SamplerState Sampler246_g85024 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition246_g85024 = worldPos;
				half3 WorldNormal246_g85024 = WorldNormal;
				half4 localSamplePlanar3D246_g85024 = SamplePlanar3D( Texture246_g85024 , Sampler246_g85024 , Coords246_g85024 , WorldPosition246_g85024 , WorldNormal246_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85024) = _AlbedoTex14;
				SamplerState Sampler234_g85024 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85024 = temp_output_37_0_g85024;
				float3 WorldPosition234_g85024 = worldPos;
				float4 localSampleStochastic2D234_g85024 = SampleStochastic2D( Texture234_g85024 , Sampler234_g85024 , Coords234_g85024 , WorldPosition234_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85024) = _AlbedoTex14;
				SamplerState Sampler263_g85024 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition263_g85024 = worldPos;
				half3 WorldNormal263_g85024 = WorldNormal;
				half4 localSampleStochastic3D263_g85024 = SampleStochastic3D( Texture263_g85024 , Sampler263_g85024 , Coords263_g85024 , WorldPosition263_g85024 , WorldNormal263_g85024 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch8973_g84942 = localSamplePlanar2D238_g85024;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch8973_g84942 = localSamplePlanar3D246_g85024;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch8973_g84942 = localSampleStochastic2D234_g85024;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch8973_g84942 = localSampleStochastic3D263_g85024;
				#else
				float4 staticSwitch8973_g84942 = localSamplePlanar2D238_g85024;
				#endif
				half4 Layer237_g84978 = staticSwitch8973_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85025) = _AlbedoTex15;
				SamplerState Sampler238_g85025 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85025 = Input_Coords_158962_g84942;
				half4 Coords238_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition238_g85025 = worldPos;
				half4 localSamplePlanar2D238_g85025 = SamplePlanar2D( Texture238_g85025 , Sampler238_g85025 , Coords238_g85025 , WorldPosition238_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85025) = _AlbedoTex15;
				SamplerState Sampler246_g85025 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition246_g85025 = worldPos;
				half3 WorldNormal246_g85025 = WorldNormal;
				half4 localSamplePlanar3D246_g85025 = SamplePlanar3D( Texture246_g85025 , Sampler246_g85025 , Coords246_g85025 , WorldPosition246_g85025 , WorldNormal246_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85025) = _AlbedoTex15;
				SamplerState Sampler234_g85025 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85025 = temp_output_37_0_g85025;
				float3 WorldPosition234_g85025 = worldPos;
				float4 localSampleStochastic2D234_g85025 = SampleStochastic2D( Texture234_g85025 , Sampler234_g85025 , Coords234_g85025 , WorldPosition234_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85025) = _AlbedoTex15;
				SamplerState Sampler263_g85025 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition263_g85025 = worldPos;
				half3 WorldNormal263_g85025 = WorldNormal;
				half4 localSampleStochastic3D263_g85025 = SampleStochastic3D( Texture263_g85025 , Sampler263_g85025 , Coords263_g85025 , WorldPosition263_g85025 , WorldNormal263_g85025 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch8974_g84942 = localSamplePlanar2D238_g85025;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch8974_g84942 = localSamplePlanar3D246_g85025;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch8974_g84942 = localSampleStochastic2D234_g85025;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch8974_g84942 = localSampleStochastic3D263_g85025;
				#else
				float4 staticSwitch8974_g84942 = localSamplePlanar2D238_g85025;
				#endif
				half4 Layer338_g84978 = staticSwitch8974_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85026) = _AlbedoTex16;
				SamplerState Sampler238_g85026 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85026 = Input_Coords_168959_g84942;
				half4 Coords238_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition238_g85026 = worldPos;
				half4 localSamplePlanar2D238_g85026 = SamplePlanar2D( Texture238_g85026 , Sampler238_g85026 , Coords238_g85026 , WorldPosition238_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85026) = _AlbedoTex16;
				SamplerState Sampler246_g85026 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition246_g85026 = worldPos;
				half3 WorldNormal246_g85026 = WorldNormal;
				half4 localSamplePlanar3D246_g85026 = SamplePlanar3D( Texture246_g85026 , Sampler246_g85026 , Coords246_g85026 , WorldPosition246_g85026 , WorldNormal246_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85026) = _AlbedoTex16;
				SamplerState Sampler234_g85026 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85026 = temp_output_37_0_g85026;
				float3 WorldPosition234_g85026 = worldPos;
				float4 localSampleStochastic2D234_g85026 = SampleStochastic2D( Texture234_g85026 , Sampler234_g85026 , Coords234_g85026 , WorldPosition234_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85026) = _AlbedoTex16;
				SamplerState Sampler263_g85026 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition263_g85026 = worldPos;
				half3 WorldNormal263_g85026 = WorldNormal;
				half4 localSampleStochastic3D263_g85026 = SampleStochastic3D( Texture263_g85026 , Sampler263_g85026 , Coords263_g85026 , WorldPosition263_g85026 , WorldNormal263_g85026 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch8975_g84942 = localSamplePlanar2D238_g85026;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch8975_g84942 = localSamplePlanar3D246_g85026;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch8975_g84942 = localSampleStochastic2D234_g85026;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch8975_g84942 = localSampleStochastic3D263_g85026;
				#else
				float4 staticSwitch8975_g84942 = localSamplePlanar2D238_g85026;
				#endif
				half4 Layer439_g84978 = staticSwitch8975_g84942;
				float4 weightedBlendVar31_g84978 = Weights52_g84978;
				float4 weightedBlend31_g84978 = ( weightedBlendVar31_g84978.x*Layer133_g84978 + weightedBlendVar31_g84978.y*Layer237_g84978 + weightedBlendVar31_g84978.z*Layer338_g84978 + weightedBlendVar31_g84978.w*Layer439_g84978 );
				half4 Terrain_Albedo_168986_g84942 = weightedBlend31_g84978;
				half4 Layer_1644_g84954 = Terrain_Albedo_168986_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84954 = Layer_045_g84954;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 + Layer_1243_g84954 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 + Layer_1243_g84954 + Layer_1644_g84954 );
				#else
				float4 staticSwitch40_g84954 = Layer_045_g84954;
				#endif
				half4 Blend_Albedo7468_g84942 = staticSwitch40_g84954;
				half3 Terrain_Albedo8037_g84806 = ( (Blend_Albedo7468_g84942).xyz * (_TerrainColor).rgb );
				float vertexToFrag11_g84941 = IN.ase_texcoord9.z;
				half Terrain_Mask_Pixel7898_g84806 = vertexToFrag11_g84941;
				half2 Main_Normal137_g84806 = temp_output_6555_0_g84806;
				float2 lerpResult3372_g84806 = lerp( float2( 0,0 ) , Main_Normal137_g84806 , _DetailNormalValue);
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half4 Normal_Packed45_g84894 = SAMPLE_TEXTURE2D( _SecondNormalTex, sampler_Linear_Repeat, Second_UVs17_g84806 );
				float2 appendResult58_g84894 = (float2(( (Normal_Packed45_g84894).x * (Normal_Packed45_g84894).w ) , (Normal_Packed45_g84894).y));
				half2 Normal_Default50_g84894 = appendResult58_g84894;
				half2 Normal_ASTC41_g84894 = (Normal_Packed45_g84894).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g84894 = Normal_ASTC41_g84894;
				#else
				float2 staticSwitch38_g84894 = Normal_Default50_g84894;
				#endif
				half2 Normal_NO_DTX544_g84894 = (Normal_Packed45_g84894).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g84894 = Normal_NO_DTX544_g84894;
				#else
				float2 staticSwitch37_g84894 = staticSwitch38_g84894;
				#endif
				float2 temp_output_6560_0_g84806 = ( (staticSwitch37_g84894*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g84897 = temp_output_6560_0_g84806;
				float2 break64_g84897 = Normal_Planar45_g84897;
				float3 appendResult65_g84897 = (float3(break64_g84897.x , 0.0 , break64_g84897.y));
				float2 ifLocalVar7655_g84806 = 0;
				if( _SecondUVsMode == 2.0 )
				ifLocalVar7655_g84806 = (mul( ase_worldToTangent, appendResult65_g84897 )).xy;
				else if( _SecondUVsMode < 2.0 )
				ifLocalVar7655_g84806 = temp_output_6560_0_g84806;
				half2 Second_Normal179_g84806 = ifLocalVar7655_g84806;
				float2 temp_output_36_0_g84906 = ( lerpResult3372_g84806 + Second_Normal179_g84806 );
				float2 lerpResult3376_g84806 = lerp( Main_Normal137_g84806 , temp_output_36_0_g84906 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float2 staticSwitch267_g84806 = lerpResult3376_g84806;
				#else
				float2 staticSwitch267_g84806 = Main_Normal137_g84806;
				#endif
				half2 Blend_Normal_Detail312_g84806 = staticSwitch267_g84806;
				float3 appendResult7888_g84806 = (float3(Blend_Normal_Detail312_g84806 , 1.0));
				float3 tanNormal7889_g84806 = appendResult7888_g84806;
				float3 worldNormal7889_g84806 = float3(dot(tanToWorld0,tanNormal7889_g84806), dot(tanToWorld1,tanNormal7889_g84806), dot(tanToWorld2,tanNormal7889_g84806));
				half3 Blend_NormalWS_Detail7890_g84806 = worldNormal7889_g84806;
				float temp_output_7901_0_g84806 = saturate( (Blend_NormalWS_Detail7890_g84806).y );
				float temp_output_7895_0_g84806 = ( temp_output_7901_0_g84806 * temp_output_7901_0_g84806 * temp_output_7901_0_g84806 * temp_output_7901_0_g84806 );
				half Terrain_Mask_Projection7875_g84806 = ( temp_output_7895_0_g84806 * _TerrainMode );
				float temp_output_7_0_g84940 = _TerrainBlendMinValue;
				float temp_output_10_0_g84940 = ( _TerrainBlendMaxValue - temp_output_7_0_g84940 );
				half Terrain_Mask7747_g84806 = saturate( ( ( saturate( ( Terrain_Mask_Pixel7898_g84806 + ( Terrain_Mask_Pixel7898_g84806 * Terrain_Mask_Projection7875_g84806 ) ) ) - temp_output_7_0_g84940 ) / ( temp_output_10_0_g84940 + 0.0001 ) ) );
				float3 lerpResult7748_g84806 = lerp( Blend_Albedo_Tinted2808_g84806 , Terrain_Albedo8037_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7792_g84806 = lerpResult7748_g84806;
				#else
				float3 staticSwitch7792_g84806 = Blend_Albedo_Tinted2808_g84806;
				#endif
				half3 Blend_Albedo_Terrain7752_g84806 = staticSwitch7792_g84806;
				float3 temp_output_3_0_g84933 = Blend_Albedo_Terrain7752_g84806;
				float dotResult20_g84933 = dot( temp_output_3_0_g84933 , float3(0.2126,0.7152,0.0722) );
				half Blend_Albedo_Grayscale5939_g84806 = dotResult20_g84933;
				float3 temp_cast_10 = (Blend_Albedo_Grayscale5939_g84806).xxx;
				float temp_output_82_0_g84825 = _LayerColorsValue;
				float temp_output_19_0_g84829 = TVE_ColorsUsage[(int)temp_output_82_0_g84825];
				float4 temp_output_91_19_g84825 = TVE_ColorsCoords;
				float3 vertexToFrag3890_g84806 = IN.ase_texcoord10.xyz;
				float3 WorldPosition3905_g84806 = vertexToFrag3890_g84806;
				float3 vertexToFrag4224_g84806 = IN.ase_texcoord11.xyz;
				float3 ObjectPosition4223_g84806 = vertexToFrag4224_g84806;
				float3 lerpResult4822_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _ColorsPositionMode);
				half2 UV94_g84825 = ( (temp_output_91_19_g84825).zw + ( (temp_output_91_19_g84825).xy * (lerpResult4822_g84806).xz ) );
				float4 tex2DArrayNode83_g84825 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_ColorsTex, sampler_Linear_Clamp, float3(UV94_g84825,temp_output_82_0_g84825), 0.0 );
				float4 temp_output_17_0_g84829 = tex2DArrayNode83_g84825;
				float4 temp_output_92_86_g84825 = TVE_ColorsParams;
				float4 temp_output_3_0_g84829 = temp_output_92_86_g84825;
				float4 ifLocalVar18_g84829 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84829 >= 0.5 )
				ifLocalVar18_g84829 = temp_output_17_0_g84829;
				else
				ifLocalVar18_g84829 = temp_output_3_0_g84829;
				float4 lerpResult22_g84829 = lerp( temp_output_3_0_g84829 , temp_output_17_0_g84829 , temp_output_19_0_g84829);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84829 = lerpResult22_g84829;
				#else
				float4 staticSwitch24_g84829 = ifLocalVar18_g84829;
				#endif
				half4 Global_Colors_Params5434_g84806 = staticSwitch24_g84829;
				float4 temp_output_346_0_g84813 = Global_Colors_Params5434_g84806;
				half Global_Colors_A1701_g84806 = saturate( (temp_output_346_0_g84813).w );
				half Colors_Influence3668_g84806 = Global_Colors_A1701_g84806;
				float temp_output_6306_0_g84806 = ( 1.0 - Colors_Influence3668_g84806 );
				float3 lerpResult3618_g84806 = lerp( Blend_Albedo_Terrain7752_g84806 , temp_cast_10 , ( 1.0 - ( temp_output_6306_0_g84806 * temp_output_6306_0_g84806 ) ));
				half3 Global_Colors_RGB1700_g84806 = (temp_output_346_0_g84813).xyz;
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g84922 = 2.0;
				#else
				float staticSwitch1_g84922 = 4.594794;
				#endif
				half3 Colors_RGB1954_g84806 = ( Global_Colors_RGB1700_g84806 * staticSwitch1_g84922 * _ColorsIntensityValue );
				half4 Weights52_g84950 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84950 = _Specular1;
				half4 Layer237_g84950 = _Specular2;
				half4 Layer338_g84950 = _Specular3;
				half4 Layer439_g84950 = _Specular4;
				float4 weightedBlendVar31_g84950 = Weights52_g84950;
				float4 weightedBlend31_g84950 = ( weightedBlendVar31_g84950.x*Layer133_g84950 + weightedBlendVar31_g84950.y*Layer237_g84950 + weightedBlendVar31_g84950.z*Layer338_g84950 + weightedBlendVar31_g84950.w*Layer439_g84950 );
				half4 Terrain_Specular_047390_g84942 = weightedBlend31_g84950;
				half4 Layer_045_g84957 = Terrain_Specular_047390_g84942;
				half4 Weights52_g84967 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84967 = _Specular5;
				half4 Layer237_g84967 = _Specular6;
				half4 Layer338_g84967 = _Specular7;
				half4 Layer439_g84967 = _Specular8;
				float4 weightedBlendVar31_g84967 = Weights52_g84967;
				float4 weightedBlend31_g84967 = ( weightedBlendVar31_g84967.x*Layer133_g84967 + weightedBlendVar31_g84967.y*Layer237_g84967 + weightedBlendVar31_g84967.z*Layer338_g84967 + weightedBlendVar31_g84967.w*Layer439_g84967 );
				half4 Terrain_Specular_088745_g84942 = weightedBlend31_g84967;
				half4 Layer_0810_g84957 = Terrain_Specular_088745_g84942;
				half4 Weights52_g84977 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84977 = _Specular9;
				half4 Layer237_g84977 = _Specular10;
				half4 Layer338_g84977 = _Specular11;
				half4 Layer439_g84977 = _Specular12;
				float4 weightedBlendVar31_g84977 = Weights52_g84977;
				float4 weightedBlend31_g84977 = ( weightedBlendVar31_g84977.x*Layer133_g84977 + weightedBlendVar31_g84977.y*Layer237_g84977 + weightedBlendVar31_g84977.z*Layer338_g84977 + weightedBlendVar31_g84977.w*Layer439_g84977 );
				half4 Terrain_Specular_128869_g84942 = weightedBlend31_g84977;
				half4 Layer_1243_g84957 = Terrain_Specular_128869_g84942;
				half4 Weights52_g84987 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84987 = _Specular13;
				half4 Layer237_g84987 = _Specular14;
				half4 Layer338_g84987 = _Specular15;
				half4 Layer439_g84987 = _Specular16;
				float4 weightedBlendVar31_g84987 = Weights52_g84987;
				float4 weightedBlend31_g84987 = ( weightedBlendVar31_g84987.x*Layer133_g84987 + weightedBlendVar31_g84987.y*Layer237_g84987 + weightedBlendVar31_g84987.z*Layer338_g84987 + weightedBlendVar31_g84987.w*Layer439_g84987 );
				half4 Terrain_Specular_169019_g84942 = weightedBlend31_g84987;
				half4 Layer_1644_g84957 = Terrain_Specular_169019_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84957 = Layer_045_g84957;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 + Layer_1243_g84957 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 + Layer_1243_g84957 + Layer_1644_g84957 );
				#else
				float4 staticSwitch40_g84957 = Layer_045_g84957;
				#endif
				half4 Blend_Specular7446_g84942 = staticSwitch40_g84957;
				half Terrain_ColorsMask7937_g84806 = ( (Blend_Specular7446_g84942).a * (Blend_Albedo7468_g84942).w );
				float lerpResult7939_g84806 = lerp( Blend_MaskRemap_Detail6621_g84806 , Terrain_ColorsMask7937_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float staticSwitch7922_g84806 = lerpResult7939_g84806;
				#else
				float staticSwitch7922_g84806 = Blend_MaskRemap_Detail6621_g84806;
				#endif
				half Blend_ColorsMask_Terrain7921_g84806 = staticSwitch7922_g84806;
				half Colors_Value3692_g84806 = ( Blend_ColorsMask_Terrain7921_g84806 * _GlobalColors );
				float3 ObjectPosition_Shifted7481_g84806 = ( ObjectPosition4223_g84806 - TVE_WorldOrigin );
				half3 Input_Position167_g84900 = ObjectPosition_Shifted7481_g84806;
				float dotResult156_g84900 = dot( (Input_Position167_g84900).xz , float2( 12.9898,78.233 ) );
				half Vertex_DynamicMode5112_g84806 = _VertexDynamicMode;
				half Input_DynamicMode120_g84900 = Vertex_DynamicMode5112_g84806;
				float Postion_Random162_g84900 = ( sin( dotResult156_g84900 ) * ( 1.0 - Input_DynamicMode120_g84900 ) );
				float Mesh_Variation16_g84806 = IN.ase_color.r;
				half Input_Variation124_g84900 = Mesh_Variation16_g84806;
				half ObjectData20_g84902 = frac( ( Postion_Random162_g84900 + Input_Variation124_g84900 ) );
				half WorldData19_g84902 = Input_Variation124_g84900;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84902 = WorldData19_g84902;
				#else
				float staticSwitch14_g84902 = ObjectData20_g84902;
				#endif
				float temp_output_112_0_g84900 = staticSwitch14_g84902;
				float clampResult171_g84900 = clamp( temp_output_112_0_g84900 , 0.01 , 0.99 );
				float Global_MeshVariation5104_g84806 = clampResult171_g84900;
				float lerpResult3870_g84806 = lerp( 1.0 , Global_MeshVariation5104_g84806 , _ColorsVariationValue);
				half Colors_Variation3650_g84806 = lerpResult3870_g84806;
				half Occlusion_Alpha6463_g84806 = _VertexOcclusionColor.a;
				float lerpResult8028_g84806 = lerp( Occlusion_Mask6432_g84806 , ( 1.0 - Occlusion_Mask6432_g84806 ) , _VertexOcclusionColorsMode);
				float lerpResult8026_g84806 = lerp( Occlusion_Alpha6463_g84806 , 1.0 , lerpResult8028_g84806);
				half Occlusion_Colors6450_g84806 = lerpResult8026_g84806;
				float3 temp_output_3_0_g84934 = ( Blend_Albedo_Terrain7752_g84806 * Tint_Gradient_Color5769_g84806 * Tint_Noise_Color5770_g84806 * Tint_User_Color7335_g84806 );
				float dotResult20_g84934 = dot( temp_output_3_0_g84934 , float3(0.2126,0.7152,0.0722) );
				float clampResult6740_g84806 = clamp( saturate( ( dotResult20_g84934 * 5.0 ) ) , 0.2 , 1.0 );
				half Blend_Albedo_Globals6410_g84806 = clampResult6740_g84806;
				float temp_output_7_0_g84930 = 0.1;
				float temp_output_10_0_g84930 = ( 0.2 - temp_output_7_0_g84930 );
				float lerpResult16_g84923 = lerp( 0.0 , saturate( ( ( ( Colors_Value3692_g84806 * Colors_Influence3668_g84806 * Colors_Variation3650_g84806 * Occlusion_Colors6450_g84806 * Blend_Albedo_Globals6410_g84806 ) - temp_output_7_0_g84930 ) / ( temp_output_10_0_g84930 + 0.0001 ) ) ) , TVE_IsEnabled);
				float3 lerpResult3628_g84806 = lerp( Blend_Albedo_Terrain7752_g84806 , ( lerpResult3618_g84806 * Colors_RGB1954_g84806 ) , lerpResult16_g84923);
				half3 Blend_Albedo_Colored_High6027_g84806 = lerpResult3628_g84806;
				half3 Blend_Albedo_Colored863_g84806 = Blend_Albedo_Colored_High6027_g84806;
				half3 Global_OverlayColor1758_g84806 = (TVE_OverlayColor).rgb;
				float temp_output_84_0_g84820 = _LayerExtrasValue;
				float temp_output_19_0_g84824 = TVE_ExtrasUsage[(int)temp_output_84_0_g84820];
				float4 temp_output_93_19_g84820 = TVE_ExtrasCoords;
				float3 lerpResult4827_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _ExtrasPositionMode);
				half2 UV96_g84820 = ( (temp_output_93_19_g84820).zw + ( (temp_output_93_19_g84820).xy * (lerpResult4827_g84806).xz ) );
				float4 tex2DArrayNode48_g84820 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_ExtrasTex, sampler_Linear_Clamp, float3(UV96_g84820,temp_output_84_0_g84820), 0.0 );
				float4 temp_output_17_0_g84824 = tex2DArrayNode48_g84820;
				float4 temp_output_94_85_g84820 = TVE_ExtrasParams;
				float4 temp_output_3_0_g84824 = temp_output_94_85_g84820;
				float4 ifLocalVar18_g84824 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84824 >= 0.5 )
				ifLocalVar18_g84824 = temp_output_17_0_g84824;
				else
				ifLocalVar18_g84824 = temp_output_3_0_g84824;
				float4 lerpResult22_g84824 = lerp( temp_output_3_0_g84824 , temp_output_17_0_g84824 , temp_output_19_0_g84824);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84824 = lerpResult22_g84824;
				#else
				float4 staticSwitch24_g84824 = ifLocalVar18_g84824;
				#endif
				half4 Global_Extras_Params5440_g84806 = staticSwitch24_g84824;
				float4 break456_g84833 = Global_Extras_Params5440_g84806;
				half Global_Extras_Overlay156_g84806 = break456_g84833.z;
				float lerpResult1065_g84806 = lerp( 1.0 , Global_MeshVariation5104_g84806 , _OverlayVariationValue);
				half Overlay_Variation4560_g84806 = lerpResult1065_g84806;
				half Overlay_Value5738_g84806 = ( _GlobalOverlay * Global_Extras_Overlay156_g84806 * Overlay_Variation4560_g84806 );
				half4 Weights52_g84943 = Terrain_Weights_046781_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84991) = _NormalTex1;
				SamplerState Sampler238_g84991 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84991 = Input_Coords_016785_g84942;
				half4 Coords238_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition238_g84991 = worldPos;
				half4 localSamplePlanar2D238_g84991 = SamplePlanar2D( Texture238_g84991 , Sampler238_g84991 , Coords238_g84991 , WorldPosition238_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84991) = _NormalTex1;
				SamplerState Sampler246_g84991 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition246_g84991 = worldPos;
				half3 WorldNormal246_g84991 = WorldNormal;
				half4 localSamplePlanar3D246_g84991 = SamplePlanar3D( Texture246_g84991 , Sampler246_g84991 , Coords246_g84991 , WorldPosition246_g84991 , WorldNormal246_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84991) = _NormalTex1;
				SamplerState Sampler234_g84991 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84991 = temp_output_37_0_g84991;
				float3 WorldPosition234_g84991 = worldPos;
				float4 localSampleStochastic2D234_g84991 = SampleStochastic2D( Texture234_g84991 , Sampler234_g84991 , Coords234_g84991 , WorldPosition234_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84991) = _NormalTex1;
				SamplerState Sampler263_g84991 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition263_g84991 = worldPos;
				half3 WorldNormal263_g84991 = WorldNormal;
				half4 localSampleStochastic3D263_g84991 = SampleStochastic3D( Texture263_g84991 , Sampler263_g84991 , Coords263_g84991 , WorldPosition263_g84991 , WorldNormal263_g84991 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8635_g84942 = localSamplePlanar2D238_g84991;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8635_g84942 = localSamplePlanar3D246_g84991;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8635_g84942 = localSampleStochastic2D234_g84991;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8635_g84942 = localSampleStochastic3D263_g84991;
				#else
				float4 staticSwitch8635_g84942 = localSamplePlanar2D238_g84991;
				#endif
				half4 Layer133_g84943 = staticSwitch8635_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84992) = _NormalTex2;
				SamplerState Sampler238_g84992 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84992 = Input_Coords_026787_g84942;
				half4 Coords238_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition238_g84992 = worldPos;
				half4 localSamplePlanar2D238_g84992 = SamplePlanar2D( Texture238_g84992 , Sampler238_g84992 , Coords238_g84992 , WorldPosition238_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84992) = _NormalTex2;
				SamplerState Sampler246_g84992 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition246_g84992 = worldPos;
				half3 WorldNormal246_g84992 = WorldNormal;
				half4 localSamplePlanar3D246_g84992 = SamplePlanar3D( Texture246_g84992 , Sampler246_g84992 , Coords246_g84992 , WorldPosition246_g84992 , WorldNormal246_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84992) = _NormalTex2;
				SamplerState Sampler234_g84992 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84992 = temp_output_37_0_g84992;
				float3 WorldPosition234_g84992 = worldPos;
				float4 localSampleStochastic2D234_g84992 = SampleStochastic2D( Texture234_g84992 , Sampler234_g84992 , Coords234_g84992 , WorldPosition234_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84992) = _NormalTex2;
				SamplerState Sampler263_g84992 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition263_g84992 = worldPos;
				half3 WorldNormal263_g84992 = WorldNormal;
				half4 localSampleStochastic3D263_g84992 = SampleStochastic3D( Texture263_g84992 , Sampler263_g84992 , Coords263_g84992 , WorldPosition263_g84992 , WorldNormal263_g84992 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8636_g84942 = localSamplePlanar2D238_g84992;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8636_g84942 = localSamplePlanar3D246_g84992;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8636_g84942 = localSampleStochastic2D234_g84992;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8636_g84942 = localSampleStochastic3D263_g84992;
				#else
				float4 staticSwitch8636_g84942 = localSamplePlanar2D238_g84992;
				#endif
				half4 Layer237_g84943 = staticSwitch8636_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84993) = _NormalTex3;
				SamplerState Sampler238_g84993 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84993 = Input_Coords_036789_g84942;
				half4 Coords238_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition238_g84993 = worldPos;
				half4 localSamplePlanar2D238_g84993 = SamplePlanar2D( Texture238_g84993 , Sampler238_g84993 , Coords238_g84993 , WorldPosition238_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84993) = _NormalTex3;
				SamplerState Sampler246_g84993 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition246_g84993 = worldPos;
				half3 WorldNormal246_g84993 = WorldNormal;
				half4 localSamplePlanar3D246_g84993 = SamplePlanar3D( Texture246_g84993 , Sampler246_g84993 , Coords246_g84993 , WorldPosition246_g84993 , WorldNormal246_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84993) = _NormalTex3;
				SamplerState Sampler234_g84993 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84993 = temp_output_37_0_g84993;
				float3 WorldPosition234_g84993 = worldPos;
				float4 localSampleStochastic2D234_g84993 = SampleStochastic2D( Texture234_g84993 , Sampler234_g84993 , Coords234_g84993 , WorldPosition234_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84993) = _NormalTex3;
				SamplerState Sampler263_g84993 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition263_g84993 = worldPos;
				half3 WorldNormal263_g84993 = WorldNormal;
				half4 localSampleStochastic3D263_g84993 = SampleStochastic3D( Texture263_g84993 , Sampler263_g84993 , Coords263_g84993 , WorldPosition263_g84993 , WorldNormal263_g84993 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8637_g84942 = localSamplePlanar2D238_g84993;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8637_g84942 = localSamplePlanar3D246_g84993;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8637_g84942 = localSampleStochastic2D234_g84993;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8637_g84942 = localSampleStochastic3D263_g84993;
				#else
				float4 staticSwitch8637_g84942 = localSamplePlanar2D238_g84993;
				#endif
				half4 Layer338_g84943 = staticSwitch8637_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84994) = _NormalTex4;
				SamplerState Sampler238_g84994 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84994 = Input_Coords_046791_g84942;
				half4 Coords238_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition238_g84994 = worldPos;
				half4 localSamplePlanar2D238_g84994 = SamplePlanar2D( Texture238_g84994 , Sampler238_g84994 , Coords238_g84994 , WorldPosition238_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84994) = _NormalTex4;
				SamplerState Sampler246_g84994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition246_g84994 = worldPos;
				half3 WorldNormal246_g84994 = WorldNormal;
				half4 localSamplePlanar3D246_g84994 = SamplePlanar3D( Texture246_g84994 , Sampler246_g84994 , Coords246_g84994 , WorldPosition246_g84994 , WorldNormal246_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84994) = _NormalTex4;
				SamplerState Sampler234_g84994 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84994 = temp_output_37_0_g84994;
				float3 WorldPosition234_g84994 = worldPos;
				float4 localSampleStochastic2D234_g84994 = SampleStochastic2D( Texture234_g84994 , Sampler234_g84994 , Coords234_g84994 , WorldPosition234_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84994) = _NormalTex4;
				SamplerState Sampler263_g84994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition263_g84994 = worldPos;
				half3 WorldNormal263_g84994 = WorldNormal;
				half4 localSampleStochastic3D263_g84994 = SampleStochastic3D( Texture263_g84994 , Sampler263_g84994 , Coords263_g84994 , WorldPosition263_g84994 , WorldNormal263_g84994 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8638_g84942 = localSamplePlanar2D238_g84994;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8638_g84942 = localSamplePlanar3D246_g84994;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8638_g84942 = localSampleStochastic2D234_g84994;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8638_g84942 = localSampleStochastic3D263_g84994;
				#else
				float4 staticSwitch8638_g84942 = localSamplePlanar2D238_g84994;
				#endif
				half4 Layer439_g84943 = staticSwitch8638_g84942;
				float4 weightedBlendVar31_g84943 = Weights52_g84943;
				float4 weightedBlend31_g84943 = ( weightedBlendVar31_g84943.x*Layer133_g84943 + weightedBlendVar31_g84943.y*Layer237_g84943 + weightedBlendVar31_g84943.z*Layer338_g84943 + weightedBlendVar31_g84943.w*Layer439_g84943 );
				half4 Terrain_Normal_047202_g84942 = weightedBlend31_g84943;
				half4 Layer_045_g84953 = Terrain_Normal_047202_g84942;
				half4 Weights52_g84959 = Terrain_Weights_087340_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85003) = _NormalTex5;
				SamplerState Sampler238_g85003 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85003 = Input_Coords_058750_g84942;
				half4 Coords238_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition238_g85003 = worldPos;
				half4 localSamplePlanar2D238_g85003 = SamplePlanar2D( Texture238_g85003 , Sampler238_g85003 , Coords238_g85003 , WorldPosition238_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85003) = _NormalTex5;
				SamplerState Sampler246_g85003 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition246_g85003 = worldPos;
				half3 WorldNormal246_g85003 = WorldNormal;
				half4 localSamplePlanar3D246_g85003 = SamplePlanar3D( Texture246_g85003 , Sampler246_g85003 , Coords246_g85003 , WorldPosition246_g85003 , WorldNormal246_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85003) = _NormalTex5;
				SamplerState Sampler234_g85003 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85003 = temp_output_37_0_g85003;
				float3 WorldPosition234_g85003 = worldPos;
				float4 localSampleStochastic2D234_g85003 = SampleStochastic2D( Texture234_g85003 , Sampler234_g85003 , Coords234_g85003 , WorldPosition234_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85003) = _NormalTex5;
				SamplerState Sampler263_g85003 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition263_g85003 = worldPos;
				half3 WorldNormal263_g85003 = WorldNormal;
				half4 localSampleStochastic3D263_g85003 = SampleStochastic3D( Texture263_g85003 , Sampler263_g85003 , Coords263_g85003 , WorldPosition263_g85003 , WorldNormal263_g85003 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8686_g84942 = localSamplePlanar2D238_g85003;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8686_g84942 = localSamplePlanar3D246_g85003;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8686_g84942 = localSampleStochastic2D234_g85003;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8686_g84942 = localSampleStochastic3D263_g85003;
				#else
				float4 staticSwitch8686_g84942 = localSamplePlanar2D238_g85003;
				#endif
				half4 Layer133_g84959 = staticSwitch8686_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85004) = _NormalTex6;
				SamplerState Sampler238_g85004 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85004 = Input_Coords_068751_g84942;
				half4 Coords238_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition238_g85004 = worldPos;
				half4 localSamplePlanar2D238_g85004 = SamplePlanar2D( Texture238_g85004 , Sampler238_g85004 , Coords238_g85004 , WorldPosition238_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85004) = _NormalTex6;
				SamplerState Sampler246_g85004 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition246_g85004 = worldPos;
				half3 WorldNormal246_g85004 = WorldNormal;
				half4 localSamplePlanar3D246_g85004 = SamplePlanar3D( Texture246_g85004 , Sampler246_g85004 , Coords246_g85004 , WorldPosition246_g85004 , WorldNormal246_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85004) = _NormalTex6;
				SamplerState Sampler234_g85004 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85004 = temp_output_37_0_g85004;
				float3 WorldPosition234_g85004 = worldPos;
				float4 localSampleStochastic2D234_g85004 = SampleStochastic2D( Texture234_g85004 , Sampler234_g85004 , Coords234_g85004 , WorldPosition234_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85004) = _NormalTex6;
				SamplerState Sampler263_g85004 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition263_g85004 = worldPos;
				half3 WorldNormal263_g85004 = WorldNormal;
				half4 localSampleStochastic3D263_g85004 = SampleStochastic3D( Texture263_g85004 , Sampler263_g85004 , Coords263_g85004 , WorldPosition263_g85004 , WorldNormal263_g85004 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8687_g84942 = localSamplePlanar2D238_g85004;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8687_g84942 = localSamplePlanar3D246_g85004;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8687_g84942 = localSampleStochastic2D234_g85004;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8687_g84942 = localSampleStochastic3D263_g85004;
				#else
				float4 staticSwitch8687_g84942 = localSamplePlanar2D238_g85004;
				#endif
				half4 Layer237_g84959 = staticSwitch8687_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85005) = _NormalTex7;
				SamplerState Sampler238_g85005 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85005 = Input_Coords_078752_g84942;
				half4 Coords238_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition238_g85005 = worldPos;
				half4 localSamplePlanar2D238_g85005 = SamplePlanar2D( Texture238_g85005 , Sampler238_g85005 , Coords238_g85005 , WorldPosition238_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85005) = _NormalTex7;
				SamplerState Sampler246_g85005 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition246_g85005 = worldPos;
				half3 WorldNormal246_g85005 = WorldNormal;
				half4 localSamplePlanar3D246_g85005 = SamplePlanar3D( Texture246_g85005 , Sampler246_g85005 , Coords246_g85005 , WorldPosition246_g85005 , WorldNormal246_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85005) = _NormalTex7;
				SamplerState Sampler234_g85005 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85005 = temp_output_37_0_g85005;
				float3 WorldPosition234_g85005 = worldPos;
				float4 localSampleStochastic2D234_g85005 = SampleStochastic2D( Texture234_g85005 , Sampler234_g85005 , Coords234_g85005 , WorldPosition234_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85005) = _NormalTex7;
				SamplerState Sampler263_g85005 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition263_g85005 = worldPos;
				half3 WorldNormal263_g85005 = WorldNormal;
				half4 localSampleStochastic3D263_g85005 = SampleStochastic3D( Texture263_g85005 , Sampler263_g85005 , Coords263_g85005 , WorldPosition263_g85005 , WorldNormal263_g85005 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8688_g84942 = localSamplePlanar2D238_g85005;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8688_g84942 = localSamplePlanar3D246_g85005;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8688_g84942 = localSampleStochastic2D234_g85005;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8688_g84942 = localSampleStochastic3D263_g85005;
				#else
				float4 staticSwitch8688_g84942 = localSamplePlanar2D238_g85005;
				#endif
				half4 Layer338_g84959 = staticSwitch8688_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85006) = _NormalTex8;
				SamplerState Sampler238_g85006 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85006 = Input_Coords_088749_g84942;
				half4 Coords238_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition238_g85006 = worldPos;
				half4 localSamplePlanar2D238_g85006 = SamplePlanar2D( Texture238_g85006 , Sampler238_g85006 , Coords238_g85006 , WorldPosition238_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85006) = _NormalTex8;
				SamplerState Sampler246_g85006 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition246_g85006 = worldPos;
				half3 WorldNormal246_g85006 = WorldNormal;
				half4 localSamplePlanar3D246_g85006 = SamplePlanar3D( Texture246_g85006 , Sampler246_g85006 , Coords246_g85006 , WorldPosition246_g85006 , WorldNormal246_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85006) = _NormalTex8;
				SamplerState Sampler234_g85006 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85006 = temp_output_37_0_g85006;
				float3 WorldPosition234_g85006 = worldPos;
				float4 localSampleStochastic2D234_g85006 = SampleStochastic2D( Texture234_g85006 , Sampler234_g85006 , Coords234_g85006 , WorldPosition234_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85006) = _NormalTex8;
				SamplerState Sampler263_g85006 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition263_g85006 = worldPos;
				half3 WorldNormal263_g85006 = WorldNormal;
				half4 localSampleStochastic3D263_g85006 = SampleStochastic3D( Texture263_g85006 , Sampler263_g85006 , Coords263_g85006 , WorldPosition263_g85006 , WorldNormal263_g85006 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8689_g84942 = localSamplePlanar2D238_g85006;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8689_g84942 = localSamplePlanar3D246_g85006;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8689_g84942 = localSampleStochastic2D234_g85006;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8689_g84942 = localSampleStochastic3D263_g85006;
				#else
				float4 staticSwitch8689_g84942 = localSamplePlanar2D238_g85006;
				#endif
				half4 Layer439_g84959 = staticSwitch8689_g84942;
				float4 weightedBlendVar31_g84959 = Weights52_g84959;
				float4 weightedBlend31_g84959 = ( weightedBlendVar31_g84959.x*Layer133_g84959 + weightedBlendVar31_g84959.y*Layer237_g84959 + weightedBlendVar31_g84959.z*Layer338_g84959 + weightedBlendVar31_g84959.w*Layer439_g84959 );
				half4 Terrain_Normal_088684_g84942 = weightedBlend31_g84959;
				half4 Layer_0810_g84953 = Terrain_Normal_088684_g84942;
				half4 Weights52_g84969 = Terrain_Weights_127710_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85015) = _NormalTex9;
				SamplerState Sampler238_g85015 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85015 = Input_Coords_098833_g84942;
				half4 Coords238_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition238_g85015 = worldPos;
				half4 localSamplePlanar2D238_g85015 = SamplePlanar2D( Texture238_g85015 , Sampler238_g85015 , Coords238_g85015 , WorldPosition238_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85015) = _NormalTex9;
				SamplerState Sampler246_g85015 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition246_g85015 = worldPos;
				half3 WorldNormal246_g85015 = WorldNormal;
				half4 localSamplePlanar3D246_g85015 = SamplePlanar3D( Texture246_g85015 , Sampler246_g85015 , Coords246_g85015 , WorldPosition246_g85015 , WorldNormal246_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85015) = _NormalTex9;
				SamplerState Sampler234_g85015 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85015 = temp_output_37_0_g85015;
				float3 WorldPosition234_g85015 = worldPos;
				float4 localSampleStochastic2D234_g85015 = SampleStochastic2D( Texture234_g85015 , Sampler234_g85015 , Coords234_g85015 , WorldPosition234_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85015) = _NormalTex9;
				SamplerState Sampler263_g85015 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition263_g85015 = worldPos;
				half3 WorldNormal263_g85015 = WorldNormal;
				half4 localSampleStochastic3D263_g85015 = SampleStochastic3D( Texture263_g85015 , Sampler263_g85015 , Coords263_g85015 , WorldPosition263_g85015 , WorldNormal263_g85015 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8849_g84942 = localSamplePlanar2D238_g85015;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8849_g84942 = localSamplePlanar3D246_g85015;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8849_g84942 = localSampleStochastic2D234_g85015;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8849_g84942 = localSampleStochastic3D263_g85015;
				#else
				float4 staticSwitch8849_g84942 = localSamplePlanar2D238_g85015;
				#endif
				half4 Layer133_g84969 = staticSwitch8849_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85016) = _NormalTex10;
				SamplerState Sampler238_g85016 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85016 = Input_Coords_108834_g84942;
				half4 Coords238_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition238_g85016 = worldPos;
				half4 localSamplePlanar2D238_g85016 = SamplePlanar2D( Texture238_g85016 , Sampler238_g85016 , Coords238_g85016 , WorldPosition238_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85016) = _NormalTex10;
				SamplerState Sampler246_g85016 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition246_g85016 = worldPos;
				half3 WorldNormal246_g85016 = WorldNormal;
				half4 localSamplePlanar3D246_g85016 = SamplePlanar3D( Texture246_g85016 , Sampler246_g85016 , Coords246_g85016 , WorldPosition246_g85016 , WorldNormal246_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85016) = _NormalTex10;
				SamplerState Sampler234_g85016 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85016 = temp_output_37_0_g85016;
				float3 WorldPosition234_g85016 = worldPos;
				float4 localSampleStochastic2D234_g85016 = SampleStochastic2D( Texture234_g85016 , Sampler234_g85016 , Coords234_g85016 , WorldPosition234_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85016) = _NormalTex10;
				SamplerState Sampler263_g85016 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition263_g85016 = worldPos;
				half3 WorldNormal263_g85016 = WorldNormal;
				half4 localSampleStochastic3D263_g85016 = SampleStochastic3D( Texture263_g85016 , Sampler263_g85016 , Coords263_g85016 , WorldPosition263_g85016 , WorldNormal263_g85016 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8876_g84942 = localSamplePlanar2D238_g85016;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8876_g84942 = localSamplePlanar3D246_g85016;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8876_g84942 = localSampleStochastic2D234_g85016;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8876_g84942 = localSampleStochastic3D263_g85016;
				#else
				float4 staticSwitch8876_g84942 = localSamplePlanar2D238_g85016;
				#endif
				half4 Layer237_g84969 = staticSwitch8876_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85017) = _NormalTex11;
				SamplerState Sampler238_g85017 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85017 = Input_Coords_118835_g84942;
				half4 Coords238_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition238_g85017 = worldPos;
				half4 localSamplePlanar2D238_g85017 = SamplePlanar2D( Texture238_g85017 , Sampler238_g85017 , Coords238_g85017 , WorldPosition238_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85017) = _NormalTex11;
				SamplerState Sampler246_g85017 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition246_g85017 = worldPos;
				half3 WorldNormal246_g85017 = WorldNormal;
				half4 localSamplePlanar3D246_g85017 = SamplePlanar3D( Texture246_g85017 , Sampler246_g85017 , Coords246_g85017 , WorldPosition246_g85017 , WorldNormal246_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85017) = _NormalTex11;
				SamplerState Sampler234_g85017 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85017 = temp_output_37_0_g85017;
				float3 WorldPosition234_g85017 = worldPos;
				float4 localSampleStochastic2D234_g85017 = SampleStochastic2D( Texture234_g85017 , Sampler234_g85017 , Coords234_g85017 , WorldPosition234_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85017) = _NormalTex11;
				SamplerState Sampler263_g85017 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition263_g85017 = worldPos;
				half3 WorldNormal263_g85017 = WorldNormal;
				half4 localSampleStochastic3D263_g85017 = SampleStochastic3D( Texture263_g85017 , Sampler263_g85017 , Coords263_g85017 , WorldPosition263_g85017 , WorldNormal263_g85017 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8850_g84942 = localSamplePlanar2D238_g85017;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8850_g84942 = localSamplePlanar3D246_g85017;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8850_g84942 = localSampleStochastic2D234_g85017;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8850_g84942 = localSampleStochastic3D263_g85017;
				#else
				float4 staticSwitch8850_g84942 = localSamplePlanar2D238_g85017;
				#endif
				half4 Layer338_g84969 = staticSwitch8850_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85018) = _NormalTex12;
				SamplerState Sampler238_g85018 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85018 = Input_Coords_128836_g84942;
				half4 Coords238_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition238_g85018 = worldPos;
				half4 localSamplePlanar2D238_g85018 = SamplePlanar2D( Texture238_g85018 , Sampler238_g85018 , Coords238_g85018 , WorldPosition238_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85018) = _NormalTex12;
				SamplerState Sampler246_g85018 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition246_g85018 = worldPos;
				half3 WorldNormal246_g85018 = WorldNormal;
				half4 localSamplePlanar3D246_g85018 = SamplePlanar3D( Texture246_g85018 , Sampler246_g85018 , Coords246_g85018 , WorldPosition246_g85018 , WorldNormal246_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85018) = _NormalTex12;
				SamplerState Sampler234_g85018 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85018 = temp_output_37_0_g85018;
				float3 WorldPosition234_g85018 = worldPos;
				float4 localSampleStochastic2D234_g85018 = SampleStochastic2D( Texture234_g85018 , Sampler234_g85018 , Coords234_g85018 , WorldPosition234_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85018) = _NormalTex12;
				SamplerState Sampler263_g85018 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition263_g85018 = worldPos;
				half3 WorldNormal263_g85018 = WorldNormal;
				half4 localSampleStochastic3D263_g85018 = SampleStochastic3D( Texture263_g85018 , Sampler263_g85018 , Coords263_g85018 , WorldPosition263_g85018 , WorldNormal263_g85018 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8877_g84942 = localSamplePlanar2D238_g85018;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8877_g84942 = localSamplePlanar3D246_g85018;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8877_g84942 = localSampleStochastic2D234_g85018;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8877_g84942 = localSampleStochastic3D263_g85018;
				#else
				float4 staticSwitch8877_g84942 = localSamplePlanar2D238_g85018;
				#endif
				half4 Layer439_g84969 = staticSwitch8877_g84942;
				float4 weightedBlendVar31_g84969 = Weights52_g84969;
				float4 weightedBlend31_g84969 = ( weightedBlendVar31_g84969.x*Layer133_g84969 + weightedBlendVar31_g84969.y*Layer237_g84969 + weightedBlendVar31_g84969.z*Layer338_g84969 + weightedBlendVar31_g84969.w*Layer439_g84969 );
				half4 Terrain_Normal_128865_g84942 = weightedBlend31_g84969;
				half4 Layer_1243_g84953 = Terrain_Normal_128865_g84942;
				half4 Weights52_g84979 = Terrain_Weights_167709_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85034) = _NormalTex13;
				SamplerState Sampler238_g85034 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85034 = Input_Coords_138960_g84942;
				half4 Coords238_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition238_g85034 = worldPos;
				half4 localSamplePlanar2D238_g85034 = SamplePlanar2D( Texture238_g85034 , Sampler238_g85034 , Coords238_g85034 , WorldPosition238_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85034) = _NormalTex13;
				SamplerState Sampler246_g85034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition246_g85034 = worldPos;
				half3 WorldNormal246_g85034 = WorldNormal;
				half4 localSamplePlanar3D246_g85034 = SamplePlanar3D( Texture246_g85034 , Sampler246_g85034 , Coords246_g85034 , WorldPosition246_g85034 , WorldNormal246_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85034) = _NormalTex13;
				SamplerState Sampler234_g85034 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85034 = temp_output_37_0_g85034;
				float3 WorldPosition234_g85034 = worldPos;
				float4 localSampleStochastic2D234_g85034 = SampleStochastic2D( Texture234_g85034 , Sampler234_g85034 , Coords234_g85034 , WorldPosition234_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85034) = _NormalTex13;
				SamplerState Sampler263_g85034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition263_g85034 = worldPos;
				half3 WorldNormal263_g85034 = WorldNormal;
				half4 localSampleStochastic3D263_g85034 = SampleStochastic3D( Texture263_g85034 , Sampler263_g85034 , Coords263_g85034 , WorldPosition263_g85034 , WorldNormal263_g85034 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch8991_g84942 = localSamplePlanar2D238_g85034;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch8991_g84942 = localSamplePlanar3D246_g85034;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch8991_g84942 = localSampleStochastic2D234_g85034;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch8991_g84942 = localSampleStochastic3D263_g85034;
				#else
				float4 staticSwitch8991_g84942 = localSamplePlanar2D238_g85034;
				#endif
				half4 Layer133_g84979 = staticSwitch8991_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85027) = _NormalTex14;
				SamplerState Sampler238_g85027 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85027 = Input_Coords_148961_g84942;
				half4 Coords238_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition238_g85027 = worldPos;
				half4 localSamplePlanar2D238_g85027 = SamplePlanar2D( Texture238_g85027 , Sampler238_g85027 , Coords238_g85027 , WorldPosition238_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85027) = _NormalTex14;
				SamplerState Sampler246_g85027 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition246_g85027 = worldPos;
				half3 WorldNormal246_g85027 = WorldNormal;
				half4 localSamplePlanar3D246_g85027 = SamplePlanar3D( Texture246_g85027 , Sampler246_g85027 , Coords246_g85027 , WorldPosition246_g85027 , WorldNormal246_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85027) = _NormalTex14;
				SamplerState Sampler234_g85027 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85027 = temp_output_37_0_g85027;
				float3 WorldPosition234_g85027 = worldPos;
				float4 localSampleStochastic2D234_g85027 = SampleStochastic2D( Texture234_g85027 , Sampler234_g85027 , Coords234_g85027 , WorldPosition234_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85027) = _NormalTex14;
				SamplerState Sampler263_g85027 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition263_g85027 = worldPos;
				half3 WorldNormal263_g85027 = WorldNormal;
				half4 localSampleStochastic3D263_g85027 = SampleStochastic3D( Texture263_g85027 , Sampler263_g85027 , Coords263_g85027 , WorldPosition263_g85027 , WorldNormal263_g85027 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch8990_g84942 = localSamplePlanar2D238_g85027;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch8990_g84942 = localSamplePlanar3D246_g85027;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch8990_g84942 = localSampleStochastic2D234_g85027;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch8990_g84942 = localSampleStochastic3D263_g85027;
				#else
				float4 staticSwitch8990_g84942 = localSamplePlanar2D238_g85027;
				#endif
				half4 Layer237_g84979 = staticSwitch8990_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85028) = _NormalTex15;
				SamplerState Sampler238_g85028 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85028 = Input_Coords_158962_g84942;
				half4 Coords238_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition238_g85028 = worldPos;
				half4 localSamplePlanar2D238_g85028 = SamplePlanar2D( Texture238_g85028 , Sampler238_g85028 , Coords238_g85028 , WorldPosition238_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85028) = _NormalTex15;
				SamplerState Sampler246_g85028 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition246_g85028 = worldPos;
				half3 WorldNormal246_g85028 = WorldNormal;
				half4 localSamplePlanar3D246_g85028 = SamplePlanar3D( Texture246_g85028 , Sampler246_g85028 , Coords246_g85028 , WorldPosition246_g85028 , WorldNormal246_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85028) = _NormalTex15;
				SamplerState Sampler234_g85028 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85028 = temp_output_37_0_g85028;
				float3 WorldPosition234_g85028 = worldPos;
				float4 localSampleStochastic2D234_g85028 = SampleStochastic2D( Texture234_g85028 , Sampler234_g85028 , Coords234_g85028 , WorldPosition234_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85028) = _NormalTex15;
				SamplerState Sampler263_g85028 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition263_g85028 = worldPos;
				half3 WorldNormal263_g85028 = WorldNormal;
				half4 localSampleStochastic3D263_g85028 = SampleStochastic3D( Texture263_g85028 , Sampler263_g85028 , Coords263_g85028 , WorldPosition263_g85028 , WorldNormal263_g85028 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch8989_g84942 = localSamplePlanar2D238_g85028;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch8989_g84942 = localSamplePlanar3D246_g85028;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch8989_g84942 = localSampleStochastic2D234_g85028;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch8989_g84942 = localSampleStochastic3D263_g85028;
				#else
				float4 staticSwitch8989_g84942 = localSamplePlanar2D238_g85028;
				#endif
				half4 Layer338_g84979 = staticSwitch8989_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85029) = _NormalTex16;
				SamplerState Sampler238_g85029 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85029 = Input_Coords_168959_g84942;
				half4 Coords238_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition238_g85029 = worldPos;
				half4 localSamplePlanar2D238_g85029 = SamplePlanar2D( Texture238_g85029 , Sampler238_g85029 , Coords238_g85029 , WorldPosition238_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85029) = _NormalTex16;
				SamplerState Sampler246_g85029 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition246_g85029 = worldPos;
				half3 WorldNormal246_g85029 = WorldNormal;
				half4 localSamplePlanar3D246_g85029 = SamplePlanar3D( Texture246_g85029 , Sampler246_g85029 , Coords246_g85029 , WorldPosition246_g85029 , WorldNormal246_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85029) = _NormalTex16;
				SamplerState Sampler234_g85029 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85029 = temp_output_37_0_g85029;
				float3 WorldPosition234_g85029 = worldPos;
				float4 localSampleStochastic2D234_g85029 = SampleStochastic2D( Texture234_g85029 , Sampler234_g85029 , Coords234_g85029 , WorldPosition234_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85029) = _NormalTex16;
				SamplerState Sampler263_g85029 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition263_g85029 = worldPos;
				half3 WorldNormal263_g85029 = WorldNormal;
				half4 localSampleStochastic3D263_g85029 = SampleStochastic3D( Texture263_g85029 , Sampler263_g85029 , Coords263_g85029 , WorldPosition263_g85029 , WorldNormal263_g85029 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch8988_g84942 = localSamplePlanar2D238_g85029;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch8988_g84942 = localSamplePlanar3D246_g85029;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch8988_g84942 = localSampleStochastic2D234_g85029;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch8988_g84942 = localSampleStochastic3D263_g85029;
				#else
				float4 staticSwitch8988_g84942 = localSamplePlanar2D238_g85029;
				#endif
				half4 Layer439_g84979 = staticSwitch8988_g84942;
				float4 weightedBlendVar31_g84979 = Weights52_g84979;
				float4 weightedBlend31_g84979 = ( weightedBlendVar31_g84979.x*Layer133_g84979 + weightedBlendVar31_g84979.y*Layer237_g84979 + weightedBlendVar31_g84979.z*Layer338_g84979 + weightedBlendVar31_g84979.w*Layer439_g84979 );
				half4 Terrain_Normal_168987_g84942 = weightedBlend31_g84979;
				half4 Layer_1644_g84953 = Terrain_Normal_168987_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84953 = Layer_045_g84953;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 + Layer_1243_g84953 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 + Layer_1243_g84953 + Layer_1644_g84953 );
				#else
				float4 staticSwitch40_g84953 = Layer_045_g84953;
				#endif
				half4 Blend_Normal7512_g84942 = staticSwitch40_g84953;
				half4 Normal_Packed45_g85037 = Blend_Normal7512_g84942;
				float2 appendResult58_g85037 = (float2(( (Normal_Packed45_g85037).x * (Normal_Packed45_g85037).w ) , (Normal_Packed45_g85037).y));
				half2 Normal_Default50_g85037 = appendResult58_g85037;
				half2 Normal_ASTC41_g85037 = (Normal_Packed45_g85037).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g85037 = Normal_ASTC41_g85037;
				#else
				float2 staticSwitch38_g85037 = Normal_Default50_g85037;
				#endif
				half2 Normal_NO_DTX544_g85037 = (Normal_Packed45_g85037).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g85037 = Normal_NO_DTX544_g85037;
				#else
				float2 staticSwitch37_g85037 = staticSwitch38_g85037;
				#endif
				half4 Weights52_g84945 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84945 = temp_output_6970_0_g84942;
				half4 Layer237_g84945 = temp_output_6977_0_g84942;
				half4 Layer338_g84945 = temp_output_6978_0_g84942;
				half4 Layer439_g84945 = temp_output_6983_0_g84942;
				float4 weightedBlendVar31_g84945 = Weights52_g84945;
				float4 weightedBlend31_g84945 = ( weightedBlendVar31_g84945.x*Layer133_g84945 + weightedBlendVar31_g84945.y*Layer237_g84945 + weightedBlendVar31_g84945.z*Layer338_g84945 + weightedBlendVar31_g84945.w*Layer439_g84945 );
				half4 Terrain_Masks_047203_g84942 = weightedBlend31_g84945;
				half4 Layer_045_g84955 = Terrain_Masks_047203_g84942;
				half4 Weights52_g84962 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84962 = temp_output_8714_0_g84942;
				half4 Layer237_g84962 = temp_output_8721_0_g84942;
				half4 Layer338_g84962 = temp_output_8724_0_g84942;
				half4 Layer439_g84962 = temp_output_8727_0_g84942;
				float4 weightedBlendVar31_g84962 = Weights52_g84962;
				float4 weightedBlend31_g84962 = ( weightedBlendVar31_g84962.x*Layer133_g84962 + weightedBlendVar31_g84962.y*Layer237_g84962 + weightedBlendVar31_g84962.z*Layer338_g84962 + weightedBlendVar31_g84962.w*Layer439_g84962 );
				half4 Terrain_Masks_088730_g84942 = weightedBlend31_g84962;
				half4 Layer_0810_g84955 = Terrain_Masks_088730_g84942;
				half4 Weights52_g84972 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84972 = temp_output_8815_0_g84942;
				half4 Layer237_g84972 = temp_output_8818_0_g84942;
				half4 Layer338_g84972 = temp_output_8819_0_g84942;
				half4 Layer439_g84972 = temp_output_8820_0_g84942;
				float4 weightedBlendVar31_g84972 = Weights52_g84972;
				float4 weightedBlend31_g84972 = ( weightedBlendVar31_g84972.x*Layer133_g84972 + weightedBlendVar31_g84972.y*Layer237_g84972 + weightedBlendVar31_g84972.z*Layer338_g84972 + weightedBlendVar31_g84972.w*Layer439_g84972 );
				half4 Terrain_Masks_128871_g84942 = weightedBlend31_g84972;
				half4 Layer_1243_g84955 = Terrain_Masks_128871_g84942;
				half4 Weights52_g84982 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84982 = temp_output_8931_0_g84942;
				half4 Layer237_g84982 = temp_output_8934_0_g84942;
				half4 Layer338_g84982 = temp_output_8935_0_g84942;
				half4 Layer439_g84982 = temp_output_8936_0_g84942;
				float4 weightedBlendVar31_g84982 = Weights52_g84982;
				float4 weightedBlend31_g84982 = ( weightedBlendVar31_g84982.x*Layer133_g84982 + weightedBlendVar31_g84982.y*Layer237_g84982 + weightedBlendVar31_g84982.z*Layer338_g84982 + weightedBlendVar31_g84982.w*Layer439_g84982 );
				half4 Terrain_Masks_169014_g84942 = weightedBlend31_g84982;
				half4 Layer_1644_g84955 = Terrain_Masks_169014_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84955 = Layer_045_g84955;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 + Layer_1243_g84955 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 + Layer_1243_g84955 + Layer_1644_g84955 );
				#else
				float4 staticSwitch40_g84955 = Layer_045_g84955;
				#endif
				half4 Blend_Masks7420_g84942 = staticSwitch40_g84955;
				half4 Normal_Packed45_g85036 = Blend_Masks7420_g84942;
				half2 Normal_NO_DTX544_g85036 = (Normal_Packed45_g85036).wy;
				#ifdef TVE_PACKED_TEX
				float2 staticSwitch9080_g84942 = (Normal_NO_DTX544_g85036*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g84942 = (staticSwitch37_g85037*2.0 + -1.0);
				#endif
				half4 Weights52_g84949 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84949 = _Params1;
				half4 Layer237_g84949 = _Params2;
				half4 Layer338_g84949 = _Params3;
				half4 Layer439_g84949 = _Params4;
				float4 weightedBlendVar31_g84949 = Weights52_g84949;
				float4 weightedBlend31_g84949 = ( weightedBlendVar31_g84949.x*Layer133_g84949 + weightedBlendVar31_g84949.y*Layer237_g84949 + weightedBlendVar31_g84949.z*Layer338_g84949 + weightedBlendVar31_g84949.w*Layer439_g84949 );
				half4 Terrain_Params_047533_g84942 = weightedBlend31_g84949;
				half4 Layer_045_g84956 = Terrain_Params_047533_g84942;
				half4 Weights52_g84966 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84966 = _Params5;
				half4 Layer237_g84966 = _Params6;
				half4 Layer338_g84966 = _Params7;
				half4 Layer439_g84966 = _Params8;
				float4 weightedBlendVar31_g84966 = Weights52_g84966;
				float4 weightedBlend31_g84966 = ( weightedBlendVar31_g84966.x*Layer133_g84966 + weightedBlendVar31_g84966.y*Layer237_g84966 + weightedBlendVar31_g84966.z*Layer338_g84966 + weightedBlendVar31_g84966.w*Layer439_g84966 );
				half4 Terrain_Params_088739_g84942 = weightedBlend31_g84966;
				half4 Layer_0810_g84956 = Terrain_Params_088739_g84942;
				half4 Weights52_g84976 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84976 = _Params9;
				half4 Layer237_g84976 = _Params10;
				half4 Layer338_g84976 = _Params11;
				half4 Layer439_g84976 = _Params12;
				float4 weightedBlendVar31_g84976 = Weights52_g84976;
				float4 weightedBlend31_g84976 = ( weightedBlendVar31_g84976.x*Layer133_g84976 + weightedBlendVar31_g84976.y*Layer237_g84976 + weightedBlendVar31_g84976.z*Layer338_g84976 + weightedBlendVar31_g84976.w*Layer439_g84976 );
				half4 Terrain_Params_128867_g84942 = weightedBlend31_g84976;
				half4 Layer_1243_g84956 = Terrain_Params_128867_g84942;
				half4 Weights52_g84986 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84986 = _Params13;
				half4 Layer237_g84986 = _Params14;
				half4 Layer338_g84986 = _Params15;
				half4 Layer439_g84986 = _Params16;
				float4 weightedBlendVar31_g84986 = Weights52_g84986;
				float4 weightedBlend31_g84986 = ( weightedBlendVar31_g84986.x*Layer133_g84986 + weightedBlendVar31_g84986.y*Layer237_g84986 + weightedBlendVar31_g84986.z*Layer338_g84986 + weightedBlendVar31_g84986.w*Layer439_g84986 );
				half4 Terrain_Params_169017_g84942 = weightedBlend31_g84986;
				half4 Layer_1644_g84956 = Terrain_Params_169017_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84956 = Layer_045_g84956;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 + Layer_1243_g84956 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 + Layer_1243_g84956 + Layer_1644_g84956 );
				#else
				float4 staticSwitch40_g84956 = Layer_045_g84956;
				#endif
				half4 Blend_Params7547_g84942 = staticSwitch40_g84956;
				half2 Normal_Planar45_g85038 = ( staticSwitch9080_g84942 * (Blend_Params7547_g84942).z );
				float2 break64_g85038 = Normal_Planar45_g85038;
				float3 appendResult65_g85038 = (float3(break64_g85038.x , 0.0 , break64_g85038.y));
				half2 Terrain_Normal8038_g84806 = ( (mul( ase_worldToTangent, appendResult65_g85038 )).xy * _TerrainNormalValue );
				float2 lerpResult7797_g84806 = lerp( Blend_Normal_Detail312_g84806 , Terrain_Normal8038_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float2 staticSwitch7796_g84806 = lerpResult7797_g84806;
				#else
				float2 staticSwitch7796_g84806 = Blend_Normal_Detail312_g84806;
				#endif
				half2 Blend_Normal_Terrain7762_g84806 = staticSwitch7796_g84806;
				float3 appendResult7377_g84806 = (float3(Blend_Normal_Terrain7762_g84806 , 1.0));
				float3 tanNormal7376_g84806 = appendResult7377_g84806;
				float3 worldNormal7376_g84806 = float3(dot(tanToWorld0,tanNormal7376_g84806), dot(tanToWorld1,tanNormal7376_g84806), dot(tanToWorld2,tanNormal7376_g84806));
				half3 Blend_NormalWS_Terrain7375_g84806 = worldNormal7376_g84806;
				float lerpResult7446_g84806 = lerp( (Blend_NormalWS_Terrain7375_g84806).y , IN.ase_normal.y , Vertex_DynamicMode5112_g84806);
				float lerpResult6757_g84806 = lerp( 1.0 , saturate( lerpResult7446_g84806 ) , _OverlayProjectionValue);
				half Overlay_Projection6081_g84806 = lerpResult6757_g84806;
				half Overlay_Shading6688_g84806 = Blend_Albedo_Globals6410_g84806;
				half Overlay_Custom6707_g84806 = 1.0;
				float lerpResult8034_g84806 = lerp( Occlusion_Mask6432_g84806 , ( 1.0 - Occlusion_Mask6432_g84806 ) , _VertexOcclusionOverlayMode);
				float lerpResult8032_g84806 = lerp( Occlusion_Alpha6463_g84806 , 1.0 , lerpResult8034_g84806);
				half Occlusion_Overlay6471_g84806 = lerpResult8032_g84806;
				float temp_output_7_0_g84929 = 0.1;
				float temp_output_10_0_g84929 = ( 0.2 - temp_output_7_0_g84929 );
				half Overlay_Mask_High6064_g84806 = saturate( ( ( ( Overlay_Value5738_g84806 * Overlay_Projection6081_g84806 * Overlay_Shading6688_g84806 * Overlay_Custom6707_g84806 * Occlusion_Overlay6471_g84806 ) - temp_output_7_0_g84929 ) / ( temp_output_10_0_g84929 + 0.0001 ) ) );
				half Overlay_Mask269_g84806 = Overlay_Mask_High6064_g84806;
				float3 lerpResult336_g84806 = lerp( Blend_Albedo_Colored863_g84806 , Global_OverlayColor1758_g84806 , Overlay_Mask269_g84806);
				half3 Blend_Albedo_Overlay359_g84806 = lerpResult336_g84806;
				half Global_WetnessContrast6502_g84806 = TVE_WetnessContrast;
				half Global_Extras_Wetness305_g84806 = break456_g84833.y;
				half Wetness_Value6343_g84806 = ( Global_Extras_Wetness305_g84806 * _GlobalWetness );
				float3 lerpResult6367_g84806 = lerp( Blend_Albedo_Overlay359_g84806 , ( Blend_Albedo_Overlay359_g84806 * Blend_Albedo_Overlay359_g84806 ) , ( Global_WetnessContrast6502_g84806 * Wetness_Value6343_g84806 ));
				half3 Blend_Albedo_Wetness6351_g84806 = lerpResult6367_g84806;
				float vertexToFrag11_g84914 = IN.ase_texcoord9.w;
				half3 Tint_Highlight_Color5771_g84806 = ( ( (_MotionHighlightColor).rgb * vertexToFrag11_g84914 ) + float3( 1,1,1 ) );
				float3 temp_output_6309_0_g84806 = ( Blend_Albedo_Wetness6351_g84806 * Tint_Highlight_Color5771_g84806 );
				half3 Subsurface_Color1722_g84806 = ( (_SubsurfaceColor).rgb * Blend_Albedo_Wetness6351_g84806 );
				half Global_Subsurface4041_g84806 = TVE_SubsurfaceValue;
				half Global_OverlaySubsurface5667_g84806 = TVE_OverlaySubsurface;
				float lerpResult7362_g84806 = lerp( 1.0 , Global_OverlaySubsurface5667_g84806 , Overlay_Value5738_g84806);
				half Overlay_Subsurface7361_g84806 = lerpResult7362_g84806;
				half Subsurface_Intensity1752_g84806 = ( _SubsurfaceValue * Global_Subsurface4041_g84806 * Overlay_Subsurface7361_g84806 );
				float lerpResult8014_g84806 = lerp( 1.0 , Blend_MaskRemap_Detail6621_g84806 , _SubsurfaceMaskValue);
				half Subsurface_Mask1557_g84806 = lerpResult8014_g84806;
				half3 MainLight_Direction3926_g84806 = TVE_MainLightDirection;
				float3 normalizeResult2169_g84806 = normalize( worldViewDir );
				float3 ViewDirection3963_g84806 = normalizeResult2169_g84806;
				float dotResult785_g84806 = dot( -MainLight_Direction3926_g84806 , ViewDirection3963_g84806 );
				float saferPower1624_g84806 = abs( saturate( dotResult785_g84806 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch1602_g84806 = 0.0;
				#else
				float staticSwitch1602_g84806 = ( pow( saferPower1624_g84806 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View782_g84806 = staticSwitch1602_g84806;
				half3 Subsurface_Approximation1693_g84806 = ( Subsurface_Color1722_g84806 * Subsurface_Intensity1752_g84806 * Subsurface_Mask1557_g84806 * Mask_Subsurface_View782_g84806 );
				half3 Blend_Albedo_Subsurface149_g84806 = ( temp_output_6309_0_g84806 + Subsurface_Approximation1693_g84806 );
				half3 Blend_Albedo_RimLight7316_g84806 = Blend_Albedo_Subsurface149_g84806;
				
				half Global_OverlayNormalScale6581_g84806 = TVE_OverlayNormalValue;
				float lerpResult6585_g84806 = lerp( 1.0 , Global_OverlayNormalScale6581_g84806 , Overlay_Mask269_g84806);
				half2 Blend_Normal_Overlay366_g84806 = ( Blend_Normal_Terrain7762_g84806 * lerpResult6585_g84806 );
				half Global_WetnessNormalScale6571_g84806 = TVE_WetnessNormalValue;
				float lerpResult6579_g84806 = lerp( 1.0 , Global_WetnessNormalScale6571_g84806 , ( Wetness_Value6343_g84806 * Wetness_Value6343_g84806 ));
				half2 Blend_Normal_Wetness6372_g84806 = ( Blend_Normal_Overlay366_g84806 * lerpResult6579_g84806 );
				float3 appendResult6568_g84806 = (float3(Blend_Normal_Wetness6372_g84806 , 1.0));
				float3 temp_output_13_0_g84834 = appendResult6568_g84806;
				float3 temp_output_33_0_g84834 = ( temp_output_13_0_g84834 * _render_normals );
				float3 switchResult12_g84834 = (((ase_vface>0)?(temp_output_13_0_g84834):(temp_output_33_0_g84834)));
				
				float3 temp_cast_19 = (0.0).xxx;
				half3 Emissive_Color7162_g84806 = (_EmissiveColor).rgb;
				half2 Emissive_UVs2468_g84806 = ( ( IN.ase_texcoord8.xy * (_EmissiveUVs).xy ) + (_EmissiveUVs).zw );
				float temp_output_7_0_g84938 = _EmissiveTexMinValue;
				float3 temp_cast_20 = (temp_output_7_0_g84938).xxx;
				float temp_output_10_0_g84938 = ( _EmissiveTexMaxValue - temp_output_7_0_g84938 );
				half3 Emissive_Texture7022_g84806 = saturate( ( ( (SAMPLE_TEXTURE2D( _EmissiveTex, sampler_Linear_Repeat, Emissive_UVs2468_g84806 )).rgb - temp_cast_20 ) / ( temp_output_10_0_g84938 + 0.0001 ) ) );
				half Global_Extras_Emissive4203_g84806 = break456_g84833.x;
				float lerpResult4206_g84806 = lerp( 1.0 , Global_Extras_Emissive4203_g84806 , _GlobalEmissive);
				half Emissive_Value7024_g84806 = ( ( lerpResult4206_g84806 * _EmissivePhaseValue ) - 1.0 );
				half3 Emissive_Mask6968_g84806 = saturate( ( Emissive_Texture7022_g84806 + Emissive_Value7024_g84806 ) );
				float3 temp_output_3_0_g84937 = ( Emissive_Color7162_g84806 * Emissive_Mask6968_g84806 );
				float temp_output_15_0_g84937 = _emissive_intensity_value;
				float3 temp_output_23_0_g84937 = ( temp_output_3_0_g84937 * temp_output_15_0_g84937 );
				#ifdef TVE_EMISSIVE
				float3 staticSwitch8018_g84806 = temp_output_23_0_g84937;
				#else
				float3 staticSwitch8018_g84806 = temp_cast_19;
				#endif
				half3 Blend_Emissive2476_g84806 = staticSwitch8018_g84806;
				half3 Terrain_Emissive7933_g84806 = ( (Blend_Specular7446_g84942).rgb * (Blend_Albedo7468_g84942).xyz );
				float3 lerpResult7927_g84806 = lerp( Blend_Emissive2476_g84806 , Terrain_Emissive7933_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7912_g84806 = lerpResult7927_g84806;
				#else
				float3 staticSwitch7912_g84806 = Blend_Emissive2476_g84806;
				#endif
				half3 Blend_Emissive_Terrain7909_g84806 = staticSwitch7912_g84806;
				
				half Render_Specular4861_g84806 = _RenderSpecular;
				float3 temp_cast_21 = (( 0.04 * Render_Specular4861_g84806 )).xxx;
				
				float lerpResult240_g84806 = lerp( 1.0 , tex2DNode35_g84806.g , _MainOcclusionValue);
				half Main_Occlusion247_g84806 = lerpResult240_g84806;
				float lerpResult239_g84806 = lerp( 1.0 , tex2DNode33_g84806.g , _SecondOcclusionValue);
				half Second_Occlusion251_g84806 = lerpResult239_g84806;
				float lerpResult294_g84806 = lerp( Main_Occlusion247_g84806 , Second_Occlusion251_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch310_g84806 = lerpResult294_g84806;
				#else
				float staticSwitch310_g84806 = Main_Occlusion247_g84806;
				#endif
				half Blend_Occlusion_Detail323_g84806 = staticSwitch310_g84806;
				#ifdef TVE_PACKED_TEX
				float staticSwitch9097_g84942 = 1.0;
				#else
				float staticSwitch9097_g84942 = ( (Blend_Masks7420_g84942).y * _TerrainOcclusionValue );
				#endif
				half Terrain_Occlusion8041_g84806 = staticSwitch9097_g84942;
				float lerpResult7815_g84806 = lerp( Blend_Occlusion_Detail323_g84806 , Terrain_Occlusion8041_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float staticSwitch7814_g84806 = lerpResult7815_g84806;
				#else
				float staticSwitch7814_g84806 = Blend_Occlusion_Detail323_g84806;
				#endif
				half Blend_Occlusion_Terrain7820_g84806 = staticSwitch7814_g84806;
				
				half Main_Smoothness227_g84806 = ( tex2DNode35_g84806.a * _MainSmoothnessValue );
				half Second_Smoothness236_g84806 = ( tex2DNode33_g84806.a * _SecondSmoothnessValue );
				float lerpResult266_g84806 = lerp( Main_Smoothness227_g84806 , Second_Smoothness236_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch297_g84806 = lerpResult266_g84806;
				#else
				float staticSwitch297_g84806 = Main_Smoothness227_g84806;
				#endif
				half Blend_Smoothness_Detail314_g84806 = staticSwitch297_g84806;
				#ifdef TVE_PACKED_TEX
				float staticSwitch9105_g84942 = (Blend_Masks7420_g84942).x;
				#else
				float staticSwitch9105_g84942 = (Blend_Masks7420_g84942).w;
				#endif
				half Terrain_Smoothness8042_g84806 = ( staticSwitch9105_g84942 * (Blend_Params7547_g84942).w * _TerrainSmoothnessValue );
				float lerpResult7801_g84806 = lerp( Blend_Smoothness_Detail314_g84806 , Terrain_Smoothness8042_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float staticSwitch7800_g84806 = lerpResult7801_g84806;
				#else
				float staticSwitch7800_g84806 = Blend_Smoothness_Detail314_g84806;
				#endif
				half Blend_Smoothness_Terrain7806_g84806 = staticSwitch7800_g84806;
				half Global_OverlaySmoothness311_g84806 = TVE_OverlaySmoothness;
				float lerpResult343_g84806 = lerp( Blend_Smoothness_Terrain7806_g84806 , Global_OverlaySmoothness311_g84806 , Overlay_Mask269_g84806);
				half Blend_Smoothness_Overlay371_g84806 = lerpResult343_g84806;
				float temp_output_6499_0_g84806 = ( 1.0 - Wetness_Value6343_g84806 );
				half Blend_Smoothness_Wetness4130_g84806 = saturate( ( Blend_Smoothness_Overlay371_g84806 + ( 1.0 - ( temp_output_6499_0_g84806 * temp_output_6499_0_g84806 ) ) ) );
				
				float localCustomAlphaClip19_g84928 = ( 0.0 );
				half Main_Alpha316_g84806 = tex2DNode29_g84806.a;
				half Second_Alpha5007_g84806 = tex2DNode89_g84806.a;
				float lerpResult6153_g84806 = lerp( Main_Alpha316_g84806 , Second_Alpha5007_g84806 , Detail_Mask147_g84806);
				float lerpResult6785_g84806 = lerp( ( Main_Alpha316_g84806 * Second_Alpha5007_g84806 ) , lerpResult6153_g84806 , _DetailAlphaMode);
				#ifdef TVE_DETAIL
				float staticSwitch6158_g84806 = lerpResult6785_g84806;
				#else
				float staticSwitch6158_g84806 = Main_Alpha316_g84806;
				#endif
				half Blend_Alpha_Detail6157_g84806 = staticSwitch6158_g84806;
				half AlphaTreshold2132_g84806 = _AlphaClipValue;
				half Global_Extras_Alpha1033_g84806 = saturate( break456_g84833.w );
				float lerpResult5154_g84806 = lerp( 0.0 , Global_MeshVariation5104_g84806 , _AlphaVariationValue);
				half Global_Alpha_Variation5158_g84806 = lerpResult5154_g84806;
				float Emissive_Alpha7942_g84806 = 0.0;
				float lerpResult6866_g84806 = lerp( ( 1.0 - Detail_Mask147_g84806 ) , 1.0 , _DetailFadeMode);
				#ifdef TVE_DETAIL
				float staticSwitch6612_g84806 = lerpResult6866_g84806;
				#else
				float staticSwitch6612_g84806 = 1.0;
				#endif
				half Detail_Mask_Invert6260_g84806 = staticSwitch6612_g84806;
				half Alpha_Mask6234_g84806 = ( 1.0 * Detail_Mask_Invert6260_g84806 );
				float lerpResult5203_g84806 = lerp( 1.0 , saturate( ( ( Global_Extras_Alpha1033_g84806 - saturate( ( Global_Alpha_Variation5158_g84806 + Emissive_Alpha7942_g84806 ) ) ) + ( Global_Extras_Alpha1033_g84806 * 0.1 ) ) ) , ( Alpha_Mask6234_g84806 * _GlobalAlpha ));
				float lerpResult16_g84925 = lerp( 1.0 , lerpResult5203_g84806 , TVE_IsEnabled);
				half Global_Alpha315_g84806 = lerpResult16_g84925;
				half Fade_Alpha3727_g84806 = 1.0;
				half Final_Alpha7344_g84806 = min( ( ( Blend_Alpha_Detail6157_g84806 - AlphaTreshold2132_g84806 ) * Global_Alpha315_g84806 ) , Fade_Alpha3727_g84806 );
				float temp_output_3_0_g84928 = Final_Alpha7344_g84806;
				float Alpha19_g84928 = temp_output_3_0_g84928;
				float temp_output_15_0_g84928 = 0.01;
				float Treshold19_g84928 = temp_output_15_0_g84928;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_ALPHA_FADE) || defined (TVE_ALPHA_GLOBAL)
				#if defined (TVE_IS_HD_PIPELINE)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g84928 - Treshold19_g84928);
				#endif
				#else
				clip(Alpha19_g84928 - Treshold19_g84928);
				#endif
				#endif
				}
				half Main_Color_Alpha6121_g84806 = (lerpResult7986_g84806).a;
				half Second_Color_Alpha6152_g84806 = (lerpResult7997_g84806).a;
				float lerpResult6168_g84806 = lerp( Main_Color_Alpha6121_g84806 , Second_Color_Alpha6152_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch6174_g84806 = lerpResult6168_g84806;
				#else
				float staticSwitch6174_g84806 = Main_Color_Alpha6121_g84806;
				#endif
				half Blend_ColorAlpha_Detail6167_g84806 = staticSwitch6174_g84806;
				half Final_Clip914_g84806 = saturate( ( Alpha19_g84928 * Blend_ColorAlpha_Detail6167_g84806 ) );
				
				o.Albedo = Blend_Albedo_RimLight7316_g84806;
				o.Normal = switchResult12_g84834;
				o.Emission = Blend_Emissive_Terrain7909_g84806;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = fixed3( 0, 0, 0 );
					o.Gloss = 0;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = temp_cast_21;
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = Blend_Occlusion_Terrain7820_g84806;
					o.Smoothness = Blend_Smoothness_Wetness4130_g84806;
				#endif

				o.Alpha = Final_Clip914_g84806;
				float AlphaClipThreshold = 0.5;
				float3 BakedGI = 0;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = 0;
				gi.light.dir = half3(0,1,0);

				UnityGIInput giInput;
				UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
				giInput.light = gi.light;
				giInput.worldPos = worldPos;
				giInput.worldViewDir = worldViewDir;
				giInput.atten = atten;
				#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
					giInput.lightmapUV = IN.lmap;
				#else
					giInput.lightmapUV = 0.0;
				#endif
				#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
					giInput.ambient = IN.sh;
				#else
					giInput.ambient.rgb = 0.0;
				#endif
				giInput.probeHDR[0] = unity_SpecCube0_HDR;
				giInput.probeHDR[1] = unity_SpecCube1_HDR;
				#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
					giInput.boxMin[0] = unity_SpecCube0_BoxMin;
				#endif
				#ifdef UNITY_SPECCUBE_BOX_PROJECTION
					giInput.boxMax[0] = unity_SpecCube0_BoxMax;
					giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
					giInput.boxMax[1] = unity_SpecCube1_BoxMax;
					giInput.boxMin[1] = unity_SpecCube1_BoxMin;
					giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						LightingBlinnPhong_GI(o, giInput, gi);
					#else
						LightingLambert_GI(o, giInput, gi);
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						LightingStandardSpecular_GI(o, giInput, gi);
					#else
						LightingStandard_GI(o, giInput, gi);
					#endif
				#endif

				#ifdef ASE_BAKEDGI
					gi.indirect.diffuse = BakedGI;
				#endif

				#if UNITY_SHOULD_SAMPLE_SH && !defined(LIGHTMAP_ON) && defined(ASE_NO_AMBIENT)
					gi.indirect.diffuse = 0;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						outEmission = LightingBlinnPhong_Deferred( o, worldViewDir, gi, outGBuffer0, outGBuffer1, outGBuffer2 );
					#else
						outEmission = LightingLambert_Deferred( o, gi, outGBuffer0, outGBuffer1, outGBuffer2 );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						outEmission = LightingStandardSpecular_Deferred( o, worldViewDir, gi, outGBuffer0, outGBuffer1, outGBuffer2 );
					#else
						outEmission = LightingStandard_Deferred( o, worldViewDir, gi, outGBuffer0, outGBuffer1, outGBuffer2 );
					#endif
				#endif

				#if defined(SHADOWS_SHADOWMASK) && (UNITY_ALLOWED_MRT_COUNT > 4)
					outShadowMask = UnityGetRawBakedOcclusions (IN.lmap.xy, float3(0, 0, 0));
				#endif
				#ifndef UNITY_HDR_ON
					outEmission.rgb = exp2(-outEmission.rgb);
				#endif
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "Meta"
			Tags { "LightMode"="Meta" }
			Cull Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma shader_feature EDITOR_VISUALIZATION
			#ifndef UNITY_PASS_META
				#define UNITY_PASS_META
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "UnityMetaPass.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_COLOR
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local TVE_TERRAIN
			#pragma shader_feature_local TVE_DETAIL
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_HEIGHT_BLEND
			#pragma shader_feature_local_fragment TVE_SAMPLE_01_PLANAR_2D TVE_SAMPLE_01_PLANAR_3D TVE_SAMPLE_01_STOCHASTIC_2D TVE_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_02_PLANAR_2D TVE_SAMPLE_02_PLANAR_3D TVE_SAMPLE_02_STOCHASTIC_2D TVE_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_03_PLANAR_2D TVE_SAMPLE_03_PLANAR_3D TVE_SAMPLE_03_STOCHASTIC_2D TVE_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_04_PLANAR_2D TVE_SAMPLE_04_PLANAR_3D TVE_SAMPLE_04_STOCHASTIC_2D TVE_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_05_PLANAR_2D TVE_SAMPLE_05_PLANAR_3D TVE_SAMPLE_05_STOCHASTIC_2D TVE_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_06_PLANAR_2D TVE_SAMPLE_06_PLANAR_3D TVE_SAMPLE_06_STOCHASTIC_2D TVE_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_07_PLANAR_2D TVE_SAMPLE_07_PLANAR_3D TVE_SAMPLE_07_STOCHASTIC_2D TVE_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_08_PLANAR_2D TVE_SAMPLE_08_PLANAR_3D TVE_SAMPLE_08_STOCHASTIC_2D TVE_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_09_PLANAR_2D TVE_SAMPLE_09_PLANAR_3D TVE_SAMPLE_09_STOCHASTIC_2D TVE_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_10_PLANAR_2D TVE_SAMPLE_10_PLANAR_3D TVE_SAMPLE_10_STOCHASTIC_2D TVE_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_11_PLANAR_2D TVE_SAMPLE_11_PLANAR_3D TVE_SAMPLE_11_STOCHASTIC_2D TVE_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_12_PLANAR_2D TVE_SAMPLE_12_PLANAR_3D TVE_SAMPLE_12_STOCHASTIC_2D TVE_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_13_PLANAR_2D TVE_SAMPLE_13_PLANAR_3D TVE_SAMPLE_13_STOCHASTIC_2D TVE_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_14_PLANAR_2D TVE_SAMPLE_14_PLANAR_3D TVE_SAMPLE_14_STOCHASTIC_2D TVE_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_15_PLANAR_2D TVE_SAMPLE_15_PLANAR_3D TVE_SAMPLE_15_STOCHASTIC_2D TVE_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SAMPLE_16_PLANAR_2D TVE_SAMPLE_16_PLANAR_3D TVE_SAMPLE_16_STOCHASTIC_2D TVE_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_PACKED_TEX
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#define THE_VEGETATION_ENGINE
			#define TVE_IS_STANDARD_PIPELINE
			#define TVE_IS_STANDARD_SHADER
			#define TVE_IS_PLANT_SHADER
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#ifdef EDITOR_VISUALIZATION
					float2 vizUV : TEXCOORD1;
					float4 lightCoord : TEXCOORD2;
				#endif
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_color : COLOR;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float3 ase_normal : NORMAL;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _render_cull;
			uniform half _render_coverage;
			uniform half _render_zw;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _IsStandardShader;
			uniform float _IsPlantShader;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform float _SubsurfaceDiffusion;
			uniform half _Cutoff;
			uniform float4 _MaxBoundsInfo;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderZWrite;
			uniform half _RenderClip;
			uniform half _RenderCull;
			uniform half _RenderQueue;
			uniform half _RenderPriority;
			uniform half _RenderMode;
			uniform half _CategoryRender;
			uniform half _RenderNormals;
			uniform half _MessageGlobalsVariation;
			uniform half _IsTVEShader;
			uniform half _HasOcclusion;
			uniform half _IsIdentifier;
			uniform half _IsCollected;
			uniform half _IsShared;
			uniform half _IsCustomShader;
			uniform half _HasGradient;
			uniform half _HasEmissive;
			uniform half _VertexVariationMode;
			uniform half _IsVersion;
			uniform half _RenderCoverage;
			uniform half _DetailTypeMode;
			uniform half _DetailOpaqueMode;
			uniform half _DetailCoordMode;
			uniform half _SpaceGlobalLocals;
			uniform half _SpaceSubsurface;
			uniform half _CategoryGlobals;
			uniform half _CategoryMain;
			uniform half _CategoryPerspective;
			uniform half _CategorySizeFade;
			uniform half _SpaceRenderFade;
			uniform half _RenderDirect;
			uniform half _RenderAmbient;
			uniform half _RenderShadow;
			uniform half _IsBlanketShader;
			uniform half4 _Color;
			uniform half _CategoryMotion;
			uniform half _MessageMotionVariation;
			uniform half4 _MainMaskRemap;
			uniform half4 _SecondMaskRemap;
			uniform half _CategoryDetail;
			uniform half _CategoryTerrain;
			uniform half _CategoryOcclusion;
			uniform half _CategoryGradient;
			uniform half _CategoryNoise;
			uniform half _CategoryRimLight;
			uniform half _CategoryMatcap;
			uniform half _CategorySubsurface;
			uniform half _CategoryEmissive;
			uniform half _SpaceGlobalLayers;
			uniform half _SpaceGlobalOptions;
			uniform half _SpaceMotionGlobals;
			uniform half _ColorsMaskMinValue;
			uniform half _ColorsMaskMaxValue;
			uniform half _DetailMeshInvertMode;
			uniform half _DetailMaskInvertMode;
			uniform half _MotionValue_31;
			uniform half _MotionValue_21;
			uniform half _MessageMainMask;
			uniform half _MessageSecondMask;
			uniform half4 _DetailBlendRemap;
			uniform half4 _DetailMeshRemap;
			uniform half4 _DetailMaskRemap;
			uniform half4 _VertexOcclusionRemap;
			uniform half4 _GradientMaskRemap;
			uniform half4 _NoiseMaskRemap;
			uniform half4 _RimLightRemap;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceAngleValue;
			uniform half _SubsurfaceScatteringValue;
			uniform half4 _EmissiveTexRemap;
			uniform half _EmissiveMode;
			uniform half _EmissiveIntensityValue;
			uniform half _EmissiveFlagMode;
			uniform half _EmissiveIntensityMode;
			uniform half _MessageSubsurface;
			uniform half _MessageOcclusion;
			uniform half _MessageTerrain;
			uniform half4 _TerrainBlendRemap;
			uniform half _TerrainTexMode;
			uniform half _TerrainBlendMode;
			uniform half _TerrainLayersMode;
			uniform half _LayerSampleMode1;
			uniform half _LayerSampleMode2;
			uniform half _LayerSampleMode3;
			uniform half _LayerSampleMode4;
			uniform half _LayerSampleMode5;
			uniform half _LayerSampleMode6;
			uniform half _LayerSampleMode7;
			uniform half _LayerSampleMode8;
			uniform half _LayerSampleMode9;
			uniform half _LayerSampleMode10;
			uniform half _LayerSampleMode11;
			uniform half _LayerSampleMode12;
			uniform half _LayerSampleMode13;
			uniform half _LayerSampleMode14;
			uniform half _LayerSampleMode15;
			uniform half _LayerSampleMode16;
			uniform half _VertexPivotMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(TVE_NoiseTex);
			uniform float3 TVE_WorldOrigin;
			uniform half _MotionPosition_10;
			uniform float _MotionScale_10;
			uniform half TVE_NoiseTexTilling;
			uniform half4 TVE_MotionParams;
			uniform half4 TVE_TimeParams;
			uniform float _MotionSpeed_10;
			uniform half _MotionVariation_10;
			uniform half _VertexDynamicMode;
			SamplerState sampler_Linear_Repeat;
			uniform half _LayerMotionValue;
			uniform float TVE_MotionUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_MotionTex);
			uniform half4 TVE_MotionCoords;
			SamplerState sampler_Linear_Clamp;
			uniform half4 TVE_WindEditor;
			uniform half _MotionAmplitude_10;
			uniform half TVE_MotionValue_10;
			uniform half _InteractionMaskValue;
			uniform half _InteractionAmplitude;
			uniform half _LayerVertexValue;
			uniform float TVE_VertexUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_VertexTex);
			uniform half4 TVE_VertexCoords;
			uniform half _VertexPositionMode;
			uniform half4 TVE_VertexParams;
			uniform half _GlobalOrientation;
			uniform half _MotionScale_20;
			uniform half _MotionVariation_20;
			uniform half _MotionSpeed_20;
			uniform half _MotionFacingValue;
			uniform half _MotionAmplitude_20;
			uniform half TVE_MotionValue_20;
			uniform half _MotionAmplitude_22;
			uniform float _MotionScale_32;
			uniform float _MotionVariation_32;
			uniform float _MotionSpeed_32;
			uniform half _MotionAmplitude_32;
			uniform half TVE_MotionFadeEnd;
			uniform half TVE_MotionFadeStart;
			uniform half TVE_MotionValue_30;
			uniform half _PerspectivePushValue;
			uniform half _PerspectiveNoiseValue;
			uniform half _PerspectiveAngleValue;
			uniform half _GlobalSize;
			uniform half TVE_DistanceFadeBias;
			uniform half _SizeFadeEndValue;
			uniform half _SizeFadeStartValue;
			uniform half _ConformOffsetMode;
			uniform half _ConformOffsetValue;
			uniform half _GlobalConform;
			uniform half TVE_IsEnabled;
			uniform half _DisableSRPBatcher;
			uniform float _TerrainBlendOffsetValue;
			uniform float _TerrainBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			uniform half4 _MainUVs;
			SamplerState sampler_MainAlbedoTex;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainMaskTex);
			uniform half _MainMaskMinValue;
			uniform half _MainMaskMaxValue;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_uvs_mode;
			uniform half4 _SecondUVs;
			uniform half _SecondUVsScaleMode;
			SamplerState sampler_SecondAlbedoTex;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half _SecondMaskMinValue;
			uniform half _SecondMaskMaxValue;
			uniform half _SecondColorMode;
			uniform half _DetailBlendMode;
			uniform half _DetailMaskMode;
			uniform half _DetailMaskMinValue;
			uniform half _DetailMaskMaxValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _DetailMeshMode;
			uniform half _DetailMeshMinValue;
			uniform half _DetailMeshMaxValue;
			uniform half _DetailBlendMinValue;
			uniform half _DetailBlendMaxValue;
			uniform half _DetailMode;
			uniform half _DetailValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half _GradientMinValue;
			uniform half _GradientMaxValue;
			uniform half4 _VertexOcclusionColor;
			uniform half _VertexOcclusionMinValue;
			uniform half _VertexOcclusionMaxValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex1);
			uniform half4 _TerrainPosition;
			uniform half4 _TerrainSize;
			SamplerState sampler_Linear_Clamp_Aniso8;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ControlTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex1);
			SamplerState sampler_Linear_Repeat_Aniso8;
			uniform half4 _Coords1;
			uniform half4 _MaskMin1;
			uniform half4 _MaskMax1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex2);
			uniform half4 _Coords2;
			uniform half4 _MaskMin2;
			uniform half4 _MaskMax2;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex3);
			uniform half4 _Coords3;
			uniform half4 _MaskMin3;
			uniform half4 _MaskMax3;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex4);
			uniform half4 _Coords4;
			uniform half4 _MaskMin4;
			uniform half4 _MaskMax4;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex5);
			uniform half4 _Coords5;
			uniform half4 _MaskMin5;
			uniform half4 _MaskMax5;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex6);
			uniform half4 _Coords6;
			uniform half4 _MaskMin6;
			uniform half4 _MaskMax6;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex7);
			uniform half4 _Coords7;
			uniform half4 _MaskMin7;
			uniform half4 _MaskMax7;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex8);
			uniform half4 _Coords8;
			uniform half4 _MaskMin8;
			uniform half4 _MaskMax8;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex9);
			uniform half4 _Coords9;
			uniform half4 _MaskMin9;
			uniform half4 _MaskMax9;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex10);
			uniform half4 _Coords10;
			uniform half4 _MaskMin10;
			uniform half4 _MaskMax10;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex11);
			uniform half4 _Coords11;
			uniform half4 _MaskMin11;
			uniform half4 _MaskMax11;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex12);
			uniform half4 _Coords12;
			uniform half4 _MaskMin12;
			uniform half4 _MaskMax12;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex13);
			uniform half4 _Coords13;
			uniform half4 _MaskMin13;
			uniform half4 _MaskMax13;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex14);
			uniform half4 _Coords14;
			uniform half4 _MaskMin14;
			uniform half4 _MaskMax14;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex15);
			uniform half4 _Coords15;
			uniform half4 _MaskMin15;
			uniform half4 _MaskMax15;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MaskTex16);
			uniform half4 _Coords16;
			uniform half4 _MaskMin16;
			uniform half4 _MaskMax16;
			uniform half _TerrainHeightBlendValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex1);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex5);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex6);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex7);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex8);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex9);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex10);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex11);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex12);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex13);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex14);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex15);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_AlbedoTex16);
			uniform half4 _TerrainColor;
			uniform half _DetailNormalValue;
			uniform half _SecondUVsMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _TerrainMode;
			uniform half _TerrainBlendMinValue;
			uniform half _TerrainBlendMaxValue;
			uniform half _LayerColorsValue;
			uniform float TVE_ColorsUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_ColorsTex);
			uniform half4 TVE_ColorsCoords;
			uniform half _ColorsPositionMode;
			uniform half4 TVE_ColorsParams;
			uniform half _ColorsIntensityValue;
			uniform half4 _Specular1;
			uniform half4 _Specular2;
			uniform half4 _Specular3;
			uniform half4 _Specular4;
			uniform half4 _Specular5;
			uniform half4 _Specular6;
			uniform half4 _Specular7;
			uniform half4 _Specular8;
			uniform half4 _Specular9;
			uniform half4 _Specular10;
			uniform half4 _Specular11;
			uniform half4 _Specular12;
			uniform half4 _Specular13;
			uniform half4 _Specular14;
			uniform half4 _Specular15;
			uniform half4 _Specular16;
			uniform half _GlobalColors;
			uniform half _ColorsVariationValue;
			uniform half _VertexOcclusionColorsMode;
			uniform half4 TVE_OverlayColor;
			uniform half _GlobalOverlay;
			uniform half _LayerExtrasValue;
			uniform float TVE_ExtrasUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_ExtrasTex);
			uniform half4 TVE_ExtrasCoords;
			uniform half _ExtrasPositionMode;
			uniform half4 TVE_ExtrasParams;
			uniform half _OverlayVariationValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex1);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex2);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex3);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex4);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex5);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex6);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex7);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex8);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex9);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex10);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex11);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex12);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex13);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex14);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex15);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_NormalTex16);
			uniform half4 _Params1;
			uniform half4 _Params2;
			uniform half4 _Params3;
			uniform half4 _Params4;
			uniform half4 _Params5;
			uniform half4 _Params6;
			uniform half4 _Params7;
			uniform half4 _Params8;
			uniform half4 _Params9;
			uniform half4 _Params10;
			uniform half4 _Params11;
			uniform half4 _Params12;
			uniform half4 _Params13;
			uniform half4 _Params14;
			uniform half4 _Params15;
			uniform half4 _Params16;
			uniform half _TerrainNormalValue;
			uniform half _OverlayProjectionValue;
			uniform half _VertexOcclusionOverlayMode;
			uniform half TVE_WetnessContrast;
			uniform half _GlobalWetness;
			uniform half4 _MotionHighlightColor;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceValue;
			uniform half TVE_SubsurfaceValue;
			uniform half TVE_OverlaySubsurface;
			uniform half _SubsurfaceMaskValue;
			uniform half3 TVE_MainLightDirection;
			uniform half4 _EmissiveColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveTex);
			uniform half4 _EmissiveUVs;
			uniform half _EmissiveTexMinValue;
			uniform half _EmissiveTexMaxValue;
			uniform half _GlobalEmissive;
			uniform half _EmissivePhaseValue;
			uniform float _emissive_intensity_value;
			uniform half _DetailAlphaMode;
			uniform half _AlphaClipValue;
			uniform half _AlphaVariationValue;
			uniform half _DetailFadeMode;
			uniform half _GlobalAlpha;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xy + Coords.zw;
				ZY = WorldPosition.zy * Coords.xy + Coords.zw; 
				XY = WorldPosition.xy * Coords.xy + Coords.zw;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float3 VertexPosition3588_g84806 = v.vertex.xyz;
				float3 appendResult60_g84814 = (float3(v.ase_texcoord3.x , v.ase_texcoord3.z , v.ase_texcoord3.y));
				half3 Mesh_PivotsData2831_g84806 = ( appendResult60_g84814 * _VertexPivotMode );
				half3 Mesh_PivotsOS2291_g84806 = Mesh_PivotsData2831_g84806;
				float3 temp_output_2283_0_g84806 = ( VertexPosition3588_g84806 - Mesh_PivotsOS2291_g84806 );
				half3 VertexPos40_g84886 = temp_output_2283_0_g84806;
				half3 VertexPos40_g84887 = VertexPos40_g84886;
				float3 appendResult74_g84887 = (float3(VertexPos40_g84887.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g84887 = appendResult74_g84887;
				float3 break84_g84887 = VertexPos40_g84887;
				float3 appendResult81_g84887 = (float3(0.0 , break84_g84887.y , break84_g84887.z));
				half3 VertexPosOtherAxis82_g84887 = appendResult81_g84887;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag3890_g84806 = ase_worldPos;
				float3 WorldPosition3905_g84806 = vertexToFrag3890_g84806;
				float3 WorldPosition_Shifted7477_g84806 = ( WorldPosition3905_g84806 - TVE_WorldOrigin );
				float4x4 break19_g84843 = unity_ObjectToWorld;
				float3 appendResult20_g84843 = (float3(break19_g84843[ 0 ][ 3 ] , break19_g84843[ 1 ][ 3 ] , break19_g84843[ 2 ][ 3 ]));
				float3 temp_output_122_0_g84843 = Mesh_PivotsData2831_g84806;
				float3 PivotsOnly105_g84843 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g84843 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g84845 = ( appendResult20_g84843 + PivotsOnly105_g84843 );
				half3 WorldData19_g84845 = ase_worldPos;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84845 = WorldData19_g84845;
				#else
				float3 staticSwitch14_g84845 = ObjectData20_g84845;
				#endif
				float3 temp_output_114_0_g84843 = staticSwitch14_g84845;
				float3 vertexToFrag4224_g84806 = temp_output_114_0_g84843;
				float3 ObjectPosition4223_g84806 = vertexToFrag4224_g84806;
				float3 ObjectPosition_Shifted7481_g84806 = ( ObjectPosition4223_g84806 - TVE_WorldOrigin );
				float3 lerpResult6766_g84806 = lerp( WorldPosition_Shifted7477_g84806 , ObjectPosition_Shifted7481_g84806 , _MotionPosition_10);
				float3 Motion_10_Position6738_g84806 = lerpResult6766_g84806;
				half3 Input_Position419_g84851 = Motion_10_Position6738_g84806;
				float Input_MotionScale287_g84851 = ( _MotionScale_10 + 0.2 );
				half NoiseTex_Tilling735_g84851 = TVE_NoiseTexTilling;
				float2 temp_output_597_0_g84851 = (( Input_Position419_g84851 * Input_MotionScale287_g84851 * NoiseTex_Tilling735_g84851 * 0.0075 )).xz;
				float2 temp_output_447_0_g84811 = ((TVE_MotionParams).xy*2.0 + -1.0);
				half2 Global_Wind_DirectionWS4683_g84806 = temp_output_447_0_g84811;
				half2 Input_DirectionWS423_g84851 = Global_Wind_DirectionWS4683_g84806;
				float lerpResult128_g84852 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84851 = _MotionSpeed_10;
				half Input_MotionVariation284_g84851 = _MotionVariation_10;
				half3 Input_Position167_g84900 = ObjectPosition_Shifted7481_g84806;
				float dotResult156_g84900 = dot( (Input_Position167_g84900).xz , float2( 12.9898,78.233 ) );
				half Vertex_DynamicMode5112_g84806 = _VertexDynamicMode;
				half Input_DynamicMode120_g84900 = Vertex_DynamicMode5112_g84806;
				float Postion_Random162_g84900 = ( sin( dotResult156_g84900 ) * ( 1.0 - Input_DynamicMode120_g84900 ) );
				float Mesh_Variation16_g84806 = v.ase_color.r;
				half Input_Variation124_g84900 = Mesh_Variation16_g84806;
				half ObjectData20_g84902 = frac( ( Postion_Random162_g84900 + Input_Variation124_g84900 ) );
				half WorldData19_g84902 = Input_Variation124_g84900;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84902 = WorldData19_g84902;
				#else
				float staticSwitch14_g84902 = ObjectData20_g84902;
				#endif
				float temp_output_112_0_g84900 = staticSwitch14_g84902;
				float clampResult171_g84900 = clamp( temp_output_112_0_g84900 , 0.01 , 0.99 );
				float Global_MeshVariation5104_g84806 = clampResult171_g84900;
				half Input_GlobalMeshVariation569_g84851 = Global_MeshVariation5104_g84806;
				float temp_output_630_0_g84851 = ( ( ( lerpResult128_g84852 * Input_MotionSpeed62_g84851 ) + ( Input_MotionVariation284_g84851 * Input_GlobalMeshVariation569_g84851 ) ) * 0.03 );
				float temp_output_607_0_g84851 = frac( temp_output_630_0_g84851 );
				float4 lerpResult590_g84851 = lerp( SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( temp_output_597_0_g84851 + ( -Input_DirectionWS423_g84851 * temp_output_607_0_g84851 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( temp_output_597_0_g84851 + ( -Input_DirectionWS423_g84851 * frac( ( temp_output_630_0_g84851 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_607_0_g84851 - 0.5 ) ) / 0.5 ));
				half4 Noise_Complex703_g84851 = lerpResult590_g84851;
				float2 temp_output_645_0_g84851 = ((Noise_Complex703_g84851).rg*2.0 + -1.0);
				float2 break650_g84851 = temp_output_645_0_g84851;
				float3 appendResult649_g84851 = (float3(break650_g84851.x , 0.0 , break650_g84851.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Global_Noise_OS5548_g84806 = (( mul( unity_WorldToObject, float4( appendResult649_g84851 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_Noise_DirectionOS487_g84866 = Global_Noise_OS5548_g84806;
				float2 break448_g84811 = temp_output_447_0_g84811;
				float3 appendResult452_g84811 = (float3(break448_g84811.x , 0.0 , break448_g84811.y));
				half2 Global_Wind_DirectionOS5692_g84806 = (( mul( unity_WorldToObject, float4( appendResult452_g84811 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_Wind_DirectionOS458_g84866 = Global_Wind_DirectionOS5692_g84806;
				float temp_output_84_0_g84815 = _LayerMotionValue;
				float temp_output_19_0_g84819 = TVE_MotionUsage[(int)temp_output_84_0_g84815];
				float4 temp_output_91_19_g84815 = TVE_MotionCoords;
				half2 UV94_g84815 = ( (temp_output_91_19_g84815).zw + ( (temp_output_91_19_g84815).xy * (ObjectPosition4223_g84806).xz ) );
				float4 tex2DArrayNode50_g84815 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_MotionTex, sampler_Linear_Clamp, float3(UV94_g84815,temp_output_84_0_g84815), 0.0 );
				float4 temp_output_17_0_g84819 = tex2DArrayNode50_g84815;
				float4 temp_output_112_19_g84815 = TVE_MotionParams;
				float4 temp_output_3_0_g84819 = temp_output_112_19_g84815;
				float4 ifLocalVar18_g84819 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84819 >= 0.5 )
				ifLocalVar18_g84819 = temp_output_17_0_g84819;
				else
				ifLocalVar18_g84819 = temp_output_3_0_g84819;
				float4 lerpResult22_g84819 = lerp( temp_output_3_0_g84819 , temp_output_17_0_g84819 , temp_output_19_0_g84819);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84819 = lerpResult22_g84819;
				#else
				float4 staticSwitch24_g84819 = ifLocalVar18_g84819;
				#endif
				half4 Global_Motion_Params3909_g84806 = staticSwitch24_g84819;
				float4 break322_g84811 = Global_Motion_Params3909_g84806;
				float lerpResult457_g84811 = lerp( break322_g84811.z , TVE_WindEditor.z , TVE_WindEditor.w);
				float temp_output_459_0_g84811 = ( 1.0 - lerpResult457_g84811 );
				half Global_Wind_Power2223_g84806 = ( 1.0 - ( temp_output_459_0_g84811 * temp_output_459_0_g84811 ) );
				half Input_WindPower449_g84866 = Global_Wind_Power2223_g84806;
				float2 lerpResult516_g84866 = lerp( Input_Noise_DirectionOS487_g84866 , Input_Wind_DirectionOS458_g84866 , ( Input_WindPower449_g84866 * 0.6 ));
				half Mesh_Motion_107613_g84806 = v.ase_color.a;
				half Input_MeshHeight388_g84866 = Mesh_Motion_107613_g84806;
				half ObjectData20_g84867 = Input_MeshHeight388_g84866;
				float enc62_g84861 = v.ase_texcoord.w;
				float2 localDecodeFloatToVector262_g84861 = DecodeFloatToVector2( enc62_g84861 );
				float2 break63_g84861 = ( localDecodeFloatToVector262_g84861 * 100.0 );
				float Bounds_Height5230_g84806 = break63_g84861.x;
				half Input_BoundsHeight390_g84866 = Bounds_Height5230_g84806;
				half WorldData19_g84867 = ( Input_MeshHeight388_g84866 * Input_MeshHeight388_g84866 * Input_BoundsHeight390_g84866 );
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84867 = WorldData19_g84867;
				#else
				float staticSwitch14_g84867 = ObjectData20_g84867;
				#endif
				half Final_Motion10_Mask321_g84866 = ( staticSwitch14_g84867 * 2.0 );
				half Motion_10_Amplitude2258_g84806 = _MotionAmplitude_10;
				half Input_BendingAmplitude376_g84866 = Motion_10_Amplitude2258_g84806;
				half Global_MotionValue640_g84866 = TVE_MotionValue_10;
				half2 Final_Bending631_g84866 = ( lerpResult516_g84866 * ( Final_Motion10_Mask321_g84866 * Input_BendingAmplitude376_g84866 * Input_WindPower449_g84866 * Input_WindPower449_g84866 * Global_MotionValue640_g84866 ) );
				float2 appendResult433_g84811 = (float2(break322_g84811.x , break322_g84811.y));
				float2 temp_output_436_0_g84811 = (appendResult433_g84811*2.0 + -1.0);
				float2 break441_g84811 = temp_output_436_0_g84811;
				float3 appendResult440_g84811 = (float3(break441_g84811.x , 0.0 , break441_g84811.y));
				half2 Global_React_DirectionOS39_g84806 = (( mul( unity_WorldToObject, float4( appendResult440_g84811 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_React_DirectionOS358_g84866 = Global_React_DirectionOS39_g84806;
				float clampResult17_g84869 = clamp( Input_MeshHeight388_g84866 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84868 = 0.0;
				half Input_InteractionUseMask62_g84866 = _InteractionMaskValue;
				float temp_output_10_0_g84868 = ( Input_InteractionUseMask62_g84866 - temp_output_7_0_g84868 );
				half Final_InteractionRemap594_g84866 = saturate( ( ( clampResult17_g84869 - temp_output_7_0_g84868 ) / ( temp_output_10_0_g84868 + 0.0001 ) ) );
				half ObjectData20_g84870 = Final_InteractionRemap594_g84866;
				half WorldData19_g84870 = ( Final_InteractionRemap594_g84866 * Final_InteractionRemap594_g84866 * Input_BoundsHeight390_g84866 );
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84870 = WorldData19_g84870;
				#else
				float staticSwitch14_g84870 = ObjectData20_g84870;
				#endif
				half Final_InteractionMask373_g84866 = ( staticSwitch14_g84870 * 2.0 );
				half Interaction_Amplitude7501_g84806 = _InteractionAmplitude;
				half Input_InteractionAmplitude58_g84866 = Interaction_Amplitude7501_g84806;
				half2 Final_Interaction632_g84866 = ( Input_React_DirectionOS358_g84866 * Final_InteractionMask373_g84866 * Input_InteractionAmplitude58_g84866 );
				half Global_Interaction_Mask66_g84806 = ( break322_g84811.w * break322_g84811.w * break322_g84811.w * break322_g84811.w );
				float Input_InteractionGlobalMask330_g84866 = Global_Interaction_Mask66_g84806;
				half Final_InteractionValue525_g84866 = saturate( ( Input_InteractionAmplitude58_g84866 * Input_InteractionGlobalMask330_g84866 ) );
				float2 lerpResult551_g84866 = lerp( Final_Bending631_g84866 , Final_Interaction632_g84866 , Final_InteractionValue525_g84866);
				float2 break364_g84866 = lerpResult551_g84866;
				float3 appendResult638_g84866 = (float3(break364_g84866.x , 0.0 , break364_g84866.y));
				half3 Motion_10_Interaction7519_g84806 = appendResult638_g84866;
				float temp_output_84_0_g84835 = _LayerVertexValue;
				float temp_output_19_0_g84839 = TVE_VertexUsage[(int)temp_output_84_0_g84835];
				float4 temp_output_94_19_g84835 = TVE_VertexCoords;
				float3 lerpResult7575_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _VertexPositionMode);
				half2 UV97_g84835 = ( (temp_output_94_19_g84835).zw + ( (temp_output_94_19_g84835).xy * (lerpResult7575_g84806).xz ) );
				float4 tex2DArrayNode50_g84835 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_VertexTex, sampler_Linear_Clamp, float3(UV97_g84835,temp_output_84_0_g84835), 0.0 );
				float4 temp_output_17_0_g84839 = tex2DArrayNode50_g84835;
				float4 temp_output_111_19_g84835 = TVE_VertexParams;
				float4 temp_output_3_0_g84839 = temp_output_111_19_g84835;
				float4 ifLocalVar18_g84839 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84839 >= 0.5 )
				ifLocalVar18_g84839 = temp_output_17_0_g84839;
				else
				ifLocalVar18_g84839 = temp_output_3_0_g84839;
				float4 lerpResult22_g84839 = lerp( temp_output_3_0_g84839 , temp_output_17_0_g84839 , temp_output_19_0_g84839);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84839 = lerpResult22_g84839;
				#else
				float4 staticSwitch24_g84839 = ifLocalVar18_g84839;
				#endif
				half4 Global_Vertex_Params4173_g84806 = staticSwitch24_g84839;
				float4 break322_g84873 = Global_Vertex_Params4173_g84806;
				float2 appendResult355_g84873 = (float2(break322_g84873.x , break322_g84873.y));
				float2 temp_output_356_0_g84873 = (appendResult355_g84873*2.0 + -1.0);
				float2 break357_g84873 = temp_output_356_0_g84873;
				float3 appendResult361_g84873 = (float3(break357_g84873.x , 0.0 , break357_g84873.y));
				half2 Global_VertexOrientationOS7550_g84806 = (( mul( unity_WorldToObject, float4( appendResult361_g84873 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult7535_g84806 = lerp( float2( 0,0 ) , Global_VertexOrientationOS7550_g84806 , _GlobalOrientation);
				float2 break7552_g84806 = lerpResult7535_g84806;
				float3 appendResult7553_g84806 = (float3(break7552_g84806.x , 0.0 , break7552_g84806.y));
				half3 Vertex_Orientation7542_g84806 = appendResult7553_g84806;
				half3 Angle44_g84886 = ( Motion_10_Interaction7519_g84806 + Vertex_Orientation7542_g84806 );
				half Angle44_g84887 = (Angle44_g84886).z;
				half3 VertexPos40_g84888 = ( VertexPosRotationAxis50_g84887 + ( VertexPosOtherAxis82_g84887 * cos( Angle44_g84887 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g84887 ) * sin( Angle44_g84887 ) ) );
				float3 appendResult74_g84888 = (float3(0.0 , 0.0 , VertexPos40_g84888.z));
				half3 VertexPosRotationAxis50_g84888 = appendResult74_g84888;
				float3 break84_g84888 = VertexPos40_g84888;
				float3 appendResult81_g84888 = (float3(break84_g84888.x , break84_g84888.y , 0.0));
				half3 VertexPosOtherAxis82_g84888 = appendResult81_g84888;
				half Angle44_g84888 = -(Angle44_g84886).x;
				half3 Input_Position419_g84859 = WorldPosition_Shifted7477_g84806;
				float3 break459_g84859 = Input_Position419_g84859;
				float Sum_Position446_g84859 = ( break459_g84859.x + break459_g84859.y + break459_g84859.z );
				half Input_MotionScale321_g84859 = ( _MotionScale_20 * 0.1 );
				half Input_MotionVariation330_g84859 = _MotionVariation_20;
				half Input_GlobalVariation400_g84859 = Global_MeshVariation5104_g84806;
				float lerpResult128_g84860 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84859 = _MotionSpeed_20;
				float temp_output_404_0_g84859 = ( lerpResult128_g84860 * Input_MotionSpeed62_g84859 );
				half Motion_SineA450_g84859 = sin( ( ( Sum_Position446_g84859 * Input_MotionScale321_g84859 ) + ( Input_MotionVariation330_g84859 * Input_GlobalVariation400_g84859 ) + temp_output_404_0_g84859 ) );
				half Motion_SineB395_g84859 = sin( ( ( temp_output_404_0_g84859 * 0.6842 ) + ( Sum_Position446_g84859 * Input_MotionScale321_g84859 ) ) );
				half3 Input_Position419_g84898 = VertexPosition3588_g84806;
				float3 normalizeResult518_g84898 = normalize( Input_Position419_g84898 );
				half2 Input_DirectionOS423_g84898 = Global_React_DirectionOS39_g84806;
				float2 break521_g84898 = -Input_DirectionOS423_g84898;
				float3 appendResult522_g84898 = (float3(break521_g84898.x , 0.0 , break521_g84898.y));
				float dotResult519_g84898 = dot( normalizeResult518_g84898 , appendResult522_g84898 );
				half Input_Value62_g84898 = _MotionFacingValue;
				float lerpResult524_g84898 = lerp( 1.0 , (dotResult519_g84898*0.5 + 0.5) , Input_Value62_g84898);
				half ObjectData20_g84899 = max( lerpResult524_g84898 , 0.001 );
				half WorldData19_g84899 = 1.0;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84899 = WorldData19_g84899;
				#else
				float staticSwitch14_g84899 = ObjectData20_g84899;
				#endif
				half Motion_FacingMask5214_g84806 = staticSwitch14_g84899;
				half Motion_20_Amplitude4381_g84806 = Motion_FacingMask5214_g84806;
				half Input_MotionAmplitude384_g84859 = Motion_20_Amplitude4381_g84806;
				half Input_GlobalWind407_g84859 = Global_Wind_Power2223_g84806;
				float4 break638_g84851 = abs( Noise_Complex703_g84851 );
				half Global_Noise_B5526_g84806 = break638_g84851.b;
				half Input_GlobalNoise411_g84859 = Global_Noise_B5526_g84806;
				float lerpResult413_g84859 = lerp( 1.8 , 0.4 , Input_GlobalWind407_g84859);
				half Motion_Amplitude418_g84859 = ( Input_MotionAmplitude384_g84859 * Input_GlobalWind407_g84859 * pow( Input_GlobalNoise411_g84859 , lerpResult413_g84859 ) );
				half Input_Squash58_g84859 = _MotionAmplitude_20;
				float enc59_g84861 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector259_g84861 = DecodeFloatToVector2( enc59_g84861 );
				float2 break61_g84861 = localDecodeFloatToVector259_g84861;
				half Mesh_Motion_2060_g84806 = break61_g84861.x;
				half Input_MeshMotion_20388_g84859 = Mesh_Motion_2060_g84806;
				float Bounds_Radius5231_g84806 = break63_g84861.y;
				half Input_BoundsRadius390_g84859 = Bounds_Radius5231_g84806;
				half Global_MotionValue462_g84859 = TVE_MotionValue_20;
				half2 Input_DirectionOS366_g84859 = Global_React_DirectionOS39_g84806;
				float2 break371_g84859 = Input_DirectionOS366_g84859;
				float3 appendResult372_g84859 = (float3(break371_g84859.x , ( Motion_SineA450_g84859 * 0.3 ) , break371_g84859.y));
				half3 Motion_20_Squash4418_g84806 = ( ( (max( Motion_SineA450_g84859 , Motion_SineB395_g84859 )*0.5 + 0.5) * Motion_Amplitude418_g84859 * Input_Squash58_g84859 * Input_MeshMotion_20388_g84859 * Input_BoundsRadius390_g84859 * Global_MotionValue462_g84859 ) * appendResult372_g84859 );
				half3 VertexPos40_g84876 = ( ( VertexPosRotationAxis50_g84888 + ( VertexPosOtherAxis82_g84888 * cos( Angle44_g84888 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g84888 ) * sin( Angle44_g84888 ) ) ) + Motion_20_Squash4418_g84806 );
				float3 appendResult74_g84876 = (float3(0.0 , VertexPos40_g84876.y , 0.0));
				float3 VertexPosRotationAxis50_g84876 = appendResult74_g84876;
				float3 break84_g84876 = VertexPos40_g84876;
				float3 appendResult81_g84876 = (float3(break84_g84876.x , 0.0 , break84_g84876.z));
				float3 VertexPosOtherAxis82_g84876 = appendResult81_g84876;
				half Input_Rolling379_g84859 = _MotionAmplitude_22;
				half Motion_20_Rolling5257_g84806 = ( Motion_SineA450_g84859 * Motion_Amplitude418_g84859 * Input_Rolling379_g84859 * Input_MeshMotion_20388_g84859 * Global_MotionValue462_g84859 );
				half Angle44_g84876 = Motion_20_Rolling5257_g84806;
				half3 Input_Position500_g84855 = WorldPosition_Shifted7477_g84806;
				half Input_MotionScale321_g84855 = _MotionScale_32;
				half Input_MotionVariation330_g84855 = _MotionVariation_32;
				half Input_GlobalVariation372_g84855 = Global_MeshVariation5104_g84806;
				float lerpResult128_g84856 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84855 = _MotionSpeed_32;
				float4 tex2DNode460_g84855 = SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g84855).xz * Input_MotionScale321_g84855 * 0.03 ) + ( Input_MotionVariation330_g84855 * Input_GlobalVariation372_g84855 ) + ( lerpResult128_g84856 * Input_MotionSpeed62_g84855 * 0.02 ) ), 0.0 );
				float3 appendResult462_g84855 = (float3(tex2DNode460_g84855.r , tex2DNode460_g84855.g , tex2DNode460_g84855.b));
				half3 Flutter_Texture489_g84855 = (appendResult462_g84855*2.0 + -1.0);
				float temp_output_7_0_g84841 = TVE_MotionFadeEnd;
				float temp_output_10_0_g84841 = ( TVE_MotionFadeStart - temp_output_7_0_g84841 );
				half Motion_FadeOut4005_g84806 = saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g84841 ) / ( temp_output_10_0_g84841 + 0.0001 ) ) );
				half Motion_30_Amplitude4960_g84806 = ( _MotionAmplitude_32 * Motion_FacingMask5214_g84806 * Motion_FadeOut4005_g84806 );
				half Input_MotionAmplitude58_g84855 = Motion_30_Amplitude4960_g84806;
				half Mesh_Motion_30144_g84806 = break61_g84861.y;
				half Input_MeshMotion_30374_g84855 = Mesh_Motion_30144_g84806;
				half Input_GlobalWind471_g84855 = Global_Wind_Power2223_g84806;
				half Global_MotionValue503_g84855 = TVE_MotionValue_30;
				half Input_GlobalNoise472_g84855 = Global_Noise_B5526_g84806;
				float lerpResult466_g84855 = lerp( 2.4 , 0.6 , Input_GlobalWind471_g84855);
				half Flutter_Amplitude491_g84855 = ( Input_MotionAmplitude58_g84855 * Input_MeshMotion_30374_g84855 * Input_GlobalWind471_g84855 * Global_MotionValue503_g84855 * pow( Input_GlobalNoise472_g84855 , lerpResult466_g84855 ) );
				half3 Motion_30_Flutter263_g84806 = ( Flutter_Texture489_g84855 * Flutter_Amplitude491_g84855 );
				float3 Vertex_Motion_Object833_g84806 = ( ( VertexPosRotationAxis50_g84876 + ( VertexPosOtherAxis82_g84876 * cos( Angle44_g84876 ) ) + ( cross( float3(0,1,0) , VertexPosOtherAxis82_g84876 ) * sin( Angle44_g84876 ) ) ) + Motion_30_Flutter263_g84806 );
				half3 ObjectData20_g84877 = Vertex_Motion_Object833_g84806;
				float3 temp_output_3474_0_g84806 = ( VertexPosition3588_g84806 - Mesh_PivotsOS2291_g84806 );
				float3 Vertex_Motion_World1118_g84806 = ( ( ( temp_output_3474_0_g84806 + ( Motion_10_Interaction7519_g84806 + Vertex_Orientation7542_g84806 ) ) + Motion_20_Squash4418_g84806 ) + Motion_30_Flutter263_g84806 );
				half3 WorldData19_g84877 = Vertex_Motion_World1118_g84806;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84877 = WorldData19_g84877;
				#else
				float3 staticSwitch14_g84877 = ObjectData20_g84877;
				#endif
				float3 temp_output_7495_0_g84806 = staticSwitch14_g84877;
				float3 Vertex_Motion7493_g84806 = temp_output_7495_0_g84806;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = normalize(ase_worldViewDir);
				float3 normalizeResult2169_g84806 = normalize( ase_worldViewDir );
				float3 ViewDirection3963_g84806 = normalizeResult2169_g84806;
				float3 break2709_g84806 = cross( ViewDirection3963_g84806 , half3(0,1,0) );
				float3 appendResult2710_g84806 = (float3(-break2709_g84806.z , 0.0 , break2709_g84806.x));
				float3 appendResult2667_g84806 = (float3(Global_MeshVariation5104_g84806 , 0.5 , Global_MeshVariation5104_g84806));
				half Mesh_Height1524_g84806 = v.ase_color.a;
				float dotResult2212_g84806 = dot( ViewDirection3963_g84806 , float3(0,1,0) );
				half Mask_HView2656_g84806 = dotResult2212_g84806;
				float saferPower2652_g84806 = abs( Mask_HView2656_g84806 );
				half3 Grass_Perspective2661_g84806 = ( ( ( mul( unity_WorldToObject, float4( appendResult2710_g84806 , 0.0 ) ).xyz * _PerspectivePushValue ) + ( (appendResult2667_g84806*2.0 + -1.0) * _PerspectiveNoiseValue ) ) * Mesh_Height1524_g84806 * pow( saferPower2652_g84806 , _PerspectiveAngleValue ) );
				half Global_VertexSize174_g84806 = saturate( break322_g84873.w );
				float lerpResult346_g84806 = lerp( 1.0 , Global_VertexSize174_g84806 , _GlobalSize);
				float3 appendResult3480_g84806 = (float3(lerpResult346_g84806 , lerpResult346_g84806 , lerpResult346_g84806));
				half3 ObjectData20_g84880 = appendResult3480_g84806;
				half3 _Vector11 = half3(1,1,1);
				half3 WorldData19_g84880 = _Vector11;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84880 = WorldData19_g84880;
				#else
				float3 staticSwitch14_g84880 = ObjectData20_g84880;
				#endif
				half3 Vertex_Size1741_g84806 = staticSwitch14_g84880;
				float temp_output_7_0_g84881 = _SizeFadeEndValue;
				float temp_output_10_0_g84881 = ( _SizeFadeStartValue - temp_output_7_0_g84881 );
				float temp_output_7453_0_g84806 = saturate( ( ( ( distance( _WorldSpaceCameraPos , ObjectPosition4223_g84806 ) * ( 1.0 / TVE_DistanceFadeBias ) ) - temp_output_7_0_g84881 ) / ( temp_output_10_0_g84881 + 0.0001 ) ) );
				float3 appendResult3482_g84806 = (float3(temp_output_7453_0_g84806 , temp_output_7453_0_g84806 , temp_output_7453_0_g84806));
				half3 ObjectData20_g84879 = appendResult3482_g84806;
				half3 _Vector5 = half3(1,1,1);
				half3 WorldData19_g84879 = _Vector5;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84879 = WorldData19_g84879;
				#else
				float3 staticSwitch14_g84879 = ObjectData20_g84879;
				#endif
				float3 Vertex_SizeFade1740_g84806 = staticSwitch14_g84879;
				half Global_VertexOffset7549_g84806 = break322_g84873.z;
				float3 ase_objectScale = float3( length( unity_ObjectToWorld[ 0 ].xyz ), length( unity_ObjectToWorld[ 1 ].xyz ), length( unity_ObjectToWorld[ 2 ].xyz ) );
				float3 appendResult7547_g84806 = (float3(0.0 , ( ( ( ( Global_VertexOffset7549_g84806 - ( (ObjectPosition_Shifted7481_g84806).y * _ConformOffsetMode ) ) + _ConformOffsetValue ) / ase_objectScale.y ) * _GlobalConform ) , 0.0));
				half3 Vertex_Offset7544_g84806 = appendResult7547_g84806;
				float3 lerpResult16_g84882 = lerp( VertexPosition3588_g84806 , ( ( ( Vertex_Motion7493_g84806 + Grass_Perspective2661_g84806 ) * Vertex_Size1741_g84806 * Vertex_SizeFade1740_g84806 ) + Mesh_PivotsOS2291_g84806 + Vertex_Offset7544_g84806 ) , TVE_IsEnabled);
				float3 temp_output_4912_0_g84806 = lerpResult16_g84882;
				float3 Final_VertexPosition890_g84806 = ( temp_output_4912_0_g84806 + _DisableSRPBatcher );
				
				half2 Global_VertexOrientationWS7551_g84806 = temp_output_356_0_g84873;
				float2 break7779_g84806 = Global_VertexOrientationWS7551_g84806;
				float dotResult8067_g84806 = dot( Global_VertexOrientationWS7551_g84806 , Global_VertexOrientationWS7551_g84806 );
				float3 appendResult7781_g84806 = (float3(break7779_g84806.x , sqrt( ( 1.0 - saturate( dotResult8067_g84806 ) ) ) , break7779_g84806.y));
				float3 normalizeResult8063_g84806 = normalize( appendResult7781_g84806 );
				float3 worldToObjDir7782_g84806 = ASESafeNormalize( mul( unity_WorldToObject, float4( normalizeResult8063_g84806, 0 ) ).xyz );
				half Terrain_Blend_Offset8086_g84806 = _TerrainBlendOffsetValue;
				half Terrain_Mask_Vertex8085_g84806 = saturate( ( ( Global_VertexOffset7549_g84806 + ( Terrain_Blend_Offset8086_g84806 * _TerrainBlendNormalValue ) ) - (WorldPosition_Shifted7477_g84806).y ) );
				float3 lerpResult7784_g84806 = lerp( v.normal , worldToObjDir7782_g84806 , Terrain_Mask_Vertex8085_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7896_g84806 = lerpResult7784_g84806;
				#else
				float3 staticSwitch7896_g84806 = v.normal;
				#endif
				
				float4 break33_g84872 = _second_uvs_mode;
				float2 temp_output_30_0_g84872 = ( v.ase_texcoord.xy * break33_g84872.x );
				float2 appendResult21_g84861 = (float2(v.texcoord1.xyzw.z , v.texcoord1.xyzw.w));
				float2 Mesh_DetailCoord3_g84806 = appendResult21_g84861;
				float2 temp_output_29_0_g84872 = ( Mesh_DetailCoord3_g84806 * break33_g84872.y );
				float2 temp_output_31_0_g84872 = ( (WorldPosition_Shifted7477_g84806).xz * break33_g84872.z );
				half2 Second_UVs_Tilling7656_g84806 = (_SecondUVs).xy;
				half2 Second_UVs_Scale7664_g84806 = ( 1.0 / Second_UVs_Tilling7656_g84806 );
				float2 lerpResult7660_g84806 = lerp( Second_UVs_Tilling7656_g84806 , Second_UVs_Scale7664_g84806 , _SecondUVsScaleMode);
				half2 Second_UVs_Offset7657_g84806 = (_SecondUVs).zw;
				float2 vertexToFrag11_g84871 = ( ( ( temp_output_30_0_g84872 + temp_output_29_0_g84872 + temp_output_31_0_g84872 ) * lerpResult7660_g84806 ) + Second_UVs_Offset7657_g84806 );
				o.ase_texcoord4.xy = vertexToFrag11_g84871;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord5.xyz = ase_worldTangent;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				o.ase_texcoord6.xyz = ase_worldNormal;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord7.xyz = ase_worldBitangent;
				o.ase_texcoord8.xyz = ase_worldPos;
				float vertexToFrag11_g84941 = saturate( ( ( Global_VertexOffset7549_g84806 + Terrain_Blend_Offset8086_g84806 ) - (WorldPosition_Shifted7477_g84806).y ) );
				o.ase_texcoord4.z = vertexToFrag11_g84941;
				o.ase_texcoord9.xyz = vertexToFrag3890_g84806;
				o.ase_texcoord10.xyz = vertexToFrag4224_g84806;
				half Global_Noise_A4860_g84806 = break638_g84851.a;
				half Tint_Highlight_Value3231_g84806 = ( Global_Noise_A4860_g84806 * Global_Wind_Power2223_g84806 * Motion_FadeOut4005_g84806 * Mesh_Height1524_g84806 );
				float vertexToFrag11_g84914 = Tint_Highlight_Value3231_g84806;
				o.ase_texcoord4.w = vertexToFrag11_g84914;
				
				o.ase_texcoord3 = v.ase_texcoord;
				o.ase_color = v.ase_color;
				o.ase_normal = v.normal;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				o.ase_texcoord9.w = 0;
				o.ase_texcoord10.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = Final_VertexPosition890_g84806;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = staticSwitch7896_g84806;
				v.tangent = v.tangent;

				#ifdef EDITOR_VISUALIZATION
					o.vizUV = 0;
					o.lightCoord = 0;
					if (unity_VisualizationMode == EDITORVIZ_TEXTURE)
						o.vizUV = UnityMetaVizUV(unity_EditorViz_UVIndex, v.texcoord.xy, v.texcoord1.xy, v.texcoord2.xy, unity_EditorViz_Texture_ST);
					else if (unity_VisualizationMode == EDITORVIZ_SHOWLIGHTMASK)
					{
						o.vizUV = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
						o.lightCoord = mul(unity_EditorViz_WorldToLight, mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1)));
					}
				#endif

				o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				half2 Main_UVs15_g84806 = ( ( IN.ase_texcoord3.xy * (_MainUVs).xy ) + (_MainUVs).zw );
				float4 tex2DNode29_g84806 = SAMPLE_TEXTURE2D( _MainAlbedoTex, sampler_MainAlbedoTex, Main_UVs15_g84806 );
				float3 lerpResult6223_g84806 = lerp( float3( 1,1,1 ) , (tex2DNode29_g84806).rgb , _MainAlbedoValue);
				float4 tex2DNode35_g84806 = SAMPLE_TEXTURE2D( _MainMaskTex, sampler_Linear_Repeat, Main_UVs15_g84806 );
				half Main_Mask57_g84806 = tex2DNode35_g84806.b;
				float clampResult17_g84892 = clamp( Main_Mask57_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84893 = _MainMaskMinValue;
				float temp_output_10_0_g84893 = ( _MainMaskMaxValue - temp_output_7_0_g84893 );
				half Main_Mask_Remap5765_g84806 = saturate( ( ( clampResult17_g84892 - temp_output_7_0_g84893 ) / ( temp_output_10_0_g84893 + 0.0001 ) ) );
				float lerpResult8007_g84806 = lerp( 1.0 , Main_Mask_Remap5765_g84806 , _MainColorMode);
				float4 lerpResult7986_g84806 = lerp( _MainColorTwo , _MainColor , lerpResult8007_g84806);
				half3 Main_Color_RGB7994_g84806 = (lerpResult7986_g84806).rgb;
				half3 Main_Albedo99_g84806 = ( lerpResult6223_g84806 * Main_Color_RGB7994_g84806 );
				float2 vertexToFrag11_g84871 = IN.ase_texcoord4.xy;
				half2 Second_UVs17_g84806 = vertexToFrag11_g84871;
				float4 tex2DNode89_g84806 = SAMPLE_TEXTURE2D( _SecondAlbedoTex, sampler_SecondAlbedoTex, Second_UVs17_g84806 );
				float3 lerpResult6225_g84806 = lerp( float3( 1,1,1 ) , (tex2DNode89_g84806).rgb , _SecondAlbedoValue);
				float4 tex2DNode33_g84806 = SAMPLE_TEXTURE2D( _SecondMaskTex, sampler_Linear_Repeat, Second_UVs17_g84806 );
				half Second_Mask81_g84806 = tex2DNode33_g84806.b;
				float clampResult17_g84895 = clamp( Second_Mask81_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84896 = _SecondMaskMinValue;
				float temp_output_10_0_g84896 = ( _SecondMaskMaxValue - temp_output_7_0_g84896 );
				half Second_Mask_Remap6130_g84806 = saturate( ( ( clampResult17_g84895 - temp_output_7_0_g84896 ) / ( temp_output_10_0_g84896 + 0.0001 ) ) );
				float lerpResult8008_g84806 = lerp( 1.0 , Second_Mask_Remap6130_g84806 , _SecondColorMode);
				float4 lerpResult7997_g84806 = lerp( _SecondColorTwo , _SecondColor , lerpResult8008_g84806);
				half3 Second_Color_RGB8005_g84806 = (lerpResult7997_g84806).rgb;
				half3 Second_Albedo153_g84806 = ( lerpResult6225_g84806 * Second_Color_RGB8005_g84806 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g84905 = 2.0;
				#else
				float staticSwitch1_g84905 = 4.594794;
				#endif
				float3 lerpResult4834_g84806 = lerp( ( Main_Albedo99_g84806 * Second_Albedo153_g84806 * staticSwitch1_g84905 ) , Second_Albedo153_g84806 , _DetailBlendMode);
				float lerpResult6885_g84806 = lerp( Main_Mask57_g84806 , Second_Mask81_g84806 , _DetailMaskMode);
				float clampResult17_g84911 = clamp( lerpResult6885_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84910 = _DetailMaskMinValue;
				float temp_output_10_0_g84910 = ( _DetailMaskMaxValue - temp_output_7_0_g84910 );
				half Detail_Mask_Texture6794_g84806 = saturate( ( ( clampResult17_g84911 - temp_output_7_0_g84910 ) / ( temp_output_10_0_g84910 + 0.0001 ) ) );
				half Mesh_DetailMask90_g84806 = IN.ase_color.b;
				half4 Normal_Packed45_g84891 = SAMPLE_TEXTURE2D( _MainNormalTex, sampler_Linear_Repeat, Main_UVs15_g84806 );
				float2 appendResult58_g84891 = (float2(( (Normal_Packed45_g84891).x * (Normal_Packed45_g84891).w ) , (Normal_Packed45_g84891).y));
				half2 Normal_Default50_g84891 = appendResult58_g84891;
				half2 Normal_ASTC41_g84891 = (Normal_Packed45_g84891).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g84891 = Normal_ASTC41_g84891;
				#else
				float2 staticSwitch38_g84891 = Normal_Default50_g84891;
				#endif
				half2 Normal_NO_DTX544_g84891 = (Normal_Packed45_g84891).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g84891 = Normal_NO_DTX544_g84891;
				#else
				float2 staticSwitch37_g84891 = staticSwitch38_g84891;
				#endif
				float2 temp_output_6555_0_g84806 = ( (staticSwitch37_g84891*2.0 + -1.0) * _MainNormalValue );
				float3 appendResult7388_g84806 = (float3(temp_output_6555_0_g84806 , 1.0));
				float3 ase_worldTangent = IN.ase_texcoord5.xyz;
				float3 ase_worldNormal = IN.ase_texcoord6.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord7.xyz;
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal7389_g84806 = appendResult7388_g84806;
				float3 worldNormal7389_g84806 = float3(dot(tanToWorld0,tanNormal7389_g84806), dot(tanToWorld1,tanNormal7389_g84806), dot(tanToWorld2,tanNormal7389_g84806));
				half3 Main_NormalWS7390_g84806 = worldNormal7389_g84806;
				float lerpResult6884_g84806 = lerp( Mesh_DetailMask90_g84806 , ((Main_NormalWS7390_g84806).y*0.5 + 0.5) , _DetailMeshMode);
				float clampResult17_g84909 = clamp( lerpResult6884_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84908 = _DetailMeshMinValue;
				float temp_output_10_0_g84908 = ( _DetailMeshMaxValue - temp_output_7_0_g84908 );
				half Detail_Mask_Surface1540_g84806 = saturate( ( ( clampResult17_g84909 - temp_output_7_0_g84908 ) / ( temp_output_10_0_g84908 + 0.0001 ) ) );
				float clampResult17_g84912 = clamp( ( Detail_Mask_Texture6794_g84806 * Detail_Mask_Surface1540_g84806 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g84913 = _DetailBlendMinValue;
				float temp_output_10_0_g84913 = ( _DetailBlendMaxValue - temp_output_7_0_g84913 );
				half Detail_Mask147_g84806 = ( saturate( ( ( clampResult17_g84912 - temp_output_7_0_g84913 ) / ( temp_output_10_0_g84913 + 0.0001 ) ) ) * _DetailMode * _DetailValue );
				float3 lerpResult235_g84806 = lerp( Main_Albedo99_g84806 , lerpResult4834_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float3 staticSwitch255_g84806 = lerpResult235_g84806;
				#else
				float3 staticSwitch255_g84806 = Main_Albedo99_g84806;
				#endif
				half3 Blend_Albedo_Detail265_g84806 = staticSwitch255_g84806;
				half Mesh_Height1524_g84806 = IN.ase_color.a;
				float temp_output_7_0_g84916 = _GradientMinValue;
				float temp_output_10_0_g84916 = ( _GradientMaxValue - temp_output_7_0_g84916 );
				half Tint_Gradient_Value2784_g84806 = saturate( ( ( Mesh_Height1524_g84806 - temp_output_7_0_g84916 ) / ( temp_output_10_0_g84916 + 0.0001 ) ) );
				float3 lerpResult2779_g84806 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Tint_Gradient_Value2784_g84806);
				float lerpResult6617_g84806 = lerp( Main_Mask_Remap5765_g84806 , Second_Mask_Remap6130_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch6623_g84806 = lerpResult6617_g84806;
				#else
				float staticSwitch6623_g84806 = Main_Mask_Remap5765_g84806;
				#endif
				half Blend_MaskRemap_Detail6621_g84806 = staticSwitch6623_g84806;
				half Tint_Gradient_Mask6207_g84806 = Blend_MaskRemap_Detail6621_g84806;
				float3 lerpResult6208_g84806 = lerp( float3( 1,1,1 ) , lerpResult2779_g84806 , Tint_Gradient_Mask6207_g84806);
				half3 Tint_Gradient_Color5769_g84806 = lerpResult6208_g84806;
				half3 Tint_Noise_Color5770_g84806 = float3(1,1,1);
				half3 Tint_User_Color7335_g84806 = float3(1,1,1);
				float Mesh_Occlusion318_g84806 = IN.ase_color.g;
				float clampResult17_g84915 = clamp( Mesh_Occlusion318_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84917 = _VertexOcclusionMinValue;
				float temp_output_10_0_g84917 = ( _VertexOcclusionMaxValue - temp_output_7_0_g84917 );
				half Occlusion_Mask6432_g84806 = saturate( ( ( clampResult17_g84915 - temp_output_7_0_g84917 ) / ( temp_output_10_0_g84917 + 0.0001 ) ) );
				float3 lerpResult2945_g84806 = lerp( (_VertexOcclusionColor).rgb , float3( 1,1,1 ) , Occlusion_Mask6432_g84806);
				half3 Occlusion_Color648_g84806 = lerpResult2945_g84806;
				half3 Matcap_Color7428_g84806 = half3(0,0,0);
				half3 Blend_Albedo_Tinted2808_g84806 = ( ( Blend_Albedo_Detail265_g84806 * Tint_Gradient_Color5769_g84806 * Tint_Noise_Color5770_g84806 * Tint_User_Color7335_g84806 * Occlusion_Color648_g84806 ) + Matcap_Color7428_g84806 );
				float localHeightBasedBlending7362_g84942 = ( 0.0 );
				float3 ase_worldPos = IN.ase_texcoord8.xyz;
				float4 appendResult9125_g84942 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g85039 = appendResult9125_g84942;
				float2 InputScale48_g85039 = (temp_output_35_0_g85039).zw;
				half2 FinalScale53_g85039 = ( 1.0 / InputScale48_g85039 );
				float2 InputPosition52_g85039 = (temp_output_35_0_g85039).xy;
				half2 FinalPosition58_g85039 = -( FinalScale53_g85039 * InputPosition52_g85039 );
				float2 Terrain_Control_UV7873_g84942 = ( ( (ase_worldPos).xz * FinalScale53_g85039 ) + FinalPosition58_g85039 );
				half4 Terrain_Control_047365_g84942 = SAMPLE_TEXTURE2D( _ControlTex1, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_047362_g84942 = Terrain_Control_047365_g84942;
				half4 Terrain_Control_087366_g84942 = SAMPLE_TEXTURE2D( _ControlTex2, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_087362_g84942 = Terrain_Control_087366_g84942;
				half4 Terrain_Control_127712_g84942 = SAMPLE_TEXTURE2D( _ControlTex3, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_127362_g84942 = Terrain_Control_127712_g84942;
				half4 Terrain_Control_167711_g84942 = SAMPLE_TEXTURE2D( _ControlTex4, sampler_Linear_Clamp_Aniso8, Terrain_Control_UV7873_g84942 );
				float4 control_167362_g84942 = Terrain_Control_167711_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84995) = _MaskTex1;
				SamplerState Sampler238_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_016785_g84942 = _Coords1;
				float4 temp_output_37_0_g84995 = Input_Coords_016785_g84942;
				half4 Coords238_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition238_g84995 = ase_worldPos;
				half4 localSamplePlanar2D238_g84995 = SamplePlanar2D( Texture238_g84995 , Sampler238_g84995 , Coords238_g84995 , WorldPosition238_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84995) = _MaskTex1;
				SamplerState Sampler246_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition246_g84995 = ase_worldPos;
				half3 WorldNormal246_g84995 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84995 = SamplePlanar3D( Texture246_g84995 , Sampler246_g84995 , Coords246_g84995 , WorldPosition246_g84995 , WorldNormal246_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84995) = _MaskTex1;
				SamplerState Sampler234_g84995 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84995 = temp_output_37_0_g84995;
				float3 WorldPosition234_g84995 = ase_worldPos;
				float4 localSampleStochastic2D234_g84995 = SampleStochastic2D( Texture234_g84995 , Sampler234_g84995 , Coords234_g84995 , WorldPosition234_g84995 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84995) = _MaskTex1;
				SamplerState Sampler263_g84995 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84995 = temp_output_37_0_g84995;
				half3 WorldPosition263_g84995 = ase_worldPos;
				half3 WorldNormal263_g84995 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84995 = SampleStochastic3D( Texture263_g84995 , Sampler263_g84995 , Coords263_g84995 , WorldPosition263_g84995 , WorldNormal263_g84995 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8639_g84942 = localSamplePlanar2D238_g84995;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8639_g84942 = localSamplePlanar3D246_g84995;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8639_g84942 = localSampleStochastic2D234_g84995;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8639_g84942 = localSampleStochastic3D263_g84995;
				#else
				float4 staticSwitch8639_g84942 = localSamplePlanar2D238_g84995;
				#endif
				float4 temp_output_7_0_g84944 = _MaskMin1;
				float4 temp_output_10_0_g84944 = ( _MaskMax1 - temp_output_7_0_g84944 );
				float4 temp_output_6970_0_g84942 = saturate( ( ( staticSwitch8639_g84942 - temp_output_7_0_g84944 ) / ( temp_output_10_0_g84944 + 0.0001 ) ) );
				half4 Masks_015_g84952 = temp_output_6970_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84996) = _MaskTex2;
				SamplerState Sampler238_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_026787_g84942 = _Coords2;
				float4 temp_output_37_0_g84996 = Input_Coords_026787_g84942;
				half4 Coords238_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition238_g84996 = ase_worldPos;
				half4 localSamplePlanar2D238_g84996 = SamplePlanar2D( Texture238_g84996 , Sampler238_g84996 , Coords238_g84996 , WorldPosition238_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84996) = _MaskTex2;
				SamplerState Sampler246_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition246_g84996 = ase_worldPos;
				half3 WorldNormal246_g84996 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84996 = SamplePlanar3D( Texture246_g84996 , Sampler246_g84996 , Coords246_g84996 , WorldPosition246_g84996 , WorldNormal246_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84996) = _MaskTex2;
				SamplerState Sampler234_g84996 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84996 = temp_output_37_0_g84996;
				float3 WorldPosition234_g84996 = ase_worldPos;
				float4 localSampleStochastic2D234_g84996 = SampleStochastic2D( Texture234_g84996 , Sampler234_g84996 , Coords234_g84996 , WorldPosition234_g84996 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84996) = _MaskTex2;
				SamplerState Sampler263_g84996 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84996 = temp_output_37_0_g84996;
				half3 WorldPosition263_g84996 = ase_worldPos;
				half3 WorldNormal263_g84996 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84996 = SampleStochastic3D( Texture263_g84996 , Sampler263_g84996 , Coords263_g84996 , WorldPosition263_g84996 , WorldNormal263_g84996 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8640_g84942 = localSamplePlanar2D238_g84996;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8640_g84942 = localSamplePlanar3D246_g84996;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8640_g84942 = localSampleStochastic2D234_g84996;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8640_g84942 = localSampleStochastic3D263_g84996;
				#else
				float4 staticSwitch8640_g84942 = localSamplePlanar2D238_g84996;
				#endif
				float4 temp_output_7_0_g84946 = _MaskMin2;
				float4 temp_output_10_0_g84946 = ( _MaskMax2 - temp_output_7_0_g84946 );
				float4 temp_output_6977_0_g84942 = saturate( ( ( staticSwitch8640_g84942 - temp_output_7_0_g84946 ) / ( temp_output_10_0_g84946 + 0.0001 ) ) );
				half4 Masks_0210_g84952 = temp_output_6977_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84997) = _MaskTex3;
				SamplerState Sampler238_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_036789_g84942 = _Coords3;
				float4 temp_output_37_0_g84997 = Input_Coords_036789_g84942;
				half4 Coords238_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition238_g84997 = ase_worldPos;
				half4 localSamplePlanar2D238_g84997 = SamplePlanar2D( Texture238_g84997 , Sampler238_g84997 , Coords238_g84997 , WorldPosition238_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84997) = _MaskTex3;
				SamplerState Sampler246_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition246_g84997 = ase_worldPos;
				half3 WorldNormal246_g84997 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84997 = SamplePlanar3D( Texture246_g84997 , Sampler246_g84997 , Coords246_g84997 , WorldPosition246_g84997 , WorldNormal246_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84997) = _MaskTex3;
				SamplerState Sampler234_g84997 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84997 = temp_output_37_0_g84997;
				float3 WorldPosition234_g84997 = ase_worldPos;
				float4 localSampleStochastic2D234_g84997 = SampleStochastic2D( Texture234_g84997 , Sampler234_g84997 , Coords234_g84997 , WorldPosition234_g84997 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84997) = _MaskTex3;
				SamplerState Sampler263_g84997 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84997 = temp_output_37_0_g84997;
				half3 WorldPosition263_g84997 = ase_worldPos;
				half3 WorldNormal263_g84997 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84997 = SampleStochastic3D( Texture263_g84997 , Sampler263_g84997 , Coords263_g84997 , WorldPosition263_g84997 , WorldNormal263_g84997 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8641_g84942 = localSamplePlanar2D238_g84997;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8641_g84942 = localSamplePlanar3D246_g84997;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8641_g84942 = localSampleStochastic2D234_g84997;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8641_g84942 = localSampleStochastic3D263_g84997;
				#else
				float4 staticSwitch8641_g84942 = localSamplePlanar2D238_g84997;
				#endif
				float4 temp_output_7_0_g84947 = _MaskMin3;
				float4 temp_output_10_0_g84947 = ( _MaskMax3 - temp_output_7_0_g84947 );
				float4 temp_output_6978_0_g84942 = saturate( ( ( staticSwitch8641_g84942 - temp_output_7_0_g84947 ) / ( temp_output_10_0_g84947 + 0.0001 ) ) );
				half4 Masks_0312_g84952 = temp_output_6978_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84998) = _MaskTex4;
				SamplerState Sampler238_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_046791_g84942 = _Coords4;
				float4 temp_output_37_0_g84998 = Input_Coords_046791_g84942;
				half4 Coords238_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition238_g84998 = ase_worldPos;
				half4 localSamplePlanar2D238_g84998 = SamplePlanar2D( Texture238_g84998 , Sampler238_g84998 , Coords238_g84998 , WorldPosition238_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84998) = _MaskTex4;
				SamplerState Sampler246_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition246_g84998 = ase_worldPos;
				half3 WorldNormal246_g84998 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84998 = SamplePlanar3D( Texture246_g84998 , Sampler246_g84998 , Coords246_g84998 , WorldPosition246_g84998 , WorldNormal246_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84998) = _MaskTex4;
				SamplerState Sampler234_g84998 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84998 = temp_output_37_0_g84998;
				float3 WorldPosition234_g84998 = ase_worldPos;
				float4 localSampleStochastic2D234_g84998 = SampleStochastic2D( Texture234_g84998 , Sampler234_g84998 , Coords234_g84998 , WorldPosition234_g84998 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84998) = _MaskTex4;
				SamplerState Sampler263_g84998 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84998 = temp_output_37_0_g84998;
				half3 WorldPosition263_g84998 = ase_worldPos;
				half3 WorldNormal263_g84998 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84998 = SampleStochastic3D( Texture263_g84998 , Sampler263_g84998 , Coords263_g84998 , WorldPosition263_g84998 , WorldNormal263_g84998 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8642_g84942 = localSamplePlanar2D238_g84998;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8642_g84942 = localSamplePlanar3D246_g84998;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8642_g84942 = localSampleStochastic2D234_g84998;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8642_g84942 = localSampleStochastic3D263_g84998;
				#else
				float4 staticSwitch8642_g84942 = localSamplePlanar2D238_g84998;
				#endif
				float4 temp_output_7_0_g84948 = _MaskMin4;
				float4 temp_output_10_0_g84948 = ( _MaskMax4 - temp_output_7_0_g84948 );
				float4 temp_output_6983_0_g84942 = saturate( ( ( staticSwitch8642_g84942 - temp_output_7_0_g84948 ) / ( temp_output_10_0_g84948 + 0.0001 ) ) );
				half4 Masks_0414_g84952 = temp_output_6983_0_g84942;
				float4 appendResult29_g84952 = (float4((Masks_015_g84952).z , (Masks_0210_g84952).z , (Masks_0312_g84952).z , (Masks_0414_g84952).z));
				half4 Control31_g84952 = Terrain_Control_047365_g84942;
				half4 Terrain_Height_047210_g84942 = ( appendResult29_g84952 * Control31_g84952 );
				float4 heights_047362_g84942 = Terrain_Height_047210_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85007) = _MaskTex5;
				SamplerState Sampler238_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_058750_g84942 = _Coords5;
				float4 temp_output_37_0_g85007 = Input_Coords_058750_g84942;
				half4 Coords238_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition238_g85007 = ase_worldPos;
				half4 localSamplePlanar2D238_g85007 = SamplePlanar2D( Texture238_g85007 , Sampler238_g85007 , Coords238_g85007 , WorldPosition238_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85007) = _MaskTex5;
				SamplerState Sampler246_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition246_g85007 = ase_worldPos;
				half3 WorldNormal246_g85007 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85007 = SamplePlanar3D( Texture246_g85007 , Sampler246_g85007 , Coords246_g85007 , WorldPosition246_g85007 , WorldNormal246_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85007) = _MaskTex5;
				SamplerState Sampler234_g85007 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85007 = temp_output_37_0_g85007;
				float3 WorldPosition234_g85007 = ase_worldPos;
				float4 localSampleStochastic2D234_g85007 = SampleStochastic2D( Texture234_g85007 , Sampler234_g85007 , Coords234_g85007 , WorldPosition234_g85007 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85007) = _MaskTex5;
				SamplerState Sampler263_g85007 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85007 = temp_output_37_0_g85007;
				half3 WorldPosition263_g85007 = ase_worldPos;
				half3 WorldNormal263_g85007 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85007 = SampleStochastic3D( Texture263_g85007 , Sampler263_g85007 , Coords263_g85007 , WorldPosition263_g85007 , WorldNormal263_g85007 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8710_g84942 = localSamplePlanar2D238_g85007;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8710_g84942 = localSamplePlanar3D246_g85007;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8710_g84942 = localSampleStochastic2D234_g85007;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8710_g84942 = localSampleStochastic3D263_g85007;
				#else
				float4 staticSwitch8710_g84942 = localSamplePlanar2D238_g85007;
				#endif
				float4 temp_output_7_0_g84960 = _MaskMin5;
				float4 temp_output_10_0_g84960 = ( _MaskMax5 - temp_output_7_0_g84960 );
				float4 temp_output_8714_0_g84942 = saturate( ( ( staticSwitch8710_g84942 - temp_output_7_0_g84960 ) / ( temp_output_10_0_g84960 + 0.0001 ) ) );
				half4 Masks_015_g84961 = temp_output_8714_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85008) = _MaskTex6;
				SamplerState Sampler238_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_068751_g84942 = _Coords6;
				float4 temp_output_37_0_g85008 = Input_Coords_068751_g84942;
				half4 Coords238_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition238_g85008 = ase_worldPos;
				half4 localSamplePlanar2D238_g85008 = SamplePlanar2D( Texture238_g85008 , Sampler238_g85008 , Coords238_g85008 , WorldPosition238_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85008) = _MaskTex6;
				SamplerState Sampler246_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition246_g85008 = ase_worldPos;
				half3 WorldNormal246_g85008 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85008 = SamplePlanar3D( Texture246_g85008 , Sampler246_g85008 , Coords246_g85008 , WorldPosition246_g85008 , WorldNormal246_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85008) = _MaskTex6;
				SamplerState Sampler234_g85008 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85008 = temp_output_37_0_g85008;
				float3 WorldPosition234_g85008 = ase_worldPos;
				float4 localSampleStochastic2D234_g85008 = SampleStochastic2D( Texture234_g85008 , Sampler234_g85008 , Coords234_g85008 , WorldPosition234_g85008 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85008) = _MaskTex6;
				SamplerState Sampler263_g85008 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85008 = temp_output_37_0_g85008;
				half3 WorldPosition263_g85008 = ase_worldPos;
				half3 WorldNormal263_g85008 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85008 = SampleStochastic3D( Texture263_g85008 , Sampler263_g85008 , Coords263_g85008 , WorldPosition263_g85008 , WorldNormal263_g85008 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8711_g84942 = localSamplePlanar2D238_g85008;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8711_g84942 = localSamplePlanar3D246_g85008;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8711_g84942 = localSampleStochastic2D234_g85008;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8711_g84942 = localSampleStochastic3D263_g85008;
				#else
				float4 staticSwitch8711_g84942 = localSamplePlanar2D238_g85008;
				#endif
				float4 temp_output_7_0_g84963 = _MaskMin6;
				float4 temp_output_10_0_g84963 = ( _MaskMax6 - temp_output_7_0_g84963 );
				float4 temp_output_8721_0_g84942 = saturate( ( ( staticSwitch8711_g84942 - temp_output_7_0_g84963 ) / ( temp_output_10_0_g84963 + 0.0001 ) ) );
				half4 Masks_0210_g84961 = temp_output_8721_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85009) = _MaskTex7;
				SamplerState Sampler238_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_078752_g84942 = _Coords7;
				float4 temp_output_37_0_g85009 = Input_Coords_078752_g84942;
				half4 Coords238_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition238_g85009 = ase_worldPos;
				half4 localSamplePlanar2D238_g85009 = SamplePlanar2D( Texture238_g85009 , Sampler238_g85009 , Coords238_g85009 , WorldPosition238_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85009) = _MaskTex7;
				SamplerState Sampler246_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition246_g85009 = ase_worldPos;
				half3 WorldNormal246_g85009 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85009 = SamplePlanar3D( Texture246_g85009 , Sampler246_g85009 , Coords246_g85009 , WorldPosition246_g85009 , WorldNormal246_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85009) = _MaskTex7;
				SamplerState Sampler234_g85009 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85009 = temp_output_37_0_g85009;
				float3 WorldPosition234_g85009 = ase_worldPos;
				float4 localSampleStochastic2D234_g85009 = SampleStochastic2D( Texture234_g85009 , Sampler234_g85009 , Coords234_g85009 , WorldPosition234_g85009 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85009) = _MaskTex7;
				SamplerState Sampler263_g85009 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85009 = temp_output_37_0_g85009;
				half3 WorldPosition263_g85009 = ase_worldPos;
				half3 WorldNormal263_g85009 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85009 = SampleStochastic3D( Texture263_g85009 , Sampler263_g85009 , Coords263_g85009 , WorldPosition263_g85009 , WorldNormal263_g85009 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8712_g84942 = localSamplePlanar2D238_g85009;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8712_g84942 = localSamplePlanar3D246_g85009;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8712_g84942 = localSampleStochastic2D234_g85009;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8712_g84942 = localSampleStochastic3D263_g85009;
				#else
				float4 staticSwitch8712_g84942 = localSamplePlanar2D238_g85009;
				#endif
				float4 temp_output_7_0_g84964 = _MaskMin7;
				float4 temp_output_10_0_g84964 = ( _MaskMax7 - temp_output_7_0_g84964 );
				float4 temp_output_8724_0_g84942 = saturate( ( ( staticSwitch8712_g84942 - temp_output_7_0_g84964 ) / ( temp_output_10_0_g84964 + 0.0001 ) ) );
				half4 Masks_0312_g84961 = temp_output_8724_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85010) = _MaskTex8;
				SamplerState Sampler238_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_088749_g84942 = _Coords8;
				float4 temp_output_37_0_g85010 = Input_Coords_088749_g84942;
				half4 Coords238_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition238_g85010 = ase_worldPos;
				half4 localSamplePlanar2D238_g85010 = SamplePlanar2D( Texture238_g85010 , Sampler238_g85010 , Coords238_g85010 , WorldPosition238_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85010) = _MaskTex8;
				SamplerState Sampler246_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition246_g85010 = ase_worldPos;
				half3 WorldNormal246_g85010 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85010 = SamplePlanar3D( Texture246_g85010 , Sampler246_g85010 , Coords246_g85010 , WorldPosition246_g85010 , WorldNormal246_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85010) = _MaskTex8;
				SamplerState Sampler234_g85010 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85010 = temp_output_37_0_g85010;
				float3 WorldPosition234_g85010 = ase_worldPos;
				float4 localSampleStochastic2D234_g85010 = SampleStochastic2D( Texture234_g85010 , Sampler234_g85010 , Coords234_g85010 , WorldPosition234_g85010 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85010) = _MaskTex8;
				SamplerState Sampler263_g85010 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85010 = temp_output_37_0_g85010;
				half3 WorldPosition263_g85010 = ase_worldPos;
				half3 WorldNormal263_g85010 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85010 = SampleStochastic3D( Texture263_g85010 , Sampler263_g85010 , Coords263_g85010 , WorldPosition263_g85010 , WorldNormal263_g85010 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8713_g84942 = localSamplePlanar2D238_g85010;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8713_g84942 = localSamplePlanar3D246_g85010;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8713_g84942 = localSampleStochastic2D234_g85010;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8713_g84942 = localSampleStochastic3D263_g85010;
				#else
				float4 staticSwitch8713_g84942 = localSamplePlanar2D238_g85010;
				#endif
				float4 temp_output_7_0_g84965 = _MaskMin8;
				float4 temp_output_10_0_g84965 = ( _MaskMax8 - temp_output_7_0_g84965 );
				float4 temp_output_8727_0_g84942 = saturate( ( ( staticSwitch8713_g84942 - temp_output_7_0_g84965 ) / ( temp_output_10_0_g84965 + 0.0001 ) ) );
				half4 Masks_0414_g84961 = temp_output_8727_0_g84942;
				float4 appendResult29_g84961 = (float4((Masks_015_g84961).z , (Masks_0210_g84961).z , (Masks_0312_g84961).z , (Masks_0414_g84961).z));
				half4 Control31_g84961 = Terrain_Control_087366_g84942;
				half4 Terrain_Height_088731_g84942 = ( appendResult29_g84961 * Control31_g84961 );
				float4 heights_087362_g84942 = Terrain_Height_088731_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85019) = _MaskTex9;
				SamplerState Sampler238_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_098833_g84942 = _Coords9;
				float4 temp_output_37_0_g85019 = Input_Coords_098833_g84942;
				half4 Coords238_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition238_g85019 = ase_worldPos;
				half4 localSamplePlanar2D238_g85019 = SamplePlanar2D( Texture238_g85019 , Sampler238_g85019 , Coords238_g85019 , WorldPosition238_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85019) = _MaskTex9;
				SamplerState Sampler246_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition246_g85019 = ase_worldPos;
				half3 WorldNormal246_g85019 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85019 = SamplePlanar3D( Texture246_g85019 , Sampler246_g85019 , Coords246_g85019 , WorldPosition246_g85019 , WorldNormal246_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85019) = _MaskTex9;
				SamplerState Sampler234_g85019 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85019 = temp_output_37_0_g85019;
				float3 WorldPosition234_g85019 = ase_worldPos;
				float4 localSampleStochastic2D234_g85019 = SampleStochastic2D( Texture234_g85019 , Sampler234_g85019 , Coords234_g85019 , WorldPosition234_g85019 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85019) = _MaskTex9;
				SamplerState Sampler263_g85019 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85019 = temp_output_37_0_g85019;
				half3 WorldPosition263_g85019 = ase_worldPos;
				half3 WorldNormal263_g85019 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85019 = SampleStochastic3D( Texture263_g85019 , Sampler263_g85019 , Coords263_g85019 , WorldPosition263_g85019 , WorldNormal263_g85019 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8878_g84942 = localSamplePlanar2D238_g85019;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8878_g84942 = localSamplePlanar3D246_g85019;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8878_g84942 = localSampleStochastic2D234_g85019;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8878_g84942 = localSampleStochastic3D263_g85019;
				#else
				float4 staticSwitch8878_g84942 = localSamplePlanar2D238_g85019;
				#endif
				float4 temp_output_7_0_g84970 = _MaskMin9;
				float4 temp_output_10_0_g84970 = ( _MaskMax9 - temp_output_7_0_g84970 );
				float4 temp_output_8815_0_g84942 = saturate( ( ( staticSwitch8878_g84942 - temp_output_7_0_g84970 ) / ( temp_output_10_0_g84970 + 0.0001 ) ) );
				half4 Masks_015_g84971 = temp_output_8815_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85020) = _MaskTex10;
				SamplerState Sampler238_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_108834_g84942 = _Coords10;
				float4 temp_output_37_0_g85020 = Input_Coords_108834_g84942;
				half4 Coords238_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition238_g85020 = ase_worldPos;
				half4 localSamplePlanar2D238_g85020 = SamplePlanar2D( Texture238_g85020 , Sampler238_g85020 , Coords238_g85020 , WorldPosition238_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85020) = _MaskTex10;
				SamplerState Sampler246_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition246_g85020 = ase_worldPos;
				half3 WorldNormal246_g85020 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85020 = SamplePlanar3D( Texture246_g85020 , Sampler246_g85020 , Coords246_g85020 , WorldPosition246_g85020 , WorldNormal246_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85020) = _MaskTex10;
				SamplerState Sampler234_g85020 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85020 = temp_output_37_0_g85020;
				float3 WorldPosition234_g85020 = ase_worldPos;
				float4 localSampleStochastic2D234_g85020 = SampleStochastic2D( Texture234_g85020 , Sampler234_g85020 , Coords234_g85020 , WorldPosition234_g85020 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85020) = _MaskTex10;
				SamplerState Sampler263_g85020 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85020 = temp_output_37_0_g85020;
				half3 WorldPosition263_g85020 = ase_worldPos;
				half3 WorldNormal263_g85020 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85020 = SampleStochastic3D( Texture263_g85020 , Sampler263_g85020 , Coords263_g85020 , WorldPosition263_g85020 , WorldNormal263_g85020 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8860_g84942 = localSamplePlanar2D238_g85020;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8860_g84942 = localSamplePlanar3D246_g85020;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8860_g84942 = localSampleStochastic2D234_g85020;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8860_g84942 = localSampleStochastic3D263_g85020;
				#else
				float4 staticSwitch8860_g84942 = localSamplePlanar2D238_g85020;
				#endif
				float4 temp_output_7_0_g84973 = _MaskMin10;
				float4 temp_output_10_0_g84973 = ( _MaskMax10 - temp_output_7_0_g84973 );
				float4 temp_output_8818_0_g84942 = saturate( ( ( staticSwitch8860_g84942 - temp_output_7_0_g84973 ) / ( temp_output_10_0_g84973 + 0.0001 ) ) );
				half4 Masks_0210_g84971 = temp_output_8818_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85021) = _MaskTex11;
				SamplerState Sampler238_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_118835_g84942 = _Coords11;
				float4 temp_output_37_0_g85021 = Input_Coords_118835_g84942;
				half4 Coords238_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition238_g85021 = ase_worldPos;
				half4 localSamplePlanar2D238_g85021 = SamplePlanar2D( Texture238_g85021 , Sampler238_g85021 , Coords238_g85021 , WorldPosition238_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85021) = _MaskTex11;
				SamplerState Sampler246_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition246_g85021 = ase_worldPos;
				half3 WorldNormal246_g85021 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85021 = SamplePlanar3D( Texture246_g85021 , Sampler246_g85021 , Coords246_g85021 , WorldPosition246_g85021 , WorldNormal246_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85021) = _MaskTex11;
				SamplerState Sampler234_g85021 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85021 = temp_output_37_0_g85021;
				float3 WorldPosition234_g85021 = ase_worldPos;
				float4 localSampleStochastic2D234_g85021 = SampleStochastic2D( Texture234_g85021 , Sampler234_g85021 , Coords234_g85021 , WorldPosition234_g85021 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85021) = _MaskTex11;
				SamplerState Sampler263_g85021 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85021 = temp_output_37_0_g85021;
				half3 WorldPosition263_g85021 = ase_worldPos;
				half3 WorldNormal263_g85021 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85021 = SampleStochastic3D( Texture263_g85021 , Sampler263_g85021 , Coords263_g85021 , WorldPosition263_g85021 , WorldNormal263_g85021 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8861_g84942 = localSamplePlanar2D238_g85021;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8861_g84942 = localSamplePlanar3D246_g85021;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8861_g84942 = localSampleStochastic2D234_g85021;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8861_g84942 = localSampleStochastic3D263_g85021;
				#else
				float4 staticSwitch8861_g84942 = localSamplePlanar2D238_g85021;
				#endif
				float4 temp_output_7_0_g84974 = _MaskMin11;
				float4 temp_output_10_0_g84974 = ( _MaskMax11 - temp_output_7_0_g84974 );
				float4 temp_output_8819_0_g84942 = saturate( ( ( staticSwitch8861_g84942 - temp_output_7_0_g84974 ) / ( temp_output_10_0_g84974 + 0.0001 ) ) );
				half4 Masks_0312_g84971 = temp_output_8819_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85022) = _MaskTex12;
				SamplerState Sampler238_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_128836_g84942 = _Coords12;
				float4 temp_output_37_0_g85022 = Input_Coords_128836_g84942;
				half4 Coords238_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition238_g85022 = ase_worldPos;
				half4 localSamplePlanar2D238_g85022 = SamplePlanar2D( Texture238_g85022 , Sampler238_g85022 , Coords238_g85022 , WorldPosition238_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85022) = _MaskTex12;
				SamplerState Sampler246_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition246_g85022 = ase_worldPos;
				half3 WorldNormal246_g85022 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85022 = SamplePlanar3D( Texture246_g85022 , Sampler246_g85022 , Coords246_g85022 , WorldPosition246_g85022 , WorldNormal246_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85022) = _MaskTex12;
				SamplerState Sampler234_g85022 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85022 = temp_output_37_0_g85022;
				float3 WorldPosition234_g85022 = ase_worldPos;
				float4 localSampleStochastic2D234_g85022 = SampleStochastic2D( Texture234_g85022 , Sampler234_g85022 , Coords234_g85022 , WorldPosition234_g85022 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85022) = _MaskTex12;
				SamplerState Sampler263_g85022 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85022 = temp_output_37_0_g85022;
				half3 WorldPosition263_g85022 = ase_worldPos;
				half3 WorldNormal263_g85022 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85022 = SampleStochastic3D( Texture263_g85022 , Sampler263_g85022 , Coords263_g85022 , WorldPosition263_g85022 , WorldNormal263_g85022 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8879_g84942 = localSamplePlanar2D238_g85022;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8879_g84942 = localSamplePlanar3D246_g85022;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8879_g84942 = localSampleStochastic2D234_g85022;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8879_g84942 = localSampleStochastic3D263_g85022;
				#else
				float4 staticSwitch8879_g84942 = localSamplePlanar2D238_g85022;
				#endif
				float4 temp_output_7_0_g84975 = _MaskMin12;
				float4 temp_output_10_0_g84975 = ( _MaskMax12 - temp_output_7_0_g84975 );
				float4 temp_output_8820_0_g84942 = saturate( ( ( staticSwitch8879_g84942 - temp_output_7_0_g84975 ) / ( temp_output_10_0_g84975 + 0.0001 ) ) );
				half4 Masks_0414_g84971 = temp_output_8820_0_g84942;
				float4 appendResult29_g84971 = (float4((Masks_015_g84971).z , (Masks_0210_g84971).z , (Masks_0312_g84971).z , (Masks_0414_g84971).z));
				half4 Control31_g84971 = Terrain_Control_127712_g84942;
				half4 Terrain_Height_128870_g84942 = ( appendResult29_g84971 * Control31_g84971 );
				float4 heights_127362_g84942 = Terrain_Height_128870_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85030) = _MaskTex13;
				SamplerState Sampler238_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_138960_g84942 = _Coords13;
				float4 temp_output_37_0_g85030 = Input_Coords_138960_g84942;
				half4 Coords238_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition238_g85030 = ase_worldPos;
				half4 localSamplePlanar2D238_g85030 = SamplePlanar2D( Texture238_g85030 , Sampler238_g85030 , Coords238_g85030 , WorldPosition238_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85030) = _MaskTex13;
				SamplerState Sampler246_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition246_g85030 = ase_worldPos;
				half3 WorldNormal246_g85030 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85030 = SamplePlanar3D( Texture246_g85030 , Sampler246_g85030 , Coords246_g85030 , WorldPosition246_g85030 , WorldNormal246_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85030) = _MaskTex13;
				SamplerState Sampler234_g85030 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85030 = temp_output_37_0_g85030;
				float3 WorldPosition234_g85030 = ase_worldPos;
				float4 localSampleStochastic2D234_g85030 = SampleStochastic2D( Texture234_g85030 , Sampler234_g85030 , Coords234_g85030 , WorldPosition234_g85030 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85030) = _MaskTex13;
				SamplerState Sampler263_g85030 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85030 = temp_output_37_0_g85030;
				half3 WorldPosition263_g85030 = ase_worldPos;
				half3 WorldNormal263_g85030 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85030 = SampleStochastic3D( Texture263_g85030 , Sampler263_g85030 , Coords263_g85030 , WorldPosition263_g85030 , WorldNormal263_g85030 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch9000_g84942 = localSamplePlanar2D238_g85030;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch9000_g84942 = localSamplePlanar3D246_g85030;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch9000_g84942 = localSampleStochastic2D234_g85030;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch9000_g84942 = localSampleStochastic3D263_g85030;
				#else
				float4 staticSwitch9000_g84942 = localSamplePlanar2D238_g85030;
				#endif
				float4 temp_output_7_0_g84980 = _MaskMin13;
				float4 temp_output_10_0_g84980 = ( _MaskMax13 - temp_output_7_0_g84980 );
				float4 temp_output_8931_0_g84942 = saturate( ( ( staticSwitch9000_g84942 - temp_output_7_0_g84980 ) / ( temp_output_10_0_g84980 + 0.0001 ) ) );
				half4 Masks_015_g84981 = temp_output_8931_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85031) = _MaskTex14;
				SamplerState Sampler238_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_148961_g84942 = _Coords14;
				float4 temp_output_37_0_g85031 = Input_Coords_148961_g84942;
				half4 Coords238_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition238_g85031 = ase_worldPos;
				half4 localSamplePlanar2D238_g85031 = SamplePlanar2D( Texture238_g85031 , Sampler238_g85031 , Coords238_g85031 , WorldPosition238_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85031) = _MaskTex14;
				SamplerState Sampler246_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition246_g85031 = ase_worldPos;
				half3 WorldNormal246_g85031 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85031 = SamplePlanar3D( Texture246_g85031 , Sampler246_g85031 , Coords246_g85031 , WorldPosition246_g85031 , WorldNormal246_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85031) = _MaskTex14;
				SamplerState Sampler234_g85031 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85031 = temp_output_37_0_g85031;
				float3 WorldPosition234_g85031 = ase_worldPos;
				float4 localSampleStochastic2D234_g85031 = SampleStochastic2D( Texture234_g85031 , Sampler234_g85031 , Coords234_g85031 , WorldPosition234_g85031 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85031) = _MaskTex14;
				SamplerState Sampler263_g85031 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85031 = temp_output_37_0_g85031;
				half3 WorldPosition263_g85031 = ase_worldPos;
				half3 WorldNormal263_g85031 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85031 = SampleStochastic3D( Texture263_g85031 , Sampler263_g85031 , Coords263_g85031 , WorldPosition263_g85031 , WorldNormal263_g85031 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch9001_g84942 = localSamplePlanar2D238_g85031;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch9001_g84942 = localSamplePlanar3D246_g85031;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch9001_g84942 = localSampleStochastic2D234_g85031;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch9001_g84942 = localSampleStochastic3D263_g85031;
				#else
				float4 staticSwitch9001_g84942 = localSamplePlanar2D238_g85031;
				#endif
				float4 temp_output_7_0_g84983 = _MaskMin14;
				float4 temp_output_10_0_g84983 = ( _MaskMax14 - temp_output_7_0_g84983 );
				float4 temp_output_8934_0_g84942 = saturate( ( ( staticSwitch9001_g84942 - temp_output_7_0_g84983 ) / ( temp_output_10_0_g84983 + 0.0001 ) ) );
				half4 Masks_0210_g84981 = temp_output_8934_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85032) = _MaskTex15;
				SamplerState Sampler238_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_158962_g84942 = _Coords15;
				float4 temp_output_37_0_g85032 = Input_Coords_158962_g84942;
				half4 Coords238_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition238_g85032 = ase_worldPos;
				half4 localSamplePlanar2D238_g85032 = SamplePlanar2D( Texture238_g85032 , Sampler238_g85032 , Coords238_g85032 , WorldPosition238_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85032) = _MaskTex15;
				SamplerState Sampler246_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition246_g85032 = ase_worldPos;
				half3 WorldNormal246_g85032 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85032 = SamplePlanar3D( Texture246_g85032 , Sampler246_g85032 , Coords246_g85032 , WorldPosition246_g85032 , WorldNormal246_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85032) = _MaskTex15;
				SamplerState Sampler234_g85032 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85032 = temp_output_37_0_g85032;
				float3 WorldPosition234_g85032 = ase_worldPos;
				float4 localSampleStochastic2D234_g85032 = SampleStochastic2D( Texture234_g85032 , Sampler234_g85032 , Coords234_g85032 , WorldPosition234_g85032 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85032) = _MaskTex15;
				SamplerState Sampler263_g85032 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85032 = temp_output_37_0_g85032;
				half3 WorldPosition263_g85032 = ase_worldPos;
				half3 WorldNormal263_g85032 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85032 = SampleStochastic3D( Texture263_g85032 , Sampler263_g85032 , Coords263_g85032 , WorldPosition263_g85032 , WorldNormal263_g85032 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch9002_g84942 = localSamplePlanar2D238_g85032;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch9002_g84942 = localSamplePlanar3D246_g85032;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch9002_g84942 = localSampleStochastic2D234_g85032;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch9002_g84942 = localSampleStochastic3D263_g85032;
				#else
				float4 staticSwitch9002_g84942 = localSamplePlanar2D238_g85032;
				#endif
				float4 temp_output_7_0_g84984 = _MaskMin15;
				float4 temp_output_10_0_g84984 = ( _MaskMax15 - temp_output_7_0_g84984 );
				float4 temp_output_8935_0_g84942 = saturate( ( ( staticSwitch9002_g84942 - temp_output_7_0_g84984 ) / ( temp_output_10_0_g84984 + 0.0001 ) ) );
				half4 Masks_0312_g84981 = temp_output_8935_0_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85033) = _MaskTex16;
				SamplerState Sampler238_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Input_Coords_168959_g84942 = _Coords16;
				float4 temp_output_37_0_g85033 = Input_Coords_168959_g84942;
				half4 Coords238_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition238_g85033 = ase_worldPos;
				half4 localSamplePlanar2D238_g85033 = SamplePlanar2D( Texture238_g85033 , Sampler238_g85033 , Coords238_g85033 , WorldPosition238_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85033) = _MaskTex16;
				SamplerState Sampler246_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition246_g85033 = ase_worldPos;
				half3 WorldNormal246_g85033 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85033 = SamplePlanar3D( Texture246_g85033 , Sampler246_g85033 , Coords246_g85033 , WorldPosition246_g85033 , WorldNormal246_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85033) = _MaskTex16;
				SamplerState Sampler234_g85033 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85033 = temp_output_37_0_g85033;
				float3 WorldPosition234_g85033 = ase_worldPos;
				float4 localSampleStochastic2D234_g85033 = SampleStochastic2D( Texture234_g85033 , Sampler234_g85033 , Coords234_g85033 , WorldPosition234_g85033 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85033) = _MaskTex16;
				SamplerState Sampler263_g85033 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85033 = temp_output_37_0_g85033;
				half3 WorldPosition263_g85033 = ase_worldPos;
				half3 WorldNormal263_g85033 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85033 = SampleStochastic3D( Texture263_g85033 , Sampler263_g85033 , Coords263_g85033 , WorldPosition263_g85033 , WorldNormal263_g85033 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch9003_g84942 = localSamplePlanar2D238_g85033;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch9003_g84942 = localSamplePlanar3D246_g85033;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch9003_g84942 = localSampleStochastic2D234_g85033;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch9003_g84942 = localSampleStochastic3D263_g85033;
				#else
				float4 staticSwitch9003_g84942 = localSamplePlanar2D238_g85033;
				#endif
				float4 temp_output_7_0_g84985 = _MaskMin16;
				float4 temp_output_10_0_g84985 = ( _MaskMax16 - temp_output_7_0_g84985 );
				float4 temp_output_8936_0_g84942 = saturate( ( ( staticSwitch9003_g84942 - temp_output_7_0_g84985 ) / ( temp_output_10_0_g84985 + 0.0001 ) ) );
				half4 Masks_0414_g84981 = temp_output_8936_0_g84942;
				float4 appendResult29_g84981 = (float4((Masks_015_g84981).z , (Masks_0210_g84981).z , (Masks_0312_g84981).z , (Masks_0414_g84981).z));
				half4 Control31_g84981 = Terrain_Control_167711_g84942;
				half4 Terrain_Height_169015_g84942 = ( appendResult29_g84981 * Control31_g84981 );
				float4 heights_167362_g84942 = Terrain_Height_169015_g84942;
				float heightTransition7362_g84942 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g84942 = float4( 0,0,0,0 );
				float4 weights_087362_g84942 = float4( 0,0,0,0 );
				float4 weights_127362_g84942 = float4( 0,0,0,0 );
				float4 weights_167362_g84942 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g84942.x;
				maxHeight = max(maxHeight, heights_047362_g84942.y);
				maxHeight = max(maxHeight, heights_047362_g84942.z);
				maxHeight = max(maxHeight, heights_047362_g84942.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				maxHeight = max(maxHeight, heights_127362_g84942.x);
				maxHeight = max(maxHeight, heights_127362_g84942.y);
				maxHeight = max(maxHeight, heights_127362_g84942.z);
				maxHeight = max(maxHeight, heights_127362_g84942.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g84942.x);
				maxHeight = max(maxHeight, heights_087362_g84942.y);
				maxHeight = max(maxHeight, heights_087362_g84942.z);
				maxHeight = max(maxHeight, heights_087362_g84942.w);
				maxHeight = max(maxHeight, heights_127362_g84942.x);
				maxHeight = max(maxHeight, heights_127362_g84942.y);
				maxHeight = max(maxHeight, heights_127362_g84942.z);
				maxHeight = max(maxHeight, heights_127362_g84942.w);
				maxHeight = max(maxHeight, heights_167362_g84942.x);
				maxHeight = max(maxHeight, heights_167362_g84942.y);
				maxHeight = max(maxHeight, heights_167362_g84942.z);
				maxHeight = max(maxHeight, heights_167362_g84942.w);
				#endif
				float transition = max(heightTransition7362_g84942, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g84942.x, heights_047362_g84942.y, heights_047362_g84942.z, heights_047362_g84942.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g84942;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				weightedHeights_12 = float4 ( heights_127362_g84942.x, heights_127362_g84942.y, heights_127362_g84942.z, heights_127362_g84942.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g84942;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g84942.x, heights_087362_g84942.y, heights_087362_g84942.z, heights_087362_g84942.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g84942;
				weightedHeights_12 = float4 ( heights_127362_g84942.x, heights_127362_g84942.y, heights_127362_g84942.z, heights_127362_g84942.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g84942;
				weightedHeights_16 = float4 ( heights_167362_g84942.x, heights_167362_g84942.y, heights_167362_g84942.z, heights_167362_g84942.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g84942;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g84942 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g84942 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g84942 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g84942 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g84942 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8792_g84942 = weights_047362_g84942;
				#else
				float4 staticSwitch8792_g84942 = control_047362_g84942;
				#endif
				half4 Terrain_Weights_046781_g84942 = staticSwitch8792_g84942;
				half4 Weights52_g84951 = Terrain_Weights_046781_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85035) = _AlbedoTex1;
				SamplerState Sampler238_g85035 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85035 = Input_Coords_016785_g84942;
				half4 Coords238_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition238_g85035 = ase_worldPos;
				half4 localSamplePlanar2D238_g85035 = SamplePlanar2D( Texture238_g85035 , Sampler238_g85035 , Coords238_g85035 , WorldPosition238_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85035) = _AlbedoTex1;
				SamplerState Sampler246_g85035 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition246_g85035 = ase_worldPos;
				half3 WorldNormal246_g85035 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85035 = SamplePlanar3D( Texture246_g85035 , Sampler246_g85035 , Coords246_g85035 , WorldPosition246_g85035 , WorldNormal246_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85035) = _AlbedoTex1;
				SamplerState Sampler234_g85035 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85035 = temp_output_37_0_g85035;
				float3 WorldPosition234_g85035 = ase_worldPos;
				float4 localSampleStochastic2D234_g85035 = SampleStochastic2D( Texture234_g85035 , Sampler234_g85035 , Coords234_g85035 , WorldPosition234_g85035 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85035) = _AlbedoTex1;
				SamplerState Sampler263_g85035 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85035 = temp_output_37_0_g85035;
				half3 WorldPosition263_g85035 = ase_worldPos;
				half3 WorldNormal263_g85035 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85035 = SampleStochastic3D( Texture263_g85035 , Sampler263_g85035 , Coords263_g85035 , WorldPosition263_g85035 , WorldNormal263_g85035 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8614_g84942 = localSamplePlanar2D238_g85035;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8614_g84942 = localSamplePlanar3D246_g85035;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8614_g84942 = localSampleStochastic2D234_g85035;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8614_g84942 = localSampleStochastic3D263_g85035;
				#else
				float4 staticSwitch8614_g84942 = localSamplePlanar2D238_g85035;
				#endif
				half4 Layer133_g84951 = staticSwitch8614_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84988) = _AlbedoTex2;
				SamplerState Sampler238_g84988 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84988 = Input_Coords_026787_g84942;
				half4 Coords238_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition238_g84988 = ase_worldPos;
				half4 localSamplePlanar2D238_g84988 = SamplePlanar2D( Texture238_g84988 , Sampler238_g84988 , Coords238_g84988 , WorldPosition238_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84988) = _AlbedoTex2;
				SamplerState Sampler246_g84988 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition246_g84988 = ase_worldPos;
				half3 WorldNormal246_g84988 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84988 = SamplePlanar3D( Texture246_g84988 , Sampler246_g84988 , Coords246_g84988 , WorldPosition246_g84988 , WorldNormal246_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84988) = _AlbedoTex2;
				SamplerState Sampler234_g84988 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84988 = temp_output_37_0_g84988;
				float3 WorldPosition234_g84988 = ase_worldPos;
				float4 localSampleStochastic2D234_g84988 = SampleStochastic2D( Texture234_g84988 , Sampler234_g84988 , Coords234_g84988 , WorldPosition234_g84988 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84988) = _AlbedoTex2;
				SamplerState Sampler263_g84988 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84988 = temp_output_37_0_g84988;
				half3 WorldPosition263_g84988 = ase_worldPos;
				half3 WorldNormal263_g84988 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84988 = SampleStochastic3D( Texture263_g84988 , Sampler263_g84988 , Coords263_g84988 , WorldPosition263_g84988 , WorldNormal263_g84988 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8629_g84942 = localSamplePlanar2D238_g84988;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8629_g84942 = localSamplePlanar3D246_g84988;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8629_g84942 = localSampleStochastic2D234_g84988;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8629_g84942 = localSampleStochastic3D263_g84988;
				#else
				float4 staticSwitch8629_g84942 = localSamplePlanar2D238_g84988;
				#endif
				half4 Layer237_g84951 = staticSwitch8629_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84989) = _AlbedoTex3;
				SamplerState Sampler238_g84989 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84989 = Input_Coords_036789_g84942;
				half4 Coords238_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition238_g84989 = ase_worldPos;
				half4 localSamplePlanar2D238_g84989 = SamplePlanar2D( Texture238_g84989 , Sampler238_g84989 , Coords238_g84989 , WorldPosition238_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84989) = _AlbedoTex3;
				SamplerState Sampler246_g84989 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition246_g84989 = ase_worldPos;
				half3 WorldNormal246_g84989 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84989 = SamplePlanar3D( Texture246_g84989 , Sampler246_g84989 , Coords246_g84989 , WorldPosition246_g84989 , WorldNormal246_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84989) = _AlbedoTex3;
				SamplerState Sampler234_g84989 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84989 = temp_output_37_0_g84989;
				float3 WorldPosition234_g84989 = ase_worldPos;
				float4 localSampleStochastic2D234_g84989 = SampleStochastic2D( Texture234_g84989 , Sampler234_g84989 , Coords234_g84989 , WorldPosition234_g84989 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84989) = _AlbedoTex3;
				SamplerState Sampler263_g84989 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84989 = temp_output_37_0_g84989;
				half3 WorldPosition263_g84989 = ase_worldPos;
				half3 WorldNormal263_g84989 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84989 = SampleStochastic3D( Texture263_g84989 , Sampler263_g84989 , Coords263_g84989 , WorldPosition263_g84989 , WorldNormal263_g84989 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8630_g84942 = localSamplePlanar2D238_g84989;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8630_g84942 = localSamplePlanar3D246_g84989;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8630_g84942 = localSampleStochastic2D234_g84989;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8630_g84942 = localSampleStochastic3D263_g84989;
				#else
				float4 staticSwitch8630_g84942 = localSamplePlanar2D238_g84989;
				#endif
				half4 Layer338_g84951 = staticSwitch8630_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84990) = _AlbedoTex4;
				SamplerState Sampler238_g84990 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84990 = Input_Coords_046791_g84942;
				half4 Coords238_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition238_g84990 = ase_worldPos;
				half4 localSamplePlanar2D238_g84990 = SamplePlanar2D( Texture238_g84990 , Sampler238_g84990 , Coords238_g84990 , WorldPosition238_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84990) = _AlbedoTex4;
				SamplerState Sampler246_g84990 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition246_g84990 = ase_worldPos;
				half3 WorldNormal246_g84990 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84990 = SamplePlanar3D( Texture246_g84990 , Sampler246_g84990 , Coords246_g84990 , WorldPosition246_g84990 , WorldNormal246_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84990) = _AlbedoTex4;
				SamplerState Sampler234_g84990 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84990 = temp_output_37_0_g84990;
				float3 WorldPosition234_g84990 = ase_worldPos;
				float4 localSampleStochastic2D234_g84990 = SampleStochastic2D( Texture234_g84990 , Sampler234_g84990 , Coords234_g84990 , WorldPosition234_g84990 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84990) = _AlbedoTex4;
				SamplerState Sampler263_g84990 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84990 = temp_output_37_0_g84990;
				half3 WorldPosition263_g84990 = ase_worldPos;
				half3 WorldNormal263_g84990 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84990 = SampleStochastic3D( Texture263_g84990 , Sampler263_g84990 , Coords263_g84990 , WorldPosition263_g84990 , WorldNormal263_g84990 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8631_g84942 = localSamplePlanar2D238_g84990;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8631_g84942 = localSamplePlanar3D246_g84990;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8631_g84942 = localSampleStochastic2D234_g84990;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8631_g84942 = localSampleStochastic3D263_g84990;
				#else
				float4 staticSwitch8631_g84942 = localSamplePlanar2D238_g84990;
				#endif
				half4 Layer439_g84951 = staticSwitch8631_g84942;
				float4 weightedBlendVar31_g84951 = Weights52_g84951;
				float4 weightedBlend31_g84951 = ( weightedBlendVar31_g84951.x*Layer133_g84951 + weightedBlendVar31_g84951.y*Layer237_g84951 + weightedBlendVar31_g84951.z*Layer338_g84951 + weightedBlendVar31_g84951.w*Layer439_g84951 );
				half4 Terrain_Albedo_047200_g84942 = weightedBlend31_g84951;
				half4 Layer_045_g84954 = Terrain_Albedo_047200_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8793_g84942 = weights_087362_g84942;
				#else
				float4 staticSwitch8793_g84942 = control_087362_g84942;
				#endif
				half4 Terrain_Weights_087340_g84942 = staticSwitch8793_g84942;
				half4 Weights52_g84958 = Terrain_Weights_087340_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84999) = _AlbedoTex5;
				SamplerState Sampler238_g84999 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84999 = Input_Coords_058750_g84942;
				half4 Coords238_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition238_g84999 = ase_worldPos;
				half4 localSamplePlanar2D238_g84999 = SamplePlanar2D( Texture238_g84999 , Sampler238_g84999 , Coords238_g84999 , WorldPosition238_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84999) = _AlbedoTex5;
				SamplerState Sampler246_g84999 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition246_g84999 = ase_worldPos;
				half3 WorldNormal246_g84999 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84999 = SamplePlanar3D( Texture246_g84999 , Sampler246_g84999 , Coords246_g84999 , WorldPosition246_g84999 , WorldNormal246_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84999) = _AlbedoTex5;
				SamplerState Sampler234_g84999 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84999 = temp_output_37_0_g84999;
				float3 WorldPosition234_g84999 = ase_worldPos;
				float4 localSampleStochastic2D234_g84999 = SampleStochastic2D( Texture234_g84999 , Sampler234_g84999 , Coords234_g84999 , WorldPosition234_g84999 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84999) = _AlbedoTex5;
				SamplerState Sampler263_g84999 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84999 = temp_output_37_0_g84999;
				half3 WorldPosition263_g84999 = ase_worldPos;
				half3 WorldNormal263_g84999 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84999 = SampleStochastic3D( Texture263_g84999 , Sampler263_g84999 , Coords263_g84999 , WorldPosition263_g84999 , WorldNormal263_g84999 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8690_g84942 = localSamplePlanar2D238_g84999;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8690_g84942 = localSamplePlanar3D246_g84999;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8690_g84942 = localSampleStochastic2D234_g84999;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8690_g84942 = localSampleStochastic3D263_g84999;
				#else
				float4 staticSwitch8690_g84942 = localSamplePlanar2D238_g84999;
				#endif
				half4 Layer133_g84958 = staticSwitch8690_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85000) = _AlbedoTex6;
				SamplerState Sampler238_g85000 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85000 = Input_Coords_068751_g84942;
				half4 Coords238_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition238_g85000 = ase_worldPos;
				half4 localSamplePlanar2D238_g85000 = SamplePlanar2D( Texture238_g85000 , Sampler238_g85000 , Coords238_g85000 , WorldPosition238_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85000) = _AlbedoTex6;
				SamplerState Sampler246_g85000 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition246_g85000 = ase_worldPos;
				half3 WorldNormal246_g85000 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85000 = SamplePlanar3D( Texture246_g85000 , Sampler246_g85000 , Coords246_g85000 , WorldPosition246_g85000 , WorldNormal246_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85000) = _AlbedoTex6;
				SamplerState Sampler234_g85000 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85000 = temp_output_37_0_g85000;
				float3 WorldPosition234_g85000 = ase_worldPos;
				float4 localSampleStochastic2D234_g85000 = SampleStochastic2D( Texture234_g85000 , Sampler234_g85000 , Coords234_g85000 , WorldPosition234_g85000 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85000) = _AlbedoTex6;
				SamplerState Sampler263_g85000 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85000 = temp_output_37_0_g85000;
				half3 WorldPosition263_g85000 = ase_worldPos;
				half3 WorldNormal263_g85000 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85000 = SampleStochastic3D( Texture263_g85000 , Sampler263_g85000 , Coords263_g85000 , WorldPosition263_g85000 , WorldNormal263_g85000 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8691_g84942 = localSamplePlanar2D238_g85000;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8691_g84942 = localSamplePlanar3D246_g85000;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8691_g84942 = localSampleStochastic2D234_g85000;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8691_g84942 = localSampleStochastic3D263_g85000;
				#else
				float4 staticSwitch8691_g84942 = localSamplePlanar2D238_g85000;
				#endif
				half4 Layer237_g84958 = staticSwitch8691_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85001) = _AlbedoTex7;
				SamplerState Sampler238_g85001 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85001 = Input_Coords_078752_g84942;
				half4 Coords238_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition238_g85001 = ase_worldPos;
				half4 localSamplePlanar2D238_g85001 = SamplePlanar2D( Texture238_g85001 , Sampler238_g85001 , Coords238_g85001 , WorldPosition238_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85001) = _AlbedoTex7;
				SamplerState Sampler246_g85001 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition246_g85001 = ase_worldPos;
				half3 WorldNormal246_g85001 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85001 = SamplePlanar3D( Texture246_g85001 , Sampler246_g85001 , Coords246_g85001 , WorldPosition246_g85001 , WorldNormal246_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85001) = _AlbedoTex7;
				SamplerState Sampler234_g85001 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85001 = temp_output_37_0_g85001;
				float3 WorldPosition234_g85001 = ase_worldPos;
				float4 localSampleStochastic2D234_g85001 = SampleStochastic2D( Texture234_g85001 , Sampler234_g85001 , Coords234_g85001 , WorldPosition234_g85001 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85001) = _AlbedoTex7;
				SamplerState Sampler263_g85001 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85001 = temp_output_37_0_g85001;
				half3 WorldPosition263_g85001 = ase_worldPos;
				half3 WorldNormal263_g85001 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85001 = SampleStochastic3D( Texture263_g85001 , Sampler263_g85001 , Coords263_g85001 , WorldPosition263_g85001 , WorldNormal263_g85001 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8692_g84942 = localSamplePlanar2D238_g85001;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8692_g84942 = localSamplePlanar3D246_g85001;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8692_g84942 = localSampleStochastic2D234_g85001;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8692_g84942 = localSampleStochastic3D263_g85001;
				#else
				float4 staticSwitch8692_g84942 = localSamplePlanar2D238_g85001;
				#endif
				half4 Layer338_g84958 = staticSwitch8692_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85002) = _AlbedoTex8;
				SamplerState Sampler238_g85002 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85002 = Input_Coords_088749_g84942;
				half4 Coords238_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition238_g85002 = ase_worldPos;
				half4 localSamplePlanar2D238_g85002 = SamplePlanar2D( Texture238_g85002 , Sampler238_g85002 , Coords238_g85002 , WorldPosition238_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85002) = _AlbedoTex8;
				SamplerState Sampler246_g85002 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition246_g85002 = ase_worldPos;
				half3 WorldNormal246_g85002 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85002 = SamplePlanar3D( Texture246_g85002 , Sampler246_g85002 , Coords246_g85002 , WorldPosition246_g85002 , WorldNormal246_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85002) = _AlbedoTex8;
				SamplerState Sampler234_g85002 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85002 = temp_output_37_0_g85002;
				float3 WorldPosition234_g85002 = ase_worldPos;
				float4 localSampleStochastic2D234_g85002 = SampleStochastic2D( Texture234_g85002 , Sampler234_g85002 , Coords234_g85002 , WorldPosition234_g85002 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85002) = _AlbedoTex8;
				SamplerState Sampler263_g85002 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85002 = temp_output_37_0_g85002;
				half3 WorldPosition263_g85002 = ase_worldPos;
				half3 WorldNormal263_g85002 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85002 = SampleStochastic3D( Texture263_g85002 , Sampler263_g85002 , Coords263_g85002 , WorldPosition263_g85002 , WorldNormal263_g85002 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8693_g84942 = localSamplePlanar2D238_g85002;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8693_g84942 = localSamplePlanar3D246_g85002;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8693_g84942 = localSampleStochastic2D234_g85002;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8693_g84942 = localSampleStochastic3D263_g85002;
				#else
				float4 staticSwitch8693_g84942 = localSamplePlanar2D238_g85002;
				#endif
				half4 Layer439_g84958 = staticSwitch8693_g84942;
				float4 weightedBlendVar31_g84958 = Weights52_g84958;
				float4 weightedBlend31_g84958 = ( weightedBlendVar31_g84958.x*Layer133_g84958 + weightedBlendVar31_g84958.y*Layer237_g84958 + weightedBlendVar31_g84958.z*Layer338_g84958 + weightedBlendVar31_g84958.w*Layer439_g84958 );
				half4 Terrain_Albedo_088665_g84942 = weightedBlend31_g84958;
				half4 Layer_0810_g84954 = Terrain_Albedo_088665_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8794_g84942 = weights_127362_g84942;
				#else
				float4 staticSwitch8794_g84942 = control_127362_g84942;
				#endif
				half4 Terrain_Weights_127710_g84942 = staticSwitch8794_g84942;
				half4 Weights52_g84968 = Terrain_Weights_127710_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85011) = _AlbedoTex9;
				SamplerState Sampler238_g85011 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85011 = Input_Coords_098833_g84942;
				half4 Coords238_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition238_g85011 = ase_worldPos;
				half4 localSamplePlanar2D238_g85011 = SamplePlanar2D( Texture238_g85011 , Sampler238_g85011 , Coords238_g85011 , WorldPosition238_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85011) = _AlbedoTex9;
				SamplerState Sampler246_g85011 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition246_g85011 = ase_worldPos;
				half3 WorldNormal246_g85011 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85011 = SamplePlanar3D( Texture246_g85011 , Sampler246_g85011 , Coords246_g85011 , WorldPosition246_g85011 , WorldNormal246_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85011) = _AlbedoTex9;
				SamplerState Sampler234_g85011 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85011 = temp_output_37_0_g85011;
				float3 WorldPosition234_g85011 = ase_worldPos;
				float4 localSampleStochastic2D234_g85011 = SampleStochastic2D( Texture234_g85011 , Sampler234_g85011 , Coords234_g85011 , WorldPosition234_g85011 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85011) = _AlbedoTex9;
				SamplerState Sampler263_g85011 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85011 = temp_output_37_0_g85011;
				half3 WorldPosition263_g85011 = ase_worldPos;
				half3 WorldNormal263_g85011 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85011 = SampleStochastic3D( Texture263_g85011 , Sampler263_g85011 , Coords263_g85011 , WorldPosition263_g85011 , WorldNormal263_g85011 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8872_g84942 = localSamplePlanar2D238_g85011;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8872_g84942 = localSamplePlanar3D246_g85011;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8872_g84942 = localSampleStochastic2D234_g85011;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8872_g84942 = localSampleStochastic3D263_g85011;
				#else
				float4 staticSwitch8872_g84942 = localSamplePlanar2D238_g85011;
				#endif
				half4 Layer133_g84968 = staticSwitch8872_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85012) = _AlbedoTex10;
				SamplerState Sampler238_g85012 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85012 = Input_Coords_108834_g84942;
				half4 Coords238_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition238_g85012 = ase_worldPos;
				half4 localSamplePlanar2D238_g85012 = SamplePlanar2D( Texture238_g85012 , Sampler238_g85012 , Coords238_g85012 , WorldPosition238_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85012) = _AlbedoTex10;
				SamplerState Sampler246_g85012 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition246_g85012 = ase_worldPos;
				half3 WorldNormal246_g85012 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85012 = SamplePlanar3D( Texture246_g85012 , Sampler246_g85012 , Coords246_g85012 , WorldPosition246_g85012 , WorldNormal246_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85012) = _AlbedoTex10;
				SamplerState Sampler234_g85012 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85012 = temp_output_37_0_g85012;
				float3 WorldPosition234_g85012 = ase_worldPos;
				float4 localSampleStochastic2D234_g85012 = SampleStochastic2D( Texture234_g85012 , Sampler234_g85012 , Coords234_g85012 , WorldPosition234_g85012 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85012) = _AlbedoTex10;
				SamplerState Sampler263_g85012 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85012 = temp_output_37_0_g85012;
				half3 WorldPosition263_g85012 = ase_worldPos;
				half3 WorldNormal263_g85012 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85012 = SampleStochastic3D( Texture263_g85012 , Sampler263_g85012 , Coords263_g85012 , WorldPosition263_g85012 , WorldNormal263_g85012 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8873_g84942 = localSamplePlanar2D238_g85012;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8873_g84942 = localSamplePlanar3D246_g85012;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8873_g84942 = localSampleStochastic2D234_g85012;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8873_g84942 = localSampleStochastic3D263_g85012;
				#else
				float4 staticSwitch8873_g84942 = localSamplePlanar2D238_g85012;
				#endif
				half4 Layer237_g84968 = staticSwitch8873_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85013) = _AlbedoTex11;
				SamplerState Sampler238_g85013 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85013 = Input_Coords_118835_g84942;
				half4 Coords238_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition238_g85013 = ase_worldPos;
				half4 localSamplePlanar2D238_g85013 = SamplePlanar2D( Texture238_g85013 , Sampler238_g85013 , Coords238_g85013 , WorldPosition238_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85013) = _AlbedoTex11;
				SamplerState Sampler246_g85013 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition246_g85013 = ase_worldPos;
				half3 WorldNormal246_g85013 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85013 = SamplePlanar3D( Texture246_g85013 , Sampler246_g85013 , Coords246_g85013 , WorldPosition246_g85013 , WorldNormal246_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85013) = _AlbedoTex11;
				SamplerState Sampler234_g85013 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85013 = temp_output_37_0_g85013;
				float3 WorldPosition234_g85013 = ase_worldPos;
				float4 localSampleStochastic2D234_g85013 = SampleStochastic2D( Texture234_g85013 , Sampler234_g85013 , Coords234_g85013 , WorldPosition234_g85013 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85013) = _AlbedoTex11;
				SamplerState Sampler263_g85013 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85013 = temp_output_37_0_g85013;
				half3 WorldPosition263_g85013 = ase_worldPos;
				half3 WorldNormal263_g85013 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85013 = SampleStochastic3D( Texture263_g85013 , Sampler263_g85013 , Coords263_g85013 , WorldPosition263_g85013 , WorldNormal263_g85013 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8874_g84942 = localSamplePlanar2D238_g85013;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8874_g84942 = localSamplePlanar3D246_g85013;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8874_g84942 = localSampleStochastic2D234_g85013;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8874_g84942 = localSampleStochastic3D263_g85013;
				#else
				float4 staticSwitch8874_g84942 = localSamplePlanar2D238_g85013;
				#endif
				half4 Layer338_g84968 = staticSwitch8874_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85014) = _AlbedoTex12;
				SamplerState Sampler238_g85014 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85014 = Input_Coords_128836_g84942;
				half4 Coords238_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition238_g85014 = ase_worldPos;
				half4 localSamplePlanar2D238_g85014 = SamplePlanar2D( Texture238_g85014 , Sampler238_g85014 , Coords238_g85014 , WorldPosition238_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85014) = _AlbedoTex12;
				SamplerState Sampler246_g85014 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition246_g85014 = ase_worldPos;
				half3 WorldNormal246_g85014 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85014 = SamplePlanar3D( Texture246_g85014 , Sampler246_g85014 , Coords246_g85014 , WorldPosition246_g85014 , WorldNormal246_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85014) = _AlbedoTex12;
				SamplerState Sampler234_g85014 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85014 = temp_output_37_0_g85014;
				float3 WorldPosition234_g85014 = ase_worldPos;
				float4 localSampleStochastic2D234_g85014 = SampleStochastic2D( Texture234_g85014 , Sampler234_g85014 , Coords234_g85014 , WorldPosition234_g85014 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85014) = _AlbedoTex12;
				SamplerState Sampler263_g85014 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85014 = temp_output_37_0_g85014;
				half3 WorldPosition263_g85014 = ase_worldPos;
				half3 WorldNormal263_g85014 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85014 = SampleStochastic3D( Texture263_g85014 , Sampler263_g85014 , Coords263_g85014 , WorldPosition263_g85014 , WorldNormal263_g85014 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8875_g84942 = localSamplePlanar2D238_g85014;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8875_g84942 = localSamplePlanar3D246_g85014;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8875_g84942 = localSampleStochastic2D234_g85014;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8875_g84942 = localSampleStochastic3D263_g85014;
				#else
				float4 staticSwitch8875_g84942 = localSamplePlanar2D238_g85014;
				#endif
				half4 Layer439_g84968 = staticSwitch8875_g84942;
				float4 weightedBlendVar31_g84968 = Weights52_g84968;
				float4 weightedBlend31_g84968 = ( weightedBlendVar31_g84968.x*Layer133_g84968 + weightedBlendVar31_g84968.y*Layer237_g84968 + weightedBlendVar31_g84968.z*Layer338_g84968 + weightedBlendVar31_g84968.w*Layer439_g84968 );
				half4 Terrain_Albedo_128851_g84942 = weightedBlend31_g84968;
				half4 Layer_1243_g84954 = Terrain_Albedo_128851_g84942;
				#ifdef TVE_HEIGHT_BLEND
				float4 staticSwitch8795_g84942 = weights_167362_g84942;
				#else
				float4 staticSwitch8795_g84942 = control_167362_g84942;
				#endif
				half4 Terrain_Weights_167709_g84942 = staticSwitch8795_g84942;
				half4 Weights52_g84978 = Terrain_Weights_167709_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85023) = _AlbedoTex13;
				SamplerState Sampler238_g85023 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85023 = Input_Coords_138960_g84942;
				half4 Coords238_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition238_g85023 = ase_worldPos;
				half4 localSamplePlanar2D238_g85023 = SamplePlanar2D( Texture238_g85023 , Sampler238_g85023 , Coords238_g85023 , WorldPosition238_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85023) = _AlbedoTex13;
				SamplerState Sampler246_g85023 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition246_g85023 = ase_worldPos;
				half3 WorldNormal246_g85023 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85023 = SamplePlanar3D( Texture246_g85023 , Sampler246_g85023 , Coords246_g85023 , WorldPosition246_g85023 , WorldNormal246_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85023) = _AlbedoTex13;
				SamplerState Sampler234_g85023 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85023 = temp_output_37_0_g85023;
				float3 WorldPosition234_g85023 = ase_worldPos;
				float4 localSampleStochastic2D234_g85023 = SampleStochastic2D( Texture234_g85023 , Sampler234_g85023 , Coords234_g85023 , WorldPosition234_g85023 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85023) = _AlbedoTex13;
				SamplerState Sampler263_g85023 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85023 = temp_output_37_0_g85023;
				half3 WorldPosition263_g85023 = ase_worldPos;
				half3 WorldNormal263_g85023 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85023 = SampleStochastic3D( Texture263_g85023 , Sampler263_g85023 , Coords263_g85023 , WorldPosition263_g85023 , WorldNormal263_g85023 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch8972_g84942 = localSamplePlanar2D238_g85023;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch8972_g84942 = localSamplePlanar3D246_g85023;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch8972_g84942 = localSampleStochastic2D234_g85023;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch8972_g84942 = localSampleStochastic3D263_g85023;
				#else
				float4 staticSwitch8972_g84942 = localSamplePlanar2D238_g85023;
				#endif
				half4 Layer133_g84978 = staticSwitch8972_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85024) = _AlbedoTex14;
				SamplerState Sampler238_g85024 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85024 = Input_Coords_148961_g84942;
				half4 Coords238_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition238_g85024 = ase_worldPos;
				half4 localSamplePlanar2D238_g85024 = SamplePlanar2D( Texture238_g85024 , Sampler238_g85024 , Coords238_g85024 , WorldPosition238_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85024) = _AlbedoTex14;
				SamplerState Sampler246_g85024 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition246_g85024 = ase_worldPos;
				half3 WorldNormal246_g85024 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85024 = SamplePlanar3D( Texture246_g85024 , Sampler246_g85024 , Coords246_g85024 , WorldPosition246_g85024 , WorldNormal246_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85024) = _AlbedoTex14;
				SamplerState Sampler234_g85024 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85024 = temp_output_37_0_g85024;
				float3 WorldPosition234_g85024 = ase_worldPos;
				float4 localSampleStochastic2D234_g85024 = SampleStochastic2D( Texture234_g85024 , Sampler234_g85024 , Coords234_g85024 , WorldPosition234_g85024 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85024) = _AlbedoTex14;
				SamplerState Sampler263_g85024 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85024 = temp_output_37_0_g85024;
				half3 WorldPosition263_g85024 = ase_worldPos;
				half3 WorldNormal263_g85024 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85024 = SampleStochastic3D( Texture263_g85024 , Sampler263_g85024 , Coords263_g85024 , WorldPosition263_g85024 , WorldNormal263_g85024 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch8973_g84942 = localSamplePlanar2D238_g85024;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch8973_g84942 = localSamplePlanar3D246_g85024;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch8973_g84942 = localSampleStochastic2D234_g85024;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch8973_g84942 = localSampleStochastic3D263_g85024;
				#else
				float4 staticSwitch8973_g84942 = localSamplePlanar2D238_g85024;
				#endif
				half4 Layer237_g84978 = staticSwitch8973_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85025) = _AlbedoTex15;
				SamplerState Sampler238_g85025 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85025 = Input_Coords_158962_g84942;
				half4 Coords238_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition238_g85025 = ase_worldPos;
				half4 localSamplePlanar2D238_g85025 = SamplePlanar2D( Texture238_g85025 , Sampler238_g85025 , Coords238_g85025 , WorldPosition238_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85025) = _AlbedoTex15;
				SamplerState Sampler246_g85025 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition246_g85025 = ase_worldPos;
				half3 WorldNormal246_g85025 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85025 = SamplePlanar3D( Texture246_g85025 , Sampler246_g85025 , Coords246_g85025 , WorldPosition246_g85025 , WorldNormal246_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85025) = _AlbedoTex15;
				SamplerState Sampler234_g85025 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85025 = temp_output_37_0_g85025;
				float3 WorldPosition234_g85025 = ase_worldPos;
				float4 localSampleStochastic2D234_g85025 = SampleStochastic2D( Texture234_g85025 , Sampler234_g85025 , Coords234_g85025 , WorldPosition234_g85025 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85025) = _AlbedoTex15;
				SamplerState Sampler263_g85025 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85025 = temp_output_37_0_g85025;
				half3 WorldPosition263_g85025 = ase_worldPos;
				half3 WorldNormal263_g85025 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85025 = SampleStochastic3D( Texture263_g85025 , Sampler263_g85025 , Coords263_g85025 , WorldPosition263_g85025 , WorldNormal263_g85025 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch8974_g84942 = localSamplePlanar2D238_g85025;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch8974_g84942 = localSamplePlanar3D246_g85025;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch8974_g84942 = localSampleStochastic2D234_g85025;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch8974_g84942 = localSampleStochastic3D263_g85025;
				#else
				float4 staticSwitch8974_g84942 = localSamplePlanar2D238_g85025;
				#endif
				half4 Layer338_g84978 = staticSwitch8974_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85026) = _AlbedoTex16;
				SamplerState Sampler238_g85026 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85026 = Input_Coords_168959_g84942;
				half4 Coords238_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition238_g85026 = ase_worldPos;
				half4 localSamplePlanar2D238_g85026 = SamplePlanar2D( Texture238_g85026 , Sampler238_g85026 , Coords238_g85026 , WorldPosition238_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85026) = _AlbedoTex16;
				SamplerState Sampler246_g85026 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition246_g85026 = ase_worldPos;
				half3 WorldNormal246_g85026 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85026 = SamplePlanar3D( Texture246_g85026 , Sampler246_g85026 , Coords246_g85026 , WorldPosition246_g85026 , WorldNormal246_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85026) = _AlbedoTex16;
				SamplerState Sampler234_g85026 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85026 = temp_output_37_0_g85026;
				float3 WorldPosition234_g85026 = ase_worldPos;
				float4 localSampleStochastic2D234_g85026 = SampleStochastic2D( Texture234_g85026 , Sampler234_g85026 , Coords234_g85026 , WorldPosition234_g85026 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85026) = _AlbedoTex16;
				SamplerState Sampler263_g85026 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85026 = temp_output_37_0_g85026;
				half3 WorldPosition263_g85026 = ase_worldPos;
				half3 WorldNormal263_g85026 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85026 = SampleStochastic3D( Texture263_g85026 , Sampler263_g85026 , Coords263_g85026 , WorldPosition263_g85026 , WorldNormal263_g85026 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch8975_g84942 = localSamplePlanar2D238_g85026;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch8975_g84942 = localSamplePlanar3D246_g85026;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch8975_g84942 = localSampleStochastic2D234_g85026;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch8975_g84942 = localSampleStochastic3D263_g85026;
				#else
				float4 staticSwitch8975_g84942 = localSamplePlanar2D238_g85026;
				#endif
				half4 Layer439_g84978 = staticSwitch8975_g84942;
				float4 weightedBlendVar31_g84978 = Weights52_g84978;
				float4 weightedBlend31_g84978 = ( weightedBlendVar31_g84978.x*Layer133_g84978 + weightedBlendVar31_g84978.y*Layer237_g84978 + weightedBlendVar31_g84978.z*Layer338_g84978 + weightedBlendVar31_g84978.w*Layer439_g84978 );
				half4 Terrain_Albedo_168986_g84942 = weightedBlend31_g84978;
				half4 Layer_1644_g84954 = Terrain_Albedo_168986_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84954 = Layer_045_g84954;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 + Layer_1243_g84954 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84954 = ( Layer_045_g84954 + Layer_0810_g84954 + Layer_1243_g84954 + Layer_1644_g84954 );
				#else
				float4 staticSwitch40_g84954 = Layer_045_g84954;
				#endif
				half4 Blend_Albedo7468_g84942 = staticSwitch40_g84954;
				half3 Terrain_Albedo8037_g84806 = ( (Blend_Albedo7468_g84942).xyz * (_TerrainColor).rgb );
				float vertexToFrag11_g84941 = IN.ase_texcoord4.z;
				half Terrain_Mask_Pixel7898_g84806 = vertexToFrag11_g84941;
				half2 Main_Normal137_g84806 = temp_output_6555_0_g84806;
				float2 lerpResult3372_g84806 = lerp( float2( 0,0 ) , Main_Normal137_g84806 , _DetailNormalValue);
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half4 Normal_Packed45_g84894 = SAMPLE_TEXTURE2D( _SecondNormalTex, sampler_Linear_Repeat, Second_UVs17_g84806 );
				float2 appendResult58_g84894 = (float2(( (Normal_Packed45_g84894).x * (Normal_Packed45_g84894).w ) , (Normal_Packed45_g84894).y));
				half2 Normal_Default50_g84894 = appendResult58_g84894;
				half2 Normal_ASTC41_g84894 = (Normal_Packed45_g84894).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g84894 = Normal_ASTC41_g84894;
				#else
				float2 staticSwitch38_g84894 = Normal_Default50_g84894;
				#endif
				half2 Normal_NO_DTX544_g84894 = (Normal_Packed45_g84894).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g84894 = Normal_NO_DTX544_g84894;
				#else
				float2 staticSwitch37_g84894 = staticSwitch38_g84894;
				#endif
				float2 temp_output_6560_0_g84806 = ( (staticSwitch37_g84894*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g84897 = temp_output_6560_0_g84806;
				float2 break64_g84897 = Normal_Planar45_g84897;
				float3 appendResult65_g84897 = (float3(break64_g84897.x , 0.0 , break64_g84897.y));
				float2 ifLocalVar7655_g84806 = 0;
				if( _SecondUVsMode == 2.0 )
				ifLocalVar7655_g84806 = (mul( ase_worldToTangent, appendResult65_g84897 )).xy;
				else if( _SecondUVsMode < 2.0 )
				ifLocalVar7655_g84806 = temp_output_6560_0_g84806;
				half2 Second_Normal179_g84806 = ifLocalVar7655_g84806;
				float2 temp_output_36_0_g84906 = ( lerpResult3372_g84806 + Second_Normal179_g84806 );
				float2 lerpResult3376_g84806 = lerp( Main_Normal137_g84806 , temp_output_36_0_g84906 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float2 staticSwitch267_g84806 = lerpResult3376_g84806;
				#else
				float2 staticSwitch267_g84806 = Main_Normal137_g84806;
				#endif
				half2 Blend_Normal_Detail312_g84806 = staticSwitch267_g84806;
				float3 appendResult7888_g84806 = (float3(Blend_Normal_Detail312_g84806 , 1.0));
				float3 tanNormal7889_g84806 = appendResult7888_g84806;
				float3 worldNormal7889_g84806 = float3(dot(tanToWorld0,tanNormal7889_g84806), dot(tanToWorld1,tanNormal7889_g84806), dot(tanToWorld2,tanNormal7889_g84806));
				half3 Blend_NormalWS_Detail7890_g84806 = worldNormal7889_g84806;
				float temp_output_7901_0_g84806 = saturate( (Blend_NormalWS_Detail7890_g84806).y );
				float temp_output_7895_0_g84806 = ( temp_output_7901_0_g84806 * temp_output_7901_0_g84806 * temp_output_7901_0_g84806 * temp_output_7901_0_g84806 );
				half Terrain_Mask_Projection7875_g84806 = ( temp_output_7895_0_g84806 * _TerrainMode );
				float temp_output_7_0_g84940 = _TerrainBlendMinValue;
				float temp_output_10_0_g84940 = ( _TerrainBlendMaxValue - temp_output_7_0_g84940 );
				half Terrain_Mask7747_g84806 = saturate( ( ( saturate( ( Terrain_Mask_Pixel7898_g84806 + ( Terrain_Mask_Pixel7898_g84806 * Terrain_Mask_Projection7875_g84806 ) ) ) - temp_output_7_0_g84940 ) / ( temp_output_10_0_g84940 + 0.0001 ) ) );
				float3 lerpResult7748_g84806 = lerp( Blend_Albedo_Tinted2808_g84806 , Terrain_Albedo8037_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7792_g84806 = lerpResult7748_g84806;
				#else
				float3 staticSwitch7792_g84806 = Blend_Albedo_Tinted2808_g84806;
				#endif
				half3 Blend_Albedo_Terrain7752_g84806 = staticSwitch7792_g84806;
				float3 temp_output_3_0_g84933 = Blend_Albedo_Terrain7752_g84806;
				float dotResult20_g84933 = dot( temp_output_3_0_g84933 , float3(0.2126,0.7152,0.0722) );
				half Blend_Albedo_Grayscale5939_g84806 = dotResult20_g84933;
				float3 temp_cast_10 = (Blend_Albedo_Grayscale5939_g84806).xxx;
				float temp_output_82_0_g84825 = _LayerColorsValue;
				float temp_output_19_0_g84829 = TVE_ColorsUsage[(int)temp_output_82_0_g84825];
				float4 temp_output_91_19_g84825 = TVE_ColorsCoords;
				float3 vertexToFrag3890_g84806 = IN.ase_texcoord9.xyz;
				float3 WorldPosition3905_g84806 = vertexToFrag3890_g84806;
				float3 vertexToFrag4224_g84806 = IN.ase_texcoord10.xyz;
				float3 ObjectPosition4223_g84806 = vertexToFrag4224_g84806;
				float3 lerpResult4822_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _ColorsPositionMode);
				half2 UV94_g84825 = ( (temp_output_91_19_g84825).zw + ( (temp_output_91_19_g84825).xy * (lerpResult4822_g84806).xz ) );
				float4 tex2DArrayNode83_g84825 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_ColorsTex, sampler_Linear_Clamp, float3(UV94_g84825,temp_output_82_0_g84825), 0.0 );
				float4 temp_output_17_0_g84829 = tex2DArrayNode83_g84825;
				float4 temp_output_92_86_g84825 = TVE_ColorsParams;
				float4 temp_output_3_0_g84829 = temp_output_92_86_g84825;
				float4 ifLocalVar18_g84829 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84829 >= 0.5 )
				ifLocalVar18_g84829 = temp_output_17_0_g84829;
				else
				ifLocalVar18_g84829 = temp_output_3_0_g84829;
				float4 lerpResult22_g84829 = lerp( temp_output_3_0_g84829 , temp_output_17_0_g84829 , temp_output_19_0_g84829);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84829 = lerpResult22_g84829;
				#else
				float4 staticSwitch24_g84829 = ifLocalVar18_g84829;
				#endif
				half4 Global_Colors_Params5434_g84806 = staticSwitch24_g84829;
				float4 temp_output_346_0_g84813 = Global_Colors_Params5434_g84806;
				half Global_Colors_A1701_g84806 = saturate( (temp_output_346_0_g84813).w );
				half Colors_Influence3668_g84806 = Global_Colors_A1701_g84806;
				float temp_output_6306_0_g84806 = ( 1.0 - Colors_Influence3668_g84806 );
				float3 lerpResult3618_g84806 = lerp( Blend_Albedo_Terrain7752_g84806 , temp_cast_10 , ( 1.0 - ( temp_output_6306_0_g84806 * temp_output_6306_0_g84806 ) ));
				half3 Global_Colors_RGB1700_g84806 = (temp_output_346_0_g84813).xyz;
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g84922 = 2.0;
				#else
				float staticSwitch1_g84922 = 4.594794;
				#endif
				half3 Colors_RGB1954_g84806 = ( Global_Colors_RGB1700_g84806 * staticSwitch1_g84922 * _ColorsIntensityValue );
				half4 Weights52_g84950 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84950 = _Specular1;
				half4 Layer237_g84950 = _Specular2;
				half4 Layer338_g84950 = _Specular3;
				half4 Layer439_g84950 = _Specular4;
				float4 weightedBlendVar31_g84950 = Weights52_g84950;
				float4 weightedBlend31_g84950 = ( weightedBlendVar31_g84950.x*Layer133_g84950 + weightedBlendVar31_g84950.y*Layer237_g84950 + weightedBlendVar31_g84950.z*Layer338_g84950 + weightedBlendVar31_g84950.w*Layer439_g84950 );
				half4 Terrain_Specular_047390_g84942 = weightedBlend31_g84950;
				half4 Layer_045_g84957 = Terrain_Specular_047390_g84942;
				half4 Weights52_g84967 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84967 = _Specular5;
				half4 Layer237_g84967 = _Specular6;
				half4 Layer338_g84967 = _Specular7;
				half4 Layer439_g84967 = _Specular8;
				float4 weightedBlendVar31_g84967 = Weights52_g84967;
				float4 weightedBlend31_g84967 = ( weightedBlendVar31_g84967.x*Layer133_g84967 + weightedBlendVar31_g84967.y*Layer237_g84967 + weightedBlendVar31_g84967.z*Layer338_g84967 + weightedBlendVar31_g84967.w*Layer439_g84967 );
				half4 Terrain_Specular_088745_g84942 = weightedBlend31_g84967;
				half4 Layer_0810_g84957 = Terrain_Specular_088745_g84942;
				half4 Weights52_g84977 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84977 = _Specular9;
				half4 Layer237_g84977 = _Specular10;
				half4 Layer338_g84977 = _Specular11;
				half4 Layer439_g84977 = _Specular12;
				float4 weightedBlendVar31_g84977 = Weights52_g84977;
				float4 weightedBlend31_g84977 = ( weightedBlendVar31_g84977.x*Layer133_g84977 + weightedBlendVar31_g84977.y*Layer237_g84977 + weightedBlendVar31_g84977.z*Layer338_g84977 + weightedBlendVar31_g84977.w*Layer439_g84977 );
				half4 Terrain_Specular_128869_g84942 = weightedBlend31_g84977;
				half4 Layer_1243_g84957 = Terrain_Specular_128869_g84942;
				half4 Weights52_g84987 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84987 = _Specular13;
				half4 Layer237_g84987 = _Specular14;
				half4 Layer338_g84987 = _Specular15;
				half4 Layer439_g84987 = _Specular16;
				float4 weightedBlendVar31_g84987 = Weights52_g84987;
				float4 weightedBlend31_g84987 = ( weightedBlendVar31_g84987.x*Layer133_g84987 + weightedBlendVar31_g84987.y*Layer237_g84987 + weightedBlendVar31_g84987.z*Layer338_g84987 + weightedBlendVar31_g84987.w*Layer439_g84987 );
				half4 Terrain_Specular_169019_g84942 = weightedBlend31_g84987;
				half4 Layer_1644_g84957 = Terrain_Specular_169019_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84957 = Layer_045_g84957;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 + Layer_1243_g84957 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84957 = ( Layer_045_g84957 + Layer_0810_g84957 + Layer_1243_g84957 + Layer_1644_g84957 );
				#else
				float4 staticSwitch40_g84957 = Layer_045_g84957;
				#endif
				half4 Blend_Specular7446_g84942 = staticSwitch40_g84957;
				half Terrain_ColorsMask7937_g84806 = ( (Blend_Specular7446_g84942).a * (Blend_Albedo7468_g84942).w );
				float lerpResult7939_g84806 = lerp( Blend_MaskRemap_Detail6621_g84806 , Terrain_ColorsMask7937_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float staticSwitch7922_g84806 = lerpResult7939_g84806;
				#else
				float staticSwitch7922_g84806 = Blend_MaskRemap_Detail6621_g84806;
				#endif
				half Blend_ColorsMask_Terrain7921_g84806 = staticSwitch7922_g84806;
				half Colors_Value3692_g84806 = ( Blend_ColorsMask_Terrain7921_g84806 * _GlobalColors );
				float3 ObjectPosition_Shifted7481_g84806 = ( ObjectPosition4223_g84806 - TVE_WorldOrigin );
				half3 Input_Position167_g84900 = ObjectPosition_Shifted7481_g84806;
				float dotResult156_g84900 = dot( (Input_Position167_g84900).xz , float2( 12.9898,78.233 ) );
				half Vertex_DynamicMode5112_g84806 = _VertexDynamicMode;
				half Input_DynamicMode120_g84900 = Vertex_DynamicMode5112_g84806;
				float Postion_Random162_g84900 = ( sin( dotResult156_g84900 ) * ( 1.0 - Input_DynamicMode120_g84900 ) );
				float Mesh_Variation16_g84806 = IN.ase_color.r;
				half Input_Variation124_g84900 = Mesh_Variation16_g84806;
				half ObjectData20_g84902 = frac( ( Postion_Random162_g84900 + Input_Variation124_g84900 ) );
				half WorldData19_g84902 = Input_Variation124_g84900;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84902 = WorldData19_g84902;
				#else
				float staticSwitch14_g84902 = ObjectData20_g84902;
				#endif
				float temp_output_112_0_g84900 = staticSwitch14_g84902;
				float clampResult171_g84900 = clamp( temp_output_112_0_g84900 , 0.01 , 0.99 );
				float Global_MeshVariation5104_g84806 = clampResult171_g84900;
				float lerpResult3870_g84806 = lerp( 1.0 , Global_MeshVariation5104_g84806 , _ColorsVariationValue);
				half Colors_Variation3650_g84806 = lerpResult3870_g84806;
				half Occlusion_Alpha6463_g84806 = _VertexOcclusionColor.a;
				float lerpResult8028_g84806 = lerp( Occlusion_Mask6432_g84806 , ( 1.0 - Occlusion_Mask6432_g84806 ) , _VertexOcclusionColorsMode);
				float lerpResult8026_g84806 = lerp( Occlusion_Alpha6463_g84806 , 1.0 , lerpResult8028_g84806);
				half Occlusion_Colors6450_g84806 = lerpResult8026_g84806;
				float3 temp_output_3_0_g84934 = ( Blend_Albedo_Terrain7752_g84806 * Tint_Gradient_Color5769_g84806 * Tint_Noise_Color5770_g84806 * Tint_User_Color7335_g84806 );
				float dotResult20_g84934 = dot( temp_output_3_0_g84934 , float3(0.2126,0.7152,0.0722) );
				float clampResult6740_g84806 = clamp( saturate( ( dotResult20_g84934 * 5.0 ) ) , 0.2 , 1.0 );
				half Blend_Albedo_Globals6410_g84806 = clampResult6740_g84806;
				float temp_output_7_0_g84930 = 0.1;
				float temp_output_10_0_g84930 = ( 0.2 - temp_output_7_0_g84930 );
				float lerpResult16_g84923 = lerp( 0.0 , saturate( ( ( ( Colors_Value3692_g84806 * Colors_Influence3668_g84806 * Colors_Variation3650_g84806 * Occlusion_Colors6450_g84806 * Blend_Albedo_Globals6410_g84806 ) - temp_output_7_0_g84930 ) / ( temp_output_10_0_g84930 + 0.0001 ) ) ) , TVE_IsEnabled);
				float3 lerpResult3628_g84806 = lerp( Blend_Albedo_Terrain7752_g84806 , ( lerpResult3618_g84806 * Colors_RGB1954_g84806 ) , lerpResult16_g84923);
				half3 Blend_Albedo_Colored_High6027_g84806 = lerpResult3628_g84806;
				half3 Blend_Albedo_Colored863_g84806 = Blend_Albedo_Colored_High6027_g84806;
				half3 Global_OverlayColor1758_g84806 = (TVE_OverlayColor).rgb;
				float temp_output_84_0_g84820 = _LayerExtrasValue;
				float temp_output_19_0_g84824 = TVE_ExtrasUsage[(int)temp_output_84_0_g84820];
				float4 temp_output_93_19_g84820 = TVE_ExtrasCoords;
				float3 lerpResult4827_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _ExtrasPositionMode);
				half2 UV96_g84820 = ( (temp_output_93_19_g84820).zw + ( (temp_output_93_19_g84820).xy * (lerpResult4827_g84806).xz ) );
				float4 tex2DArrayNode48_g84820 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_ExtrasTex, sampler_Linear_Clamp, float3(UV96_g84820,temp_output_84_0_g84820), 0.0 );
				float4 temp_output_17_0_g84824 = tex2DArrayNode48_g84820;
				float4 temp_output_94_85_g84820 = TVE_ExtrasParams;
				float4 temp_output_3_0_g84824 = temp_output_94_85_g84820;
				float4 ifLocalVar18_g84824 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84824 >= 0.5 )
				ifLocalVar18_g84824 = temp_output_17_0_g84824;
				else
				ifLocalVar18_g84824 = temp_output_3_0_g84824;
				float4 lerpResult22_g84824 = lerp( temp_output_3_0_g84824 , temp_output_17_0_g84824 , temp_output_19_0_g84824);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84824 = lerpResult22_g84824;
				#else
				float4 staticSwitch24_g84824 = ifLocalVar18_g84824;
				#endif
				half4 Global_Extras_Params5440_g84806 = staticSwitch24_g84824;
				float4 break456_g84833 = Global_Extras_Params5440_g84806;
				half Global_Extras_Overlay156_g84806 = break456_g84833.z;
				float lerpResult1065_g84806 = lerp( 1.0 , Global_MeshVariation5104_g84806 , _OverlayVariationValue);
				half Overlay_Variation4560_g84806 = lerpResult1065_g84806;
				half Overlay_Value5738_g84806 = ( _GlobalOverlay * Global_Extras_Overlay156_g84806 * Overlay_Variation4560_g84806 );
				half4 Weights52_g84943 = Terrain_Weights_046781_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84991) = _NormalTex1;
				SamplerState Sampler238_g84991 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84991 = Input_Coords_016785_g84942;
				half4 Coords238_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition238_g84991 = ase_worldPos;
				half4 localSamplePlanar2D238_g84991 = SamplePlanar2D( Texture238_g84991 , Sampler238_g84991 , Coords238_g84991 , WorldPosition238_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84991) = _NormalTex1;
				SamplerState Sampler246_g84991 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition246_g84991 = ase_worldPos;
				half3 WorldNormal246_g84991 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84991 = SamplePlanar3D( Texture246_g84991 , Sampler246_g84991 , Coords246_g84991 , WorldPosition246_g84991 , WorldNormal246_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84991) = _NormalTex1;
				SamplerState Sampler234_g84991 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84991 = temp_output_37_0_g84991;
				float3 WorldPosition234_g84991 = ase_worldPos;
				float4 localSampleStochastic2D234_g84991 = SampleStochastic2D( Texture234_g84991 , Sampler234_g84991 , Coords234_g84991 , WorldPosition234_g84991 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84991) = _NormalTex1;
				SamplerState Sampler263_g84991 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84991 = temp_output_37_0_g84991;
				half3 WorldPosition263_g84991 = ase_worldPos;
				half3 WorldNormal263_g84991 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84991 = SampleStochastic3D( Texture263_g84991 , Sampler263_g84991 , Coords263_g84991 , WorldPosition263_g84991 , WorldNormal263_g84991 );
				#if defined(TVE_SAMPLE_01_PLANAR_2D)
				float4 staticSwitch8635_g84942 = localSamplePlanar2D238_g84991;
				#elif defined(TVE_SAMPLE_01_PLANAR_3D)
				float4 staticSwitch8635_g84942 = localSamplePlanar3D246_g84991;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_2D)
				float4 staticSwitch8635_g84942 = localSampleStochastic2D234_g84991;
				#elif defined(TVE_SAMPLE_01_STOCHASTIC_3D)
				float4 staticSwitch8635_g84942 = localSampleStochastic3D263_g84991;
				#else
				float4 staticSwitch8635_g84942 = localSamplePlanar2D238_g84991;
				#endif
				half4 Layer133_g84943 = staticSwitch8635_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84992) = _NormalTex2;
				SamplerState Sampler238_g84992 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84992 = Input_Coords_026787_g84942;
				half4 Coords238_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition238_g84992 = ase_worldPos;
				half4 localSamplePlanar2D238_g84992 = SamplePlanar2D( Texture238_g84992 , Sampler238_g84992 , Coords238_g84992 , WorldPosition238_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84992) = _NormalTex2;
				SamplerState Sampler246_g84992 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition246_g84992 = ase_worldPos;
				half3 WorldNormal246_g84992 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84992 = SamplePlanar3D( Texture246_g84992 , Sampler246_g84992 , Coords246_g84992 , WorldPosition246_g84992 , WorldNormal246_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84992) = _NormalTex2;
				SamplerState Sampler234_g84992 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84992 = temp_output_37_0_g84992;
				float3 WorldPosition234_g84992 = ase_worldPos;
				float4 localSampleStochastic2D234_g84992 = SampleStochastic2D( Texture234_g84992 , Sampler234_g84992 , Coords234_g84992 , WorldPosition234_g84992 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84992) = _NormalTex2;
				SamplerState Sampler263_g84992 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84992 = temp_output_37_0_g84992;
				half3 WorldPosition263_g84992 = ase_worldPos;
				half3 WorldNormal263_g84992 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84992 = SampleStochastic3D( Texture263_g84992 , Sampler263_g84992 , Coords263_g84992 , WorldPosition263_g84992 , WorldNormal263_g84992 );
				#if defined(TVE_SAMPLE_02_PLANAR_2D)
				float4 staticSwitch8636_g84942 = localSamplePlanar2D238_g84992;
				#elif defined(TVE_SAMPLE_02_PLANAR_3D)
				float4 staticSwitch8636_g84942 = localSamplePlanar3D246_g84992;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_2D)
				float4 staticSwitch8636_g84942 = localSampleStochastic2D234_g84992;
				#elif defined(TVE_SAMPLE_02_STOCHASTIC_3D)
				float4 staticSwitch8636_g84942 = localSampleStochastic3D263_g84992;
				#else
				float4 staticSwitch8636_g84942 = localSamplePlanar2D238_g84992;
				#endif
				half4 Layer237_g84943 = staticSwitch8636_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84993) = _NormalTex3;
				SamplerState Sampler238_g84993 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84993 = Input_Coords_036789_g84942;
				half4 Coords238_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition238_g84993 = ase_worldPos;
				half4 localSamplePlanar2D238_g84993 = SamplePlanar2D( Texture238_g84993 , Sampler238_g84993 , Coords238_g84993 , WorldPosition238_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84993) = _NormalTex3;
				SamplerState Sampler246_g84993 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition246_g84993 = ase_worldPos;
				half3 WorldNormal246_g84993 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84993 = SamplePlanar3D( Texture246_g84993 , Sampler246_g84993 , Coords246_g84993 , WorldPosition246_g84993 , WorldNormal246_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84993) = _NormalTex3;
				SamplerState Sampler234_g84993 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84993 = temp_output_37_0_g84993;
				float3 WorldPosition234_g84993 = ase_worldPos;
				float4 localSampleStochastic2D234_g84993 = SampleStochastic2D( Texture234_g84993 , Sampler234_g84993 , Coords234_g84993 , WorldPosition234_g84993 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84993) = _NormalTex3;
				SamplerState Sampler263_g84993 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84993 = temp_output_37_0_g84993;
				half3 WorldPosition263_g84993 = ase_worldPos;
				half3 WorldNormal263_g84993 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84993 = SampleStochastic3D( Texture263_g84993 , Sampler263_g84993 , Coords263_g84993 , WorldPosition263_g84993 , WorldNormal263_g84993 );
				#if defined(TVE_SAMPLE_03_PLANAR_2D)
				float4 staticSwitch8637_g84942 = localSamplePlanar2D238_g84993;
				#elif defined(TVE_SAMPLE_03_PLANAR_3D)
				float4 staticSwitch8637_g84942 = localSamplePlanar3D246_g84993;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_2D)
				float4 staticSwitch8637_g84942 = localSampleStochastic2D234_g84993;
				#elif defined(TVE_SAMPLE_03_STOCHASTIC_3D)
				float4 staticSwitch8637_g84942 = localSampleStochastic3D263_g84993;
				#else
				float4 staticSwitch8637_g84942 = localSamplePlanar2D238_g84993;
				#endif
				half4 Layer338_g84943 = staticSwitch8637_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g84994) = _NormalTex4;
				SamplerState Sampler238_g84994 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g84994 = Input_Coords_046791_g84942;
				half4 Coords238_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition238_g84994 = ase_worldPos;
				half4 localSamplePlanar2D238_g84994 = SamplePlanar2D( Texture238_g84994 , Sampler238_g84994 , Coords238_g84994 , WorldPosition238_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g84994) = _NormalTex4;
				SamplerState Sampler246_g84994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition246_g84994 = ase_worldPos;
				half3 WorldNormal246_g84994 = ase_worldNormal;
				half4 localSamplePlanar3D246_g84994 = SamplePlanar3D( Texture246_g84994 , Sampler246_g84994 , Coords246_g84994 , WorldPosition246_g84994 , WorldNormal246_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g84994) = _NormalTex4;
				SamplerState Sampler234_g84994 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g84994 = temp_output_37_0_g84994;
				float3 WorldPosition234_g84994 = ase_worldPos;
				float4 localSampleStochastic2D234_g84994 = SampleStochastic2D( Texture234_g84994 , Sampler234_g84994 , Coords234_g84994 , WorldPosition234_g84994 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g84994) = _NormalTex4;
				SamplerState Sampler263_g84994 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g84994 = temp_output_37_0_g84994;
				half3 WorldPosition263_g84994 = ase_worldPos;
				half3 WorldNormal263_g84994 = ase_worldNormal;
				half4 localSampleStochastic3D263_g84994 = SampleStochastic3D( Texture263_g84994 , Sampler263_g84994 , Coords263_g84994 , WorldPosition263_g84994 , WorldNormal263_g84994 );
				#if defined(TVE_SAMPLE_04_PLANAR_2D)
				float4 staticSwitch8638_g84942 = localSamplePlanar2D238_g84994;
				#elif defined(TVE_SAMPLE_04_PLANAR_3D)
				float4 staticSwitch8638_g84942 = localSamplePlanar3D246_g84994;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_2D)
				float4 staticSwitch8638_g84942 = localSampleStochastic2D234_g84994;
				#elif defined(TVE_SAMPLE_04_STOCHASTIC_3D)
				float4 staticSwitch8638_g84942 = localSampleStochastic3D263_g84994;
				#else
				float4 staticSwitch8638_g84942 = localSamplePlanar2D238_g84994;
				#endif
				half4 Layer439_g84943 = staticSwitch8638_g84942;
				float4 weightedBlendVar31_g84943 = Weights52_g84943;
				float4 weightedBlend31_g84943 = ( weightedBlendVar31_g84943.x*Layer133_g84943 + weightedBlendVar31_g84943.y*Layer237_g84943 + weightedBlendVar31_g84943.z*Layer338_g84943 + weightedBlendVar31_g84943.w*Layer439_g84943 );
				half4 Terrain_Normal_047202_g84942 = weightedBlend31_g84943;
				half4 Layer_045_g84953 = Terrain_Normal_047202_g84942;
				half4 Weights52_g84959 = Terrain_Weights_087340_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85003) = _NormalTex5;
				SamplerState Sampler238_g85003 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85003 = Input_Coords_058750_g84942;
				half4 Coords238_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition238_g85003 = ase_worldPos;
				half4 localSamplePlanar2D238_g85003 = SamplePlanar2D( Texture238_g85003 , Sampler238_g85003 , Coords238_g85003 , WorldPosition238_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85003) = _NormalTex5;
				SamplerState Sampler246_g85003 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition246_g85003 = ase_worldPos;
				half3 WorldNormal246_g85003 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85003 = SamplePlanar3D( Texture246_g85003 , Sampler246_g85003 , Coords246_g85003 , WorldPosition246_g85003 , WorldNormal246_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85003) = _NormalTex5;
				SamplerState Sampler234_g85003 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85003 = temp_output_37_0_g85003;
				float3 WorldPosition234_g85003 = ase_worldPos;
				float4 localSampleStochastic2D234_g85003 = SampleStochastic2D( Texture234_g85003 , Sampler234_g85003 , Coords234_g85003 , WorldPosition234_g85003 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85003) = _NormalTex5;
				SamplerState Sampler263_g85003 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85003 = temp_output_37_0_g85003;
				half3 WorldPosition263_g85003 = ase_worldPos;
				half3 WorldNormal263_g85003 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85003 = SampleStochastic3D( Texture263_g85003 , Sampler263_g85003 , Coords263_g85003 , WorldPosition263_g85003 , WorldNormal263_g85003 );
				#if defined(TVE_SAMPLE_05_PLANAR_2D)
				float4 staticSwitch8686_g84942 = localSamplePlanar2D238_g85003;
				#elif defined(TVE_SAMPLE_05_PLANAR_3D)
				float4 staticSwitch8686_g84942 = localSamplePlanar3D246_g85003;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_2D)
				float4 staticSwitch8686_g84942 = localSampleStochastic2D234_g85003;
				#elif defined(TVE_SAMPLE_05_STOCHASTIC_3D)
				float4 staticSwitch8686_g84942 = localSampleStochastic3D263_g85003;
				#else
				float4 staticSwitch8686_g84942 = localSamplePlanar2D238_g85003;
				#endif
				half4 Layer133_g84959 = staticSwitch8686_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85004) = _NormalTex6;
				SamplerState Sampler238_g85004 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85004 = Input_Coords_068751_g84942;
				half4 Coords238_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition238_g85004 = ase_worldPos;
				half4 localSamplePlanar2D238_g85004 = SamplePlanar2D( Texture238_g85004 , Sampler238_g85004 , Coords238_g85004 , WorldPosition238_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85004) = _NormalTex6;
				SamplerState Sampler246_g85004 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition246_g85004 = ase_worldPos;
				half3 WorldNormal246_g85004 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85004 = SamplePlanar3D( Texture246_g85004 , Sampler246_g85004 , Coords246_g85004 , WorldPosition246_g85004 , WorldNormal246_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85004) = _NormalTex6;
				SamplerState Sampler234_g85004 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85004 = temp_output_37_0_g85004;
				float3 WorldPosition234_g85004 = ase_worldPos;
				float4 localSampleStochastic2D234_g85004 = SampleStochastic2D( Texture234_g85004 , Sampler234_g85004 , Coords234_g85004 , WorldPosition234_g85004 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85004) = _NormalTex6;
				SamplerState Sampler263_g85004 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85004 = temp_output_37_0_g85004;
				half3 WorldPosition263_g85004 = ase_worldPos;
				half3 WorldNormal263_g85004 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85004 = SampleStochastic3D( Texture263_g85004 , Sampler263_g85004 , Coords263_g85004 , WorldPosition263_g85004 , WorldNormal263_g85004 );
				#if defined(TVE_SAMPLE_06_PLANAR_2D)
				float4 staticSwitch8687_g84942 = localSamplePlanar2D238_g85004;
				#elif defined(TVE_SAMPLE_06_PLANAR_3D)
				float4 staticSwitch8687_g84942 = localSamplePlanar3D246_g85004;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_2D)
				float4 staticSwitch8687_g84942 = localSampleStochastic2D234_g85004;
				#elif defined(TVE_SAMPLE_06_STOCHASTIC_3D)
				float4 staticSwitch8687_g84942 = localSampleStochastic3D263_g85004;
				#else
				float4 staticSwitch8687_g84942 = localSamplePlanar2D238_g85004;
				#endif
				half4 Layer237_g84959 = staticSwitch8687_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85005) = _NormalTex7;
				SamplerState Sampler238_g85005 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85005 = Input_Coords_078752_g84942;
				half4 Coords238_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition238_g85005 = ase_worldPos;
				half4 localSamplePlanar2D238_g85005 = SamplePlanar2D( Texture238_g85005 , Sampler238_g85005 , Coords238_g85005 , WorldPosition238_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85005) = _NormalTex7;
				SamplerState Sampler246_g85005 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition246_g85005 = ase_worldPos;
				half3 WorldNormal246_g85005 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85005 = SamplePlanar3D( Texture246_g85005 , Sampler246_g85005 , Coords246_g85005 , WorldPosition246_g85005 , WorldNormal246_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85005) = _NormalTex7;
				SamplerState Sampler234_g85005 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85005 = temp_output_37_0_g85005;
				float3 WorldPosition234_g85005 = ase_worldPos;
				float4 localSampleStochastic2D234_g85005 = SampleStochastic2D( Texture234_g85005 , Sampler234_g85005 , Coords234_g85005 , WorldPosition234_g85005 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85005) = _NormalTex7;
				SamplerState Sampler263_g85005 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85005 = temp_output_37_0_g85005;
				half3 WorldPosition263_g85005 = ase_worldPos;
				half3 WorldNormal263_g85005 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85005 = SampleStochastic3D( Texture263_g85005 , Sampler263_g85005 , Coords263_g85005 , WorldPosition263_g85005 , WorldNormal263_g85005 );
				#if defined(TVE_SAMPLE_07_PLANAR_2D)
				float4 staticSwitch8688_g84942 = localSamplePlanar2D238_g85005;
				#elif defined(TVE_SAMPLE_07_PLANAR_3D)
				float4 staticSwitch8688_g84942 = localSamplePlanar3D246_g85005;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_2D)
				float4 staticSwitch8688_g84942 = localSampleStochastic2D234_g85005;
				#elif defined(TVE_SAMPLE_07_STOCHASTIC_3D)
				float4 staticSwitch8688_g84942 = localSampleStochastic3D263_g85005;
				#else
				float4 staticSwitch8688_g84942 = localSamplePlanar2D238_g85005;
				#endif
				half4 Layer338_g84959 = staticSwitch8688_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85006) = _NormalTex8;
				SamplerState Sampler238_g85006 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85006 = Input_Coords_088749_g84942;
				half4 Coords238_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition238_g85006 = ase_worldPos;
				half4 localSamplePlanar2D238_g85006 = SamplePlanar2D( Texture238_g85006 , Sampler238_g85006 , Coords238_g85006 , WorldPosition238_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85006) = _NormalTex8;
				SamplerState Sampler246_g85006 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition246_g85006 = ase_worldPos;
				half3 WorldNormal246_g85006 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85006 = SamplePlanar3D( Texture246_g85006 , Sampler246_g85006 , Coords246_g85006 , WorldPosition246_g85006 , WorldNormal246_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85006) = _NormalTex8;
				SamplerState Sampler234_g85006 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85006 = temp_output_37_0_g85006;
				float3 WorldPosition234_g85006 = ase_worldPos;
				float4 localSampleStochastic2D234_g85006 = SampleStochastic2D( Texture234_g85006 , Sampler234_g85006 , Coords234_g85006 , WorldPosition234_g85006 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85006) = _NormalTex8;
				SamplerState Sampler263_g85006 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85006 = temp_output_37_0_g85006;
				half3 WorldPosition263_g85006 = ase_worldPos;
				half3 WorldNormal263_g85006 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85006 = SampleStochastic3D( Texture263_g85006 , Sampler263_g85006 , Coords263_g85006 , WorldPosition263_g85006 , WorldNormal263_g85006 );
				#if defined(TVE_SAMPLE_08_PLANAR_2D)
				float4 staticSwitch8689_g84942 = localSamplePlanar2D238_g85006;
				#elif defined(TVE_SAMPLE_08_PLANAR_3D)
				float4 staticSwitch8689_g84942 = localSamplePlanar3D246_g85006;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_2D)
				float4 staticSwitch8689_g84942 = localSampleStochastic2D234_g85006;
				#elif defined(TVE_SAMPLE_08_STOCHASTIC_3D)
				float4 staticSwitch8689_g84942 = localSampleStochastic3D263_g85006;
				#else
				float4 staticSwitch8689_g84942 = localSamplePlanar2D238_g85006;
				#endif
				half4 Layer439_g84959 = staticSwitch8689_g84942;
				float4 weightedBlendVar31_g84959 = Weights52_g84959;
				float4 weightedBlend31_g84959 = ( weightedBlendVar31_g84959.x*Layer133_g84959 + weightedBlendVar31_g84959.y*Layer237_g84959 + weightedBlendVar31_g84959.z*Layer338_g84959 + weightedBlendVar31_g84959.w*Layer439_g84959 );
				half4 Terrain_Normal_088684_g84942 = weightedBlend31_g84959;
				half4 Layer_0810_g84953 = Terrain_Normal_088684_g84942;
				half4 Weights52_g84969 = Terrain_Weights_127710_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85015) = _NormalTex9;
				SamplerState Sampler238_g85015 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85015 = Input_Coords_098833_g84942;
				half4 Coords238_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition238_g85015 = ase_worldPos;
				half4 localSamplePlanar2D238_g85015 = SamplePlanar2D( Texture238_g85015 , Sampler238_g85015 , Coords238_g85015 , WorldPosition238_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85015) = _NormalTex9;
				SamplerState Sampler246_g85015 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition246_g85015 = ase_worldPos;
				half3 WorldNormal246_g85015 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85015 = SamplePlanar3D( Texture246_g85015 , Sampler246_g85015 , Coords246_g85015 , WorldPosition246_g85015 , WorldNormal246_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85015) = _NormalTex9;
				SamplerState Sampler234_g85015 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85015 = temp_output_37_0_g85015;
				float3 WorldPosition234_g85015 = ase_worldPos;
				float4 localSampleStochastic2D234_g85015 = SampleStochastic2D( Texture234_g85015 , Sampler234_g85015 , Coords234_g85015 , WorldPosition234_g85015 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85015) = _NormalTex9;
				SamplerState Sampler263_g85015 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85015 = temp_output_37_0_g85015;
				half3 WorldPosition263_g85015 = ase_worldPos;
				half3 WorldNormal263_g85015 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85015 = SampleStochastic3D( Texture263_g85015 , Sampler263_g85015 , Coords263_g85015 , WorldPosition263_g85015 , WorldNormal263_g85015 );
				#if defined(TVE_SAMPLE_09_PLANAR_2D)
				float4 staticSwitch8849_g84942 = localSamplePlanar2D238_g85015;
				#elif defined(TVE_SAMPLE_09_PLANAR_3D)
				float4 staticSwitch8849_g84942 = localSamplePlanar3D246_g85015;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_2D)
				float4 staticSwitch8849_g84942 = localSampleStochastic2D234_g85015;
				#elif defined(TVE_SAMPLE_09_STOCHASTIC_3D)
				float4 staticSwitch8849_g84942 = localSampleStochastic3D263_g85015;
				#else
				float4 staticSwitch8849_g84942 = localSamplePlanar2D238_g85015;
				#endif
				half4 Layer133_g84969 = staticSwitch8849_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85016) = _NormalTex10;
				SamplerState Sampler238_g85016 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85016 = Input_Coords_108834_g84942;
				half4 Coords238_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition238_g85016 = ase_worldPos;
				half4 localSamplePlanar2D238_g85016 = SamplePlanar2D( Texture238_g85016 , Sampler238_g85016 , Coords238_g85016 , WorldPosition238_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85016) = _NormalTex10;
				SamplerState Sampler246_g85016 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition246_g85016 = ase_worldPos;
				half3 WorldNormal246_g85016 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85016 = SamplePlanar3D( Texture246_g85016 , Sampler246_g85016 , Coords246_g85016 , WorldPosition246_g85016 , WorldNormal246_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85016) = _NormalTex10;
				SamplerState Sampler234_g85016 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85016 = temp_output_37_0_g85016;
				float3 WorldPosition234_g85016 = ase_worldPos;
				float4 localSampleStochastic2D234_g85016 = SampleStochastic2D( Texture234_g85016 , Sampler234_g85016 , Coords234_g85016 , WorldPosition234_g85016 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85016) = _NormalTex10;
				SamplerState Sampler263_g85016 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85016 = temp_output_37_0_g85016;
				half3 WorldPosition263_g85016 = ase_worldPos;
				half3 WorldNormal263_g85016 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85016 = SampleStochastic3D( Texture263_g85016 , Sampler263_g85016 , Coords263_g85016 , WorldPosition263_g85016 , WorldNormal263_g85016 );
				#if defined(TVE_SAMPLE_10_PLANAR_2D)
				float4 staticSwitch8876_g84942 = localSamplePlanar2D238_g85016;
				#elif defined(TVE_SAMPLE_10_PLANAR_3D)
				float4 staticSwitch8876_g84942 = localSamplePlanar3D246_g85016;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_2D)
				float4 staticSwitch8876_g84942 = localSampleStochastic2D234_g85016;
				#elif defined(TVE_SAMPLE_10_STOCHASTIC_3D)
				float4 staticSwitch8876_g84942 = localSampleStochastic3D263_g85016;
				#else
				float4 staticSwitch8876_g84942 = localSamplePlanar2D238_g85016;
				#endif
				half4 Layer237_g84969 = staticSwitch8876_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85017) = _NormalTex11;
				SamplerState Sampler238_g85017 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85017 = Input_Coords_118835_g84942;
				half4 Coords238_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition238_g85017 = ase_worldPos;
				half4 localSamplePlanar2D238_g85017 = SamplePlanar2D( Texture238_g85017 , Sampler238_g85017 , Coords238_g85017 , WorldPosition238_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85017) = _NormalTex11;
				SamplerState Sampler246_g85017 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition246_g85017 = ase_worldPos;
				half3 WorldNormal246_g85017 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85017 = SamplePlanar3D( Texture246_g85017 , Sampler246_g85017 , Coords246_g85017 , WorldPosition246_g85017 , WorldNormal246_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85017) = _NormalTex11;
				SamplerState Sampler234_g85017 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85017 = temp_output_37_0_g85017;
				float3 WorldPosition234_g85017 = ase_worldPos;
				float4 localSampleStochastic2D234_g85017 = SampleStochastic2D( Texture234_g85017 , Sampler234_g85017 , Coords234_g85017 , WorldPosition234_g85017 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85017) = _NormalTex11;
				SamplerState Sampler263_g85017 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85017 = temp_output_37_0_g85017;
				half3 WorldPosition263_g85017 = ase_worldPos;
				half3 WorldNormal263_g85017 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85017 = SampleStochastic3D( Texture263_g85017 , Sampler263_g85017 , Coords263_g85017 , WorldPosition263_g85017 , WorldNormal263_g85017 );
				#if defined(TVE_SAMPLE_11_PLANAR_2D)
				float4 staticSwitch8850_g84942 = localSamplePlanar2D238_g85017;
				#elif defined(TVE_SAMPLE_11_PLANAR_3D)
				float4 staticSwitch8850_g84942 = localSamplePlanar3D246_g85017;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_2D)
				float4 staticSwitch8850_g84942 = localSampleStochastic2D234_g85017;
				#elif defined(TVE_SAMPLE_11_STOCHASTIC_3D)
				float4 staticSwitch8850_g84942 = localSampleStochastic3D263_g85017;
				#else
				float4 staticSwitch8850_g84942 = localSamplePlanar2D238_g85017;
				#endif
				half4 Layer338_g84969 = staticSwitch8850_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85018) = _NormalTex12;
				SamplerState Sampler238_g85018 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85018 = Input_Coords_128836_g84942;
				half4 Coords238_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition238_g85018 = ase_worldPos;
				half4 localSamplePlanar2D238_g85018 = SamplePlanar2D( Texture238_g85018 , Sampler238_g85018 , Coords238_g85018 , WorldPosition238_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85018) = _NormalTex12;
				SamplerState Sampler246_g85018 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition246_g85018 = ase_worldPos;
				half3 WorldNormal246_g85018 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85018 = SamplePlanar3D( Texture246_g85018 , Sampler246_g85018 , Coords246_g85018 , WorldPosition246_g85018 , WorldNormal246_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85018) = _NormalTex12;
				SamplerState Sampler234_g85018 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85018 = temp_output_37_0_g85018;
				float3 WorldPosition234_g85018 = ase_worldPos;
				float4 localSampleStochastic2D234_g85018 = SampleStochastic2D( Texture234_g85018 , Sampler234_g85018 , Coords234_g85018 , WorldPosition234_g85018 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85018) = _NormalTex12;
				SamplerState Sampler263_g85018 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85018 = temp_output_37_0_g85018;
				half3 WorldPosition263_g85018 = ase_worldPos;
				half3 WorldNormal263_g85018 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85018 = SampleStochastic3D( Texture263_g85018 , Sampler263_g85018 , Coords263_g85018 , WorldPosition263_g85018 , WorldNormal263_g85018 );
				#if defined(TVE_SAMPLE_12_PLANAR_2D)
				float4 staticSwitch8877_g84942 = localSamplePlanar2D238_g85018;
				#elif defined(TVE_SAMPLE_12_PLANAR_3D)
				float4 staticSwitch8877_g84942 = localSamplePlanar3D246_g85018;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_2D)
				float4 staticSwitch8877_g84942 = localSampleStochastic2D234_g85018;
				#elif defined(TVE_SAMPLE_12_STOCHASTIC_3D)
				float4 staticSwitch8877_g84942 = localSampleStochastic3D263_g85018;
				#else
				float4 staticSwitch8877_g84942 = localSamplePlanar2D238_g85018;
				#endif
				half4 Layer439_g84969 = staticSwitch8877_g84942;
				float4 weightedBlendVar31_g84969 = Weights52_g84969;
				float4 weightedBlend31_g84969 = ( weightedBlendVar31_g84969.x*Layer133_g84969 + weightedBlendVar31_g84969.y*Layer237_g84969 + weightedBlendVar31_g84969.z*Layer338_g84969 + weightedBlendVar31_g84969.w*Layer439_g84969 );
				half4 Terrain_Normal_128865_g84942 = weightedBlend31_g84969;
				half4 Layer_1243_g84953 = Terrain_Normal_128865_g84942;
				half4 Weights52_g84979 = Terrain_Weights_167709_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85034) = _NormalTex13;
				SamplerState Sampler238_g85034 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85034 = Input_Coords_138960_g84942;
				half4 Coords238_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition238_g85034 = ase_worldPos;
				half4 localSamplePlanar2D238_g85034 = SamplePlanar2D( Texture238_g85034 , Sampler238_g85034 , Coords238_g85034 , WorldPosition238_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85034) = _NormalTex13;
				SamplerState Sampler246_g85034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition246_g85034 = ase_worldPos;
				half3 WorldNormal246_g85034 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85034 = SamplePlanar3D( Texture246_g85034 , Sampler246_g85034 , Coords246_g85034 , WorldPosition246_g85034 , WorldNormal246_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85034) = _NormalTex13;
				SamplerState Sampler234_g85034 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85034 = temp_output_37_0_g85034;
				float3 WorldPosition234_g85034 = ase_worldPos;
				float4 localSampleStochastic2D234_g85034 = SampleStochastic2D( Texture234_g85034 , Sampler234_g85034 , Coords234_g85034 , WorldPosition234_g85034 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85034) = _NormalTex13;
				SamplerState Sampler263_g85034 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85034 = temp_output_37_0_g85034;
				half3 WorldPosition263_g85034 = ase_worldPos;
				half3 WorldNormal263_g85034 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85034 = SampleStochastic3D( Texture263_g85034 , Sampler263_g85034 , Coords263_g85034 , WorldPosition263_g85034 , WorldNormal263_g85034 );
				#if defined(TVE_SAMPLE_13_PLANAR_2D)
				float4 staticSwitch8991_g84942 = localSamplePlanar2D238_g85034;
				#elif defined(TVE_SAMPLE_13_PLANAR_3D)
				float4 staticSwitch8991_g84942 = localSamplePlanar3D246_g85034;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_2D)
				float4 staticSwitch8991_g84942 = localSampleStochastic2D234_g85034;
				#elif defined(TVE_SAMPLE_13_STOCHASTIC_3D)
				float4 staticSwitch8991_g84942 = localSampleStochastic3D263_g85034;
				#else
				float4 staticSwitch8991_g84942 = localSamplePlanar2D238_g85034;
				#endif
				half4 Layer133_g84979 = staticSwitch8991_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85027) = _NormalTex14;
				SamplerState Sampler238_g85027 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85027 = Input_Coords_148961_g84942;
				half4 Coords238_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition238_g85027 = ase_worldPos;
				half4 localSamplePlanar2D238_g85027 = SamplePlanar2D( Texture238_g85027 , Sampler238_g85027 , Coords238_g85027 , WorldPosition238_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85027) = _NormalTex14;
				SamplerState Sampler246_g85027 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition246_g85027 = ase_worldPos;
				half3 WorldNormal246_g85027 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85027 = SamplePlanar3D( Texture246_g85027 , Sampler246_g85027 , Coords246_g85027 , WorldPosition246_g85027 , WorldNormal246_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85027) = _NormalTex14;
				SamplerState Sampler234_g85027 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85027 = temp_output_37_0_g85027;
				float3 WorldPosition234_g85027 = ase_worldPos;
				float4 localSampleStochastic2D234_g85027 = SampleStochastic2D( Texture234_g85027 , Sampler234_g85027 , Coords234_g85027 , WorldPosition234_g85027 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85027) = _NormalTex14;
				SamplerState Sampler263_g85027 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85027 = temp_output_37_0_g85027;
				half3 WorldPosition263_g85027 = ase_worldPos;
				half3 WorldNormal263_g85027 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85027 = SampleStochastic3D( Texture263_g85027 , Sampler263_g85027 , Coords263_g85027 , WorldPosition263_g85027 , WorldNormal263_g85027 );
				#if defined(TVE_SAMPLE_14_PLANAR_2D)
				float4 staticSwitch8990_g84942 = localSamplePlanar2D238_g85027;
				#elif defined(TVE_SAMPLE_14_PLANAR_3D)
				float4 staticSwitch8990_g84942 = localSamplePlanar3D246_g85027;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_2D)
				float4 staticSwitch8990_g84942 = localSampleStochastic2D234_g85027;
				#elif defined(TVE_SAMPLE_14_STOCHASTIC_3D)
				float4 staticSwitch8990_g84942 = localSampleStochastic3D263_g85027;
				#else
				float4 staticSwitch8990_g84942 = localSamplePlanar2D238_g85027;
				#endif
				half4 Layer237_g84979 = staticSwitch8990_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85028) = _NormalTex15;
				SamplerState Sampler238_g85028 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85028 = Input_Coords_158962_g84942;
				half4 Coords238_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition238_g85028 = ase_worldPos;
				half4 localSamplePlanar2D238_g85028 = SamplePlanar2D( Texture238_g85028 , Sampler238_g85028 , Coords238_g85028 , WorldPosition238_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85028) = _NormalTex15;
				SamplerState Sampler246_g85028 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition246_g85028 = ase_worldPos;
				half3 WorldNormal246_g85028 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85028 = SamplePlanar3D( Texture246_g85028 , Sampler246_g85028 , Coords246_g85028 , WorldPosition246_g85028 , WorldNormal246_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85028) = _NormalTex15;
				SamplerState Sampler234_g85028 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85028 = temp_output_37_0_g85028;
				float3 WorldPosition234_g85028 = ase_worldPos;
				float4 localSampleStochastic2D234_g85028 = SampleStochastic2D( Texture234_g85028 , Sampler234_g85028 , Coords234_g85028 , WorldPosition234_g85028 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85028) = _NormalTex15;
				SamplerState Sampler263_g85028 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85028 = temp_output_37_0_g85028;
				half3 WorldPosition263_g85028 = ase_worldPos;
				half3 WorldNormal263_g85028 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85028 = SampleStochastic3D( Texture263_g85028 , Sampler263_g85028 , Coords263_g85028 , WorldPosition263_g85028 , WorldNormal263_g85028 );
				#if defined(TVE_SAMPLE_15_PLANAR_2D)
				float4 staticSwitch8989_g84942 = localSamplePlanar2D238_g85028;
				#elif defined(TVE_SAMPLE_15_PLANAR_3D)
				float4 staticSwitch8989_g84942 = localSamplePlanar3D246_g85028;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_2D)
				float4 staticSwitch8989_g84942 = localSampleStochastic2D234_g85028;
				#elif defined(TVE_SAMPLE_15_STOCHASTIC_3D)
				float4 staticSwitch8989_g84942 = localSampleStochastic3D263_g85028;
				#else
				float4 staticSwitch8989_g84942 = localSamplePlanar2D238_g85028;
				#endif
				half4 Layer338_g84979 = staticSwitch8989_g84942;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g85029) = _NormalTex16;
				SamplerState Sampler238_g85029 = sampler_Linear_Repeat_Aniso8;
				float4 temp_output_37_0_g85029 = Input_Coords_168959_g84942;
				half4 Coords238_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition238_g85029 = ase_worldPos;
				half4 localSamplePlanar2D238_g85029 = SamplePlanar2D( Texture238_g85029 , Sampler238_g85029 , Coords238_g85029 , WorldPosition238_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g85029) = _NormalTex16;
				SamplerState Sampler246_g85029 = sampler_Linear_Repeat_Aniso8;
				half4 Coords246_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition246_g85029 = ase_worldPos;
				half3 WorldNormal246_g85029 = ase_worldNormal;
				half4 localSamplePlanar3D246_g85029 = SamplePlanar3D( Texture246_g85029 , Sampler246_g85029 , Coords246_g85029 , WorldPosition246_g85029 , WorldNormal246_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g85029) = _NormalTex16;
				SamplerState Sampler234_g85029 = sampler_Linear_Repeat_Aniso8;
				float4 Coords234_g85029 = temp_output_37_0_g85029;
				float3 WorldPosition234_g85029 = ase_worldPos;
				float4 localSampleStochastic2D234_g85029 = SampleStochastic2D( Texture234_g85029 , Sampler234_g85029 , Coords234_g85029 , WorldPosition234_g85029 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g85029) = _NormalTex16;
				SamplerState Sampler263_g85029 = sampler_Linear_Repeat_Aniso8;
				half4 Coords263_g85029 = temp_output_37_0_g85029;
				half3 WorldPosition263_g85029 = ase_worldPos;
				half3 WorldNormal263_g85029 = ase_worldNormal;
				half4 localSampleStochastic3D263_g85029 = SampleStochastic3D( Texture263_g85029 , Sampler263_g85029 , Coords263_g85029 , WorldPosition263_g85029 , WorldNormal263_g85029 );
				#if defined(TVE_SAMPLE_16_PLANAR_2D)
				float4 staticSwitch8988_g84942 = localSamplePlanar2D238_g85029;
				#elif defined(TVE_SAMPLE_16_PLANAR_3D)
				float4 staticSwitch8988_g84942 = localSamplePlanar3D246_g85029;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_2D)
				float4 staticSwitch8988_g84942 = localSampleStochastic2D234_g85029;
				#elif defined(TVE_SAMPLE_16_STOCHASTIC_3D)
				float4 staticSwitch8988_g84942 = localSampleStochastic3D263_g85029;
				#else
				float4 staticSwitch8988_g84942 = localSamplePlanar2D238_g85029;
				#endif
				half4 Layer439_g84979 = staticSwitch8988_g84942;
				float4 weightedBlendVar31_g84979 = Weights52_g84979;
				float4 weightedBlend31_g84979 = ( weightedBlendVar31_g84979.x*Layer133_g84979 + weightedBlendVar31_g84979.y*Layer237_g84979 + weightedBlendVar31_g84979.z*Layer338_g84979 + weightedBlendVar31_g84979.w*Layer439_g84979 );
				half4 Terrain_Normal_168987_g84942 = weightedBlend31_g84979;
				half4 Layer_1644_g84953 = Terrain_Normal_168987_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84953 = Layer_045_g84953;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 + Layer_1243_g84953 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84953 = ( Layer_045_g84953 + Layer_0810_g84953 + Layer_1243_g84953 + Layer_1644_g84953 );
				#else
				float4 staticSwitch40_g84953 = Layer_045_g84953;
				#endif
				half4 Blend_Normal7512_g84942 = staticSwitch40_g84953;
				half4 Normal_Packed45_g85037 = Blend_Normal7512_g84942;
				float2 appendResult58_g85037 = (float2(( (Normal_Packed45_g85037).x * (Normal_Packed45_g85037).w ) , (Normal_Packed45_g85037).y));
				half2 Normal_Default50_g85037 = appendResult58_g85037;
				half2 Normal_ASTC41_g85037 = (Normal_Packed45_g85037).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g85037 = Normal_ASTC41_g85037;
				#else
				float2 staticSwitch38_g85037 = Normal_Default50_g85037;
				#endif
				half2 Normal_NO_DTX544_g85037 = (Normal_Packed45_g85037).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g85037 = Normal_NO_DTX544_g85037;
				#else
				float2 staticSwitch37_g85037 = staticSwitch38_g85037;
				#endif
				half4 Weights52_g84945 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84945 = temp_output_6970_0_g84942;
				half4 Layer237_g84945 = temp_output_6977_0_g84942;
				half4 Layer338_g84945 = temp_output_6978_0_g84942;
				half4 Layer439_g84945 = temp_output_6983_0_g84942;
				float4 weightedBlendVar31_g84945 = Weights52_g84945;
				float4 weightedBlend31_g84945 = ( weightedBlendVar31_g84945.x*Layer133_g84945 + weightedBlendVar31_g84945.y*Layer237_g84945 + weightedBlendVar31_g84945.z*Layer338_g84945 + weightedBlendVar31_g84945.w*Layer439_g84945 );
				half4 Terrain_Masks_047203_g84942 = weightedBlend31_g84945;
				half4 Layer_045_g84955 = Terrain_Masks_047203_g84942;
				half4 Weights52_g84962 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84962 = temp_output_8714_0_g84942;
				half4 Layer237_g84962 = temp_output_8721_0_g84942;
				half4 Layer338_g84962 = temp_output_8724_0_g84942;
				half4 Layer439_g84962 = temp_output_8727_0_g84942;
				float4 weightedBlendVar31_g84962 = Weights52_g84962;
				float4 weightedBlend31_g84962 = ( weightedBlendVar31_g84962.x*Layer133_g84962 + weightedBlendVar31_g84962.y*Layer237_g84962 + weightedBlendVar31_g84962.z*Layer338_g84962 + weightedBlendVar31_g84962.w*Layer439_g84962 );
				half4 Terrain_Masks_088730_g84942 = weightedBlend31_g84962;
				half4 Layer_0810_g84955 = Terrain_Masks_088730_g84942;
				half4 Weights52_g84972 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84972 = temp_output_8815_0_g84942;
				half4 Layer237_g84972 = temp_output_8818_0_g84942;
				half4 Layer338_g84972 = temp_output_8819_0_g84942;
				half4 Layer439_g84972 = temp_output_8820_0_g84942;
				float4 weightedBlendVar31_g84972 = Weights52_g84972;
				float4 weightedBlend31_g84972 = ( weightedBlendVar31_g84972.x*Layer133_g84972 + weightedBlendVar31_g84972.y*Layer237_g84972 + weightedBlendVar31_g84972.z*Layer338_g84972 + weightedBlendVar31_g84972.w*Layer439_g84972 );
				half4 Terrain_Masks_128871_g84942 = weightedBlend31_g84972;
				half4 Layer_1243_g84955 = Terrain_Masks_128871_g84942;
				half4 Weights52_g84982 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84982 = temp_output_8931_0_g84942;
				half4 Layer237_g84982 = temp_output_8934_0_g84942;
				half4 Layer338_g84982 = temp_output_8935_0_g84942;
				half4 Layer439_g84982 = temp_output_8936_0_g84942;
				float4 weightedBlendVar31_g84982 = Weights52_g84982;
				float4 weightedBlend31_g84982 = ( weightedBlendVar31_g84982.x*Layer133_g84982 + weightedBlendVar31_g84982.y*Layer237_g84982 + weightedBlendVar31_g84982.z*Layer338_g84982 + weightedBlendVar31_g84982.w*Layer439_g84982 );
				half4 Terrain_Masks_169014_g84942 = weightedBlend31_g84982;
				half4 Layer_1644_g84955 = Terrain_Masks_169014_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84955 = Layer_045_g84955;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 + Layer_1243_g84955 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84955 = ( Layer_045_g84955 + Layer_0810_g84955 + Layer_1243_g84955 + Layer_1644_g84955 );
				#else
				float4 staticSwitch40_g84955 = Layer_045_g84955;
				#endif
				half4 Blend_Masks7420_g84942 = staticSwitch40_g84955;
				half4 Normal_Packed45_g85036 = Blend_Masks7420_g84942;
				half2 Normal_NO_DTX544_g85036 = (Normal_Packed45_g85036).wy;
				#ifdef TVE_PACKED_TEX
				float2 staticSwitch9080_g84942 = (Normal_NO_DTX544_g85036*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g84942 = (staticSwitch37_g85037*2.0 + -1.0);
				#endif
				half4 Weights52_g84949 = Terrain_Weights_046781_g84942;
				half4 Layer133_g84949 = _Params1;
				half4 Layer237_g84949 = _Params2;
				half4 Layer338_g84949 = _Params3;
				half4 Layer439_g84949 = _Params4;
				float4 weightedBlendVar31_g84949 = Weights52_g84949;
				float4 weightedBlend31_g84949 = ( weightedBlendVar31_g84949.x*Layer133_g84949 + weightedBlendVar31_g84949.y*Layer237_g84949 + weightedBlendVar31_g84949.z*Layer338_g84949 + weightedBlendVar31_g84949.w*Layer439_g84949 );
				half4 Terrain_Params_047533_g84942 = weightedBlend31_g84949;
				half4 Layer_045_g84956 = Terrain_Params_047533_g84942;
				half4 Weights52_g84966 = Terrain_Weights_087340_g84942;
				half4 Layer133_g84966 = _Params5;
				half4 Layer237_g84966 = _Params6;
				half4 Layer338_g84966 = _Params7;
				half4 Layer439_g84966 = _Params8;
				float4 weightedBlendVar31_g84966 = Weights52_g84966;
				float4 weightedBlend31_g84966 = ( weightedBlendVar31_g84966.x*Layer133_g84966 + weightedBlendVar31_g84966.y*Layer237_g84966 + weightedBlendVar31_g84966.z*Layer338_g84966 + weightedBlendVar31_g84966.w*Layer439_g84966 );
				half4 Terrain_Params_088739_g84942 = weightedBlend31_g84966;
				half4 Layer_0810_g84956 = Terrain_Params_088739_g84942;
				half4 Weights52_g84976 = Terrain_Weights_127710_g84942;
				half4 Layer133_g84976 = _Params9;
				half4 Layer237_g84976 = _Params10;
				half4 Layer338_g84976 = _Params11;
				half4 Layer439_g84976 = _Params12;
				float4 weightedBlendVar31_g84976 = Weights52_g84976;
				float4 weightedBlend31_g84976 = ( weightedBlendVar31_g84976.x*Layer133_g84976 + weightedBlendVar31_g84976.y*Layer237_g84976 + weightedBlendVar31_g84976.z*Layer338_g84976 + weightedBlendVar31_g84976.w*Layer439_g84976 );
				half4 Terrain_Params_128867_g84942 = weightedBlend31_g84976;
				half4 Layer_1243_g84956 = Terrain_Params_128867_g84942;
				half4 Weights52_g84986 = Terrain_Weights_167709_g84942;
				half4 Layer133_g84986 = _Params13;
				half4 Layer237_g84986 = _Params14;
				half4 Layer338_g84986 = _Params15;
				half4 Layer439_g84986 = _Params16;
				float4 weightedBlendVar31_g84986 = Weights52_g84986;
				float4 weightedBlend31_g84986 = ( weightedBlendVar31_g84986.x*Layer133_g84986 + weightedBlendVar31_g84986.y*Layer237_g84986 + weightedBlendVar31_g84986.z*Layer338_g84986 + weightedBlendVar31_g84986.w*Layer439_g84986 );
				half4 Terrain_Params_169017_g84942 = weightedBlend31_g84986;
				half4 Layer_1644_g84956 = Terrain_Params_169017_g84942;
				#if defined(TVE_TERRAIN_04)
				float4 staticSwitch40_g84956 = Layer_045_g84956;
				#elif defined(TVE_TERRAIN_08)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 );
				#elif defined(TVE_TERRAIN_12)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 + Layer_1243_g84956 );
				#elif defined(TVE_TERRAIN_16)
				float4 staticSwitch40_g84956 = ( Layer_045_g84956 + Layer_0810_g84956 + Layer_1243_g84956 + Layer_1644_g84956 );
				#else
				float4 staticSwitch40_g84956 = Layer_045_g84956;
				#endif
				half4 Blend_Params7547_g84942 = staticSwitch40_g84956;
				half2 Normal_Planar45_g85038 = ( staticSwitch9080_g84942 * (Blend_Params7547_g84942).z );
				float2 break64_g85038 = Normal_Planar45_g85038;
				float3 appendResult65_g85038 = (float3(break64_g85038.x , 0.0 , break64_g85038.y));
				half2 Terrain_Normal8038_g84806 = ( (mul( ase_worldToTangent, appendResult65_g85038 )).xy * _TerrainNormalValue );
				float2 lerpResult7797_g84806 = lerp( Blend_Normal_Detail312_g84806 , Terrain_Normal8038_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float2 staticSwitch7796_g84806 = lerpResult7797_g84806;
				#else
				float2 staticSwitch7796_g84806 = Blend_Normal_Detail312_g84806;
				#endif
				half2 Blend_Normal_Terrain7762_g84806 = staticSwitch7796_g84806;
				float3 appendResult7377_g84806 = (float3(Blend_Normal_Terrain7762_g84806 , 1.0));
				float3 tanNormal7376_g84806 = appendResult7377_g84806;
				float3 worldNormal7376_g84806 = float3(dot(tanToWorld0,tanNormal7376_g84806), dot(tanToWorld1,tanNormal7376_g84806), dot(tanToWorld2,tanNormal7376_g84806));
				half3 Blend_NormalWS_Terrain7375_g84806 = worldNormal7376_g84806;
				float lerpResult7446_g84806 = lerp( (Blend_NormalWS_Terrain7375_g84806).y , IN.ase_normal.y , Vertex_DynamicMode5112_g84806);
				float lerpResult6757_g84806 = lerp( 1.0 , saturate( lerpResult7446_g84806 ) , _OverlayProjectionValue);
				half Overlay_Projection6081_g84806 = lerpResult6757_g84806;
				half Overlay_Shading6688_g84806 = Blend_Albedo_Globals6410_g84806;
				half Overlay_Custom6707_g84806 = 1.0;
				float lerpResult8034_g84806 = lerp( Occlusion_Mask6432_g84806 , ( 1.0 - Occlusion_Mask6432_g84806 ) , _VertexOcclusionOverlayMode);
				float lerpResult8032_g84806 = lerp( Occlusion_Alpha6463_g84806 , 1.0 , lerpResult8034_g84806);
				half Occlusion_Overlay6471_g84806 = lerpResult8032_g84806;
				float temp_output_7_0_g84929 = 0.1;
				float temp_output_10_0_g84929 = ( 0.2 - temp_output_7_0_g84929 );
				half Overlay_Mask_High6064_g84806 = saturate( ( ( ( Overlay_Value5738_g84806 * Overlay_Projection6081_g84806 * Overlay_Shading6688_g84806 * Overlay_Custom6707_g84806 * Occlusion_Overlay6471_g84806 ) - temp_output_7_0_g84929 ) / ( temp_output_10_0_g84929 + 0.0001 ) ) );
				half Overlay_Mask269_g84806 = Overlay_Mask_High6064_g84806;
				float3 lerpResult336_g84806 = lerp( Blend_Albedo_Colored863_g84806 , Global_OverlayColor1758_g84806 , Overlay_Mask269_g84806);
				half3 Blend_Albedo_Overlay359_g84806 = lerpResult336_g84806;
				half Global_WetnessContrast6502_g84806 = TVE_WetnessContrast;
				half Global_Extras_Wetness305_g84806 = break456_g84833.y;
				half Wetness_Value6343_g84806 = ( Global_Extras_Wetness305_g84806 * _GlobalWetness );
				float3 lerpResult6367_g84806 = lerp( Blend_Albedo_Overlay359_g84806 , ( Blend_Albedo_Overlay359_g84806 * Blend_Albedo_Overlay359_g84806 ) , ( Global_WetnessContrast6502_g84806 * Wetness_Value6343_g84806 ));
				half3 Blend_Albedo_Wetness6351_g84806 = lerpResult6367_g84806;
				float vertexToFrag11_g84914 = IN.ase_texcoord4.w;
				half3 Tint_Highlight_Color5771_g84806 = ( ( (_MotionHighlightColor).rgb * vertexToFrag11_g84914 ) + float3( 1,1,1 ) );
				float3 temp_output_6309_0_g84806 = ( Blend_Albedo_Wetness6351_g84806 * Tint_Highlight_Color5771_g84806 );
				half3 Subsurface_Color1722_g84806 = ( (_SubsurfaceColor).rgb * Blend_Albedo_Wetness6351_g84806 );
				half Global_Subsurface4041_g84806 = TVE_SubsurfaceValue;
				half Global_OverlaySubsurface5667_g84806 = TVE_OverlaySubsurface;
				float lerpResult7362_g84806 = lerp( 1.0 , Global_OverlaySubsurface5667_g84806 , Overlay_Value5738_g84806);
				half Overlay_Subsurface7361_g84806 = lerpResult7362_g84806;
				half Subsurface_Intensity1752_g84806 = ( _SubsurfaceValue * Global_Subsurface4041_g84806 * Overlay_Subsurface7361_g84806 );
				float lerpResult8014_g84806 = lerp( 1.0 , Blend_MaskRemap_Detail6621_g84806 , _SubsurfaceMaskValue);
				half Subsurface_Mask1557_g84806 = lerpResult8014_g84806;
				half3 MainLight_Direction3926_g84806 = TVE_MainLightDirection;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = normalize(ase_worldViewDir);
				float3 normalizeResult2169_g84806 = normalize( ase_worldViewDir );
				float3 ViewDirection3963_g84806 = normalizeResult2169_g84806;
				float dotResult785_g84806 = dot( -MainLight_Direction3926_g84806 , ViewDirection3963_g84806 );
				float saferPower1624_g84806 = abs( saturate( dotResult785_g84806 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch1602_g84806 = 0.0;
				#else
				float staticSwitch1602_g84806 = ( pow( saferPower1624_g84806 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View782_g84806 = staticSwitch1602_g84806;
				half3 Subsurface_Approximation1693_g84806 = ( Subsurface_Color1722_g84806 * Subsurface_Intensity1752_g84806 * Subsurface_Mask1557_g84806 * Mask_Subsurface_View782_g84806 );
				half3 Blend_Albedo_Subsurface149_g84806 = ( temp_output_6309_0_g84806 + Subsurface_Approximation1693_g84806 );
				half3 Blend_Albedo_RimLight7316_g84806 = Blend_Albedo_Subsurface149_g84806;
				
				float3 temp_cast_19 = (0.0).xxx;
				half3 Emissive_Color7162_g84806 = (_EmissiveColor).rgb;
				half2 Emissive_UVs2468_g84806 = ( ( IN.ase_texcoord3.xy * (_EmissiveUVs).xy ) + (_EmissiveUVs).zw );
				float temp_output_7_0_g84938 = _EmissiveTexMinValue;
				float3 temp_cast_20 = (temp_output_7_0_g84938).xxx;
				float temp_output_10_0_g84938 = ( _EmissiveTexMaxValue - temp_output_7_0_g84938 );
				half3 Emissive_Texture7022_g84806 = saturate( ( ( (SAMPLE_TEXTURE2D( _EmissiveTex, sampler_Linear_Repeat, Emissive_UVs2468_g84806 )).rgb - temp_cast_20 ) / ( temp_output_10_0_g84938 + 0.0001 ) ) );
				half Global_Extras_Emissive4203_g84806 = break456_g84833.x;
				float lerpResult4206_g84806 = lerp( 1.0 , Global_Extras_Emissive4203_g84806 , _GlobalEmissive);
				half Emissive_Value7024_g84806 = ( ( lerpResult4206_g84806 * _EmissivePhaseValue ) - 1.0 );
				half3 Emissive_Mask6968_g84806 = saturate( ( Emissive_Texture7022_g84806 + Emissive_Value7024_g84806 ) );
				float3 temp_output_3_0_g84937 = ( Emissive_Color7162_g84806 * Emissive_Mask6968_g84806 );
				float temp_output_15_0_g84937 = _emissive_intensity_value;
				float3 temp_output_23_0_g84937 = ( temp_output_3_0_g84937 * temp_output_15_0_g84937 );
				#ifdef TVE_EMISSIVE
				float3 staticSwitch8018_g84806 = temp_output_23_0_g84937;
				#else
				float3 staticSwitch8018_g84806 = temp_cast_19;
				#endif
				half3 Blend_Emissive2476_g84806 = staticSwitch8018_g84806;
				half3 Terrain_Emissive7933_g84806 = ( (Blend_Specular7446_g84942).rgb * (Blend_Albedo7468_g84942).xyz );
				float3 lerpResult7927_g84806 = lerp( Blend_Emissive2476_g84806 , Terrain_Emissive7933_g84806 , Terrain_Mask7747_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7912_g84806 = lerpResult7927_g84806;
				#else
				float3 staticSwitch7912_g84806 = Blend_Emissive2476_g84806;
				#endif
				half3 Blend_Emissive_Terrain7909_g84806 = staticSwitch7912_g84806;
				
				float localCustomAlphaClip19_g84928 = ( 0.0 );
				half Main_Alpha316_g84806 = tex2DNode29_g84806.a;
				half Second_Alpha5007_g84806 = tex2DNode89_g84806.a;
				float lerpResult6153_g84806 = lerp( Main_Alpha316_g84806 , Second_Alpha5007_g84806 , Detail_Mask147_g84806);
				float lerpResult6785_g84806 = lerp( ( Main_Alpha316_g84806 * Second_Alpha5007_g84806 ) , lerpResult6153_g84806 , _DetailAlphaMode);
				#ifdef TVE_DETAIL
				float staticSwitch6158_g84806 = lerpResult6785_g84806;
				#else
				float staticSwitch6158_g84806 = Main_Alpha316_g84806;
				#endif
				half Blend_Alpha_Detail6157_g84806 = staticSwitch6158_g84806;
				half AlphaTreshold2132_g84806 = _AlphaClipValue;
				half Global_Extras_Alpha1033_g84806 = saturate( break456_g84833.w );
				float lerpResult5154_g84806 = lerp( 0.0 , Global_MeshVariation5104_g84806 , _AlphaVariationValue);
				half Global_Alpha_Variation5158_g84806 = lerpResult5154_g84806;
				float Emissive_Alpha7942_g84806 = 0.0;
				float lerpResult6866_g84806 = lerp( ( 1.0 - Detail_Mask147_g84806 ) , 1.0 , _DetailFadeMode);
				#ifdef TVE_DETAIL
				float staticSwitch6612_g84806 = lerpResult6866_g84806;
				#else
				float staticSwitch6612_g84806 = 1.0;
				#endif
				half Detail_Mask_Invert6260_g84806 = staticSwitch6612_g84806;
				half Alpha_Mask6234_g84806 = ( 1.0 * Detail_Mask_Invert6260_g84806 );
				float lerpResult5203_g84806 = lerp( 1.0 , saturate( ( ( Global_Extras_Alpha1033_g84806 - saturate( ( Global_Alpha_Variation5158_g84806 + Emissive_Alpha7942_g84806 ) ) ) + ( Global_Extras_Alpha1033_g84806 * 0.1 ) ) ) , ( Alpha_Mask6234_g84806 * _GlobalAlpha ));
				float lerpResult16_g84925 = lerp( 1.0 , lerpResult5203_g84806 , TVE_IsEnabled);
				half Global_Alpha315_g84806 = lerpResult16_g84925;
				half Fade_Alpha3727_g84806 = 1.0;
				half Final_Alpha7344_g84806 = min( ( ( Blend_Alpha_Detail6157_g84806 - AlphaTreshold2132_g84806 ) * Global_Alpha315_g84806 ) , Fade_Alpha3727_g84806 );
				float temp_output_3_0_g84928 = Final_Alpha7344_g84806;
				float Alpha19_g84928 = temp_output_3_0_g84928;
				float temp_output_15_0_g84928 = 0.01;
				float Treshold19_g84928 = temp_output_15_0_g84928;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_ALPHA_FADE) || defined (TVE_ALPHA_GLOBAL)
				#if defined (TVE_IS_HD_PIPELINE)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g84928 - Treshold19_g84928);
				#endif
				#else
				clip(Alpha19_g84928 - Treshold19_g84928);
				#endif
				#endif
				}
				half Main_Color_Alpha6121_g84806 = (lerpResult7986_g84806).a;
				half Second_Color_Alpha6152_g84806 = (lerpResult7997_g84806).a;
				float lerpResult6168_g84806 = lerp( Main_Color_Alpha6121_g84806 , Second_Color_Alpha6152_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch6174_g84806 = lerpResult6168_g84806;
				#else
				float staticSwitch6174_g84806 = Main_Color_Alpha6121_g84806;
				#endif
				half Blend_ColorAlpha_Detail6167_g84806 = staticSwitch6174_g84806;
				half Final_Clip914_g84806 = saturate( ( Alpha19_g84928 * Blend_ColorAlpha_Detail6167_g84806 ) );
				
				o.Albedo = Blend_Albedo_RimLight7316_g84806;
				o.Normal = fixed3( 0, 0, 1 );
				o.Emission = Blend_Emissive_Terrain7909_g84806;
				o.Alpha = Final_Clip914_g84806;
				float AlphaClipThreshold = 0.5;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				UnityMetaInput metaIN;
				UNITY_INITIALIZE_OUTPUT(UnityMetaInput, metaIN);
				metaIN.Albedo = o.Albedo;
				metaIN.Emission = o.Emission;
				#ifdef EDITOR_VISUALIZATION
					metaIN.VizUV = IN.vizUV;
					metaIN.LightCoord = IN.lightCoord;
				#endif
				return UnityMetaFragment(metaIN);
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }
			ZWrite On
			ZTest LEqual
			AlphaToMask Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma multi_compile_shadowcaster
			#ifndef UNITY_PASS_SHADOWCASTER
				#define UNITY_PASS_SHADOWCASTER
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#if ( SHADER_API_D3D11 || SHADER_API_GLCORE || SHADER_API_GLES || SHADER_API_GLES3 || SHADER_API_METAL || SHADER_API_VULKAN )
				#define CAN_SKIP_VPOS
			#endif
			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_COLOR
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local TVE_TERRAIN
			#pragma shader_feature_local TVE_DETAIL
			#define THE_VEGETATION_ENGINE
			#define TVE_IS_STANDARD_PIPELINE
			#define TVE_IS_STANDARD_SHADER
			#define TVE_IS_PLANT_SHADER
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				V2F_SHADOW_CASTER;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef UNITY_STANDARD_USE_DITHER_MASK
				sampler3D _DitherMaskLOD;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half _render_cull;
			uniform half _render_coverage;
			uniform half _render_zw;
			uniform half _render_src;
			uniform half _render_dst;
			uniform half _IsStandardShader;
			uniform float _IsPlantShader;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform float _SubsurfaceDiffusion;
			uniform half _Cutoff;
			uniform float4 _MaxBoundsInfo;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderZWrite;
			uniform half _RenderClip;
			uniform half _RenderCull;
			uniform half _RenderQueue;
			uniform half _RenderPriority;
			uniform half _RenderMode;
			uniform half _CategoryRender;
			uniform half _RenderNormals;
			uniform half _MessageGlobalsVariation;
			uniform half _IsTVEShader;
			uniform half _HasOcclusion;
			uniform half _IsIdentifier;
			uniform half _IsCollected;
			uniform half _IsShared;
			uniform half _IsCustomShader;
			uniform half _HasGradient;
			uniform half _HasEmissive;
			uniform half _VertexVariationMode;
			uniform half _IsVersion;
			uniform half _RenderCoverage;
			uniform half _DetailTypeMode;
			uniform half _DetailOpaqueMode;
			uniform half _DetailCoordMode;
			uniform half _SpaceGlobalLocals;
			uniform half _SpaceSubsurface;
			uniform half _CategoryGlobals;
			uniform half _CategoryMain;
			uniform half _CategoryPerspective;
			uniform half _CategorySizeFade;
			uniform half _SpaceRenderFade;
			uniform half _RenderDirect;
			uniform half _RenderAmbient;
			uniform half _RenderShadow;
			uniform half _IsBlanketShader;
			uniform half4 _Color;
			uniform half _CategoryMotion;
			uniform half _MessageMotionVariation;
			uniform half4 _MainMaskRemap;
			uniform half4 _SecondMaskRemap;
			uniform half _CategoryDetail;
			uniform half _CategoryTerrain;
			uniform half _CategoryOcclusion;
			uniform half _CategoryGradient;
			uniform half _CategoryNoise;
			uniform half _CategoryRimLight;
			uniform half _CategoryMatcap;
			uniform half _CategorySubsurface;
			uniform half _CategoryEmissive;
			uniform half _SpaceGlobalLayers;
			uniform half _SpaceGlobalOptions;
			uniform half _SpaceMotionGlobals;
			uniform half _ColorsMaskMinValue;
			uniform half _ColorsMaskMaxValue;
			uniform half _DetailMeshInvertMode;
			uniform half _DetailMaskInvertMode;
			uniform half _MotionValue_31;
			uniform half _MotionValue_21;
			uniform half _MessageMainMask;
			uniform half _MessageSecondMask;
			uniform half4 _DetailBlendRemap;
			uniform half4 _DetailMeshRemap;
			uniform half4 _DetailMaskRemap;
			uniform half4 _VertexOcclusionRemap;
			uniform half4 _GradientMaskRemap;
			uniform half4 _NoiseMaskRemap;
			uniform half4 _RimLightRemap;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceAngleValue;
			uniform half _SubsurfaceScatteringValue;
			uniform half4 _EmissiveTexRemap;
			uniform half _EmissiveMode;
			uniform half _EmissiveIntensityValue;
			uniform half _EmissiveFlagMode;
			uniform half _EmissiveIntensityMode;
			uniform half _MessageSubsurface;
			uniform half _MessageOcclusion;
			uniform half _MessageTerrain;
			uniform half4 _TerrainBlendRemap;
			uniform half _TerrainTexMode;
			uniform half _TerrainBlendMode;
			uniform half _TerrainLayersMode;
			uniform half _LayerSampleMode1;
			uniform half _LayerSampleMode2;
			uniform half _LayerSampleMode3;
			uniform half _LayerSampleMode4;
			uniform half _LayerSampleMode5;
			uniform half _LayerSampleMode6;
			uniform half _LayerSampleMode7;
			uniform half _LayerSampleMode8;
			uniform half _LayerSampleMode9;
			uniform half _LayerSampleMode10;
			uniform half _LayerSampleMode11;
			uniform half _LayerSampleMode12;
			uniform half _LayerSampleMode13;
			uniform half _LayerSampleMode14;
			uniform half _LayerSampleMode15;
			uniform half _LayerSampleMode16;
			uniform half _VertexPivotMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(TVE_NoiseTex);
			uniform float3 TVE_WorldOrigin;
			uniform half _MotionPosition_10;
			uniform float _MotionScale_10;
			uniform half TVE_NoiseTexTilling;
			uniform half4 TVE_MotionParams;
			uniform half4 TVE_TimeParams;
			uniform float _MotionSpeed_10;
			uniform half _MotionVariation_10;
			uniform half _VertexDynamicMode;
			SamplerState sampler_Linear_Repeat;
			uniform half _LayerMotionValue;
			uniform float TVE_MotionUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_MotionTex);
			uniform half4 TVE_MotionCoords;
			SamplerState sampler_Linear_Clamp;
			uniform half4 TVE_WindEditor;
			uniform half _MotionAmplitude_10;
			uniform half TVE_MotionValue_10;
			uniform half _InteractionMaskValue;
			uniform half _InteractionAmplitude;
			uniform half _LayerVertexValue;
			uniform float TVE_VertexUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_VertexTex);
			uniform half4 TVE_VertexCoords;
			uniform half _VertexPositionMode;
			uniform half4 TVE_VertexParams;
			uniform half _GlobalOrientation;
			uniform half _MotionScale_20;
			uniform half _MotionVariation_20;
			uniform half _MotionSpeed_20;
			uniform half _MotionFacingValue;
			uniform half _MotionAmplitude_20;
			uniform half TVE_MotionValue_20;
			uniform half _MotionAmplitude_22;
			uniform float _MotionScale_32;
			uniform float _MotionVariation_32;
			uniform float _MotionSpeed_32;
			uniform half _MotionAmplitude_32;
			uniform half TVE_MotionFadeEnd;
			uniform half TVE_MotionFadeStart;
			uniform half TVE_MotionValue_30;
			uniform half _PerspectivePushValue;
			uniform half _PerspectiveNoiseValue;
			uniform half _PerspectiveAngleValue;
			uniform half _GlobalSize;
			uniform half TVE_DistanceFadeBias;
			uniform half _SizeFadeEndValue;
			uniform half _SizeFadeStartValue;
			uniform half _ConformOffsetMode;
			uniform half _ConformOffsetValue;
			uniform half _GlobalConform;
			uniform half TVE_IsEnabled;
			uniform half _DisableSRPBatcher;
			uniform float _TerrainBlendOffsetValue;
			uniform float _TerrainBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			uniform half4 _MainUVs;
			SamplerState sampler_MainAlbedoTex;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_uvs_mode;
			uniform half4 _SecondUVs;
			uniform half _SecondUVsScaleMode;
			SamplerState sampler_SecondAlbedoTex;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainMaskTex);
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half _DetailMaskMode;
			uniform half _DetailMaskMinValue;
			uniform half _DetailMaskMaxValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _DetailMeshMode;
			uniform half _DetailMeshMinValue;
			uniform half _DetailMeshMaxValue;
			uniform half _DetailBlendMinValue;
			uniform half _DetailBlendMaxValue;
			uniform half _DetailMode;
			uniform half _DetailValue;
			uniform half _DetailAlphaMode;
			uniform half _AlphaClipValue;
			uniform half _LayerExtrasValue;
			uniform float TVE_ExtrasUsage[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_ExtrasTex);
			uniform half4 TVE_ExtrasCoords;
			uniform half _ExtrasPositionMode;
			uniform half4 TVE_ExtrasParams;
			uniform half _AlphaVariationValue;
			uniform half _DetailFadeMode;
			uniform half _GlobalAlpha;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			uniform half _MainMaskMinValue;
			uniform half _MainMaskMaxValue;
			uniform half _MainColorMode;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			uniform half _SecondMaskMinValue;
			uniform half _SecondMaskMaxValue;
			uniform half _SecondColorMode;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				float3 VertexPosition3588_g84806 = v.vertex.xyz;
				float3 appendResult60_g84814 = (float3(v.ase_texcoord3.x , v.ase_texcoord3.z , v.ase_texcoord3.y));
				half3 Mesh_PivotsData2831_g84806 = ( appendResult60_g84814 * _VertexPivotMode );
				half3 Mesh_PivotsOS2291_g84806 = Mesh_PivotsData2831_g84806;
				float3 temp_output_2283_0_g84806 = ( VertexPosition3588_g84806 - Mesh_PivotsOS2291_g84806 );
				half3 VertexPos40_g84886 = temp_output_2283_0_g84806;
				half3 VertexPos40_g84887 = VertexPos40_g84886;
				float3 appendResult74_g84887 = (float3(VertexPos40_g84887.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g84887 = appendResult74_g84887;
				float3 break84_g84887 = VertexPos40_g84887;
				float3 appendResult81_g84887 = (float3(0.0 , break84_g84887.y , break84_g84887.z));
				half3 VertexPosOtherAxis82_g84887 = appendResult81_g84887;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag3890_g84806 = ase_worldPos;
				float3 WorldPosition3905_g84806 = vertexToFrag3890_g84806;
				float3 WorldPosition_Shifted7477_g84806 = ( WorldPosition3905_g84806 - TVE_WorldOrigin );
				float4x4 break19_g84843 = unity_ObjectToWorld;
				float3 appendResult20_g84843 = (float3(break19_g84843[ 0 ][ 3 ] , break19_g84843[ 1 ][ 3 ] , break19_g84843[ 2 ][ 3 ]));
				float3 temp_output_122_0_g84843 = Mesh_PivotsData2831_g84806;
				float3 PivotsOnly105_g84843 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g84843 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g84845 = ( appendResult20_g84843 + PivotsOnly105_g84843 );
				half3 WorldData19_g84845 = ase_worldPos;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84845 = WorldData19_g84845;
				#else
				float3 staticSwitch14_g84845 = ObjectData20_g84845;
				#endif
				float3 temp_output_114_0_g84843 = staticSwitch14_g84845;
				float3 vertexToFrag4224_g84806 = temp_output_114_0_g84843;
				float3 ObjectPosition4223_g84806 = vertexToFrag4224_g84806;
				float3 ObjectPosition_Shifted7481_g84806 = ( ObjectPosition4223_g84806 - TVE_WorldOrigin );
				float3 lerpResult6766_g84806 = lerp( WorldPosition_Shifted7477_g84806 , ObjectPosition_Shifted7481_g84806 , _MotionPosition_10);
				float3 Motion_10_Position6738_g84806 = lerpResult6766_g84806;
				half3 Input_Position419_g84851 = Motion_10_Position6738_g84806;
				float Input_MotionScale287_g84851 = ( _MotionScale_10 + 0.2 );
				half NoiseTex_Tilling735_g84851 = TVE_NoiseTexTilling;
				float2 temp_output_597_0_g84851 = (( Input_Position419_g84851 * Input_MotionScale287_g84851 * NoiseTex_Tilling735_g84851 * 0.0075 )).xz;
				float2 temp_output_447_0_g84811 = ((TVE_MotionParams).xy*2.0 + -1.0);
				half2 Global_Wind_DirectionWS4683_g84806 = temp_output_447_0_g84811;
				half2 Input_DirectionWS423_g84851 = Global_Wind_DirectionWS4683_g84806;
				float lerpResult128_g84852 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84851 = _MotionSpeed_10;
				half Input_MotionVariation284_g84851 = _MotionVariation_10;
				half3 Input_Position167_g84900 = ObjectPosition_Shifted7481_g84806;
				float dotResult156_g84900 = dot( (Input_Position167_g84900).xz , float2( 12.9898,78.233 ) );
				half Vertex_DynamicMode5112_g84806 = _VertexDynamicMode;
				half Input_DynamicMode120_g84900 = Vertex_DynamicMode5112_g84806;
				float Postion_Random162_g84900 = ( sin( dotResult156_g84900 ) * ( 1.0 - Input_DynamicMode120_g84900 ) );
				float Mesh_Variation16_g84806 = v.ase_color.r;
				half Input_Variation124_g84900 = Mesh_Variation16_g84806;
				half ObjectData20_g84902 = frac( ( Postion_Random162_g84900 + Input_Variation124_g84900 ) );
				half WorldData19_g84902 = Input_Variation124_g84900;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84902 = WorldData19_g84902;
				#else
				float staticSwitch14_g84902 = ObjectData20_g84902;
				#endif
				float temp_output_112_0_g84900 = staticSwitch14_g84902;
				float clampResult171_g84900 = clamp( temp_output_112_0_g84900 , 0.01 , 0.99 );
				float Global_MeshVariation5104_g84806 = clampResult171_g84900;
				half Input_GlobalMeshVariation569_g84851 = Global_MeshVariation5104_g84806;
				float temp_output_630_0_g84851 = ( ( ( lerpResult128_g84852 * Input_MotionSpeed62_g84851 ) + ( Input_MotionVariation284_g84851 * Input_GlobalMeshVariation569_g84851 ) ) * 0.03 );
				float temp_output_607_0_g84851 = frac( temp_output_630_0_g84851 );
				float4 lerpResult590_g84851 = lerp( SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( temp_output_597_0_g84851 + ( -Input_DirectionWS423_g84851 * temp_output_607_0_g84851 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( temp_output_597_0_g84851 + ( -Input_DirectionWS423_g84851 * frac( ( temp_output_630_0_g84851 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_607_0_g84851 - 0.5 ) ) / 0.5 ));
				half4 Noise_Complex703_g84851 = lerpResult590_g84851;
				float2 temp_output_645_0_g84851 = ((Noise_Complex703_g84851).rg*2.0 + -1.0);
				float2 break650_g84851 = temp_output_645_0_g84851;
				float3 appendResult649_g84851 = (float3(break650_g84851.x , 0.0 , break650_g84851.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Global_Noise_OS5548_g84806 = (( mul( unity_WorldToObject, float4( appendResult649_g84851 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_Noise_DirectionOS487_g84866 = Global_Noise_OS5548_g84806;
				float2 break448_g84811 = temp_output_447_0_g84811;
				float3 appendResult452_g84811 = (float3(break448_g84811.x , 0.0 , break448_g84811.y));
				half2 Global_Wind_DirectionOS5692_g84806 = (( mul( unity_WorldToObject, float4( appendResult452_g84811 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_Wind_DirectionOS458_g84866 = Global_Wind_DirectionOS5692_g84806;
				float temp_output_84_0_g84815 = _LayerMotionValue;
				float temp_output_19_0_g84819 = TVE_MotionUsage[(int)temp_output_84_0_g84815];
				float4 temp_output_91_19_g84815 = TVE_MotionCoords;
				half2 UV94_g84815 = ( (temp_output_91_19_g84815).zw + ( (temp_output_91_19_g84815).xy * (ObjectPosition4223_g84806).xz ) );
				float4 tex2DArrayNode50_g84815 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_MotionTex, sampler_Linear_Clamp, float3(UV94_g84815,temp_output_84_0_g84815), 0.0 );
				float4 temp_output_17_0_g84819 = tex2DArrayNode50_g84815;
				float4 temp_output_112_19_g84815 = TVE_MotionParams;
				float4 temp_output_3_0_g84819 = temp_output_112_19_g84815;
				float4 ifLocalVar18_g84819 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84819 >= 0.5 )
				ifLocalVar18_g84819 = temp_output_17_0_g84819;
				else
				ifLocalVar18_g84819 = temp_output_3_0_g84819;
				float4 lerpResult22_g84819 = lerp( temp_output_3_0_g84819 , temp_output_17_0_g84819 , temp_output_19_0_g84819);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84819 = lerpResult22_g84819;
				#else
				float4 staticSwitch24_g84819 = ifLocalVar18_g84819;
				#endif
				half4 Global_Motion_Params3909_g84806 = staticSwitch24_g84819;
				float4 break322_g84811 = Global_Motion_Params3909_g84806;
				float lerpResult457_g84811 = lerp( break322_g84811.z , TVE_WindEditor.z , TVE_WindEditor.w);
				float temp_output_459_0_g84811 = ( 1.0 - lerpResult457_g84811 );
				half Global_Wind_Power2223_g84806 = ( 1.0 - ( temp_output_459_0_g84811 * temp_output_459_0_g84811 ) );
				half Input_WindPower449_g84866 = Global_Wind_Power2223_g84806;
				float2 lerpResult516_g84866 = lerp( Input_Noise_DirectionOS487_g84866 , Input_Wind_DirectionOS458_g84866 , ( Input_WindPower449_g84866 * 0.6 ));
				half Mesh_Motion_107613_g84806 = v.ase_color.a;
				half Input_MeshHeight388_g84866 = Mesh_Motion_107613_g84806;
				half ObjectData20_g84867 = Input_MeshHeight388_g84866;
				float enc62_g84861 = v.ase_texcoord.w;
				float2 localDecodeFloatToVector262_g84861 = DecodeFloatToVector2( enc62_g84861 );
				float2 break63_g84861 = ( localDecodeFloatToVector262_g84861 * 100.0 );
				float Bounds_Height5230_g84806 = break63_g84861.x;
				half Input_BoundsHeight390_g84866 = Bounds_Height5230_g84806;
				half WorldData19_g84867 = ( Input_MeshHeight388_g84866 * Input_MeshHeight388_g84866 * Input_BoundsHeight390_g84866 );
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84867 = WorldData19_g84867;
				#else
				float staticSwitch14_g84867 = ObjectData20_g84867;
				#endif
				half Final_Motion10_Mask321_g84866 = ( staticSwitch14_g84867 * 2.0 );
				half Motion_10_Amplitude2258_g84806 = _MotionAmplitude_10;
				half Input_BendingAmplitude376_g84866 = Motion_10_Amplitude2258_g84806;
				half Global_MotionValue640_g84866 = TVE_MotionValue_10;
				half2 Final_Bending631_g84866 = ( lerpResult516_g84866 * ( Final_Motion10_Mask321_g84866 * Input_BendingAmplitude376_g84866 * Input_WindPower449_g84866 * Input_WindPower449_g84866 * Global_MotionValue640_g84866 ) );
				float2 appendResult433_g84811 = (float2(break322_g84811.x , break322_g84811.y));
				float2 temp_output_436_0_g84811 = (appendResult433_g84811*2.0 + -1.0);
				float2 break441_g84811 = temp_output_436_0_g84811;
				float3 appendResult440_g84811 = (float3(break441_g84811.x , 0.0 , break441_g84811.y));
				half2 Global_React_DirectionOS39_g84806 = (( mul( unity_WorldToObject, float4( appendResult440_g84811 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Input_React_DirectionOS358_g84866 = Global_React_DirectionOS39_g84806;
				float clampResult17_g84869 = clamp( Input_MeshHeight388_g84866 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84868 = 0.0;
				half Input_InteractionUseMask62_g84866 = _InteractionMaskValue;
				float temp_output_10_0_g84868 = ( Input_InteractionUseMask62_g84866 - temp_output_7_0_g84868 );
				half Final_InteractionRemap594_g84866 = saturate( ( ( clampResult17_g84869 - temp_output_7_0_g84868 ) / ( temp_output_10_0_g84868 + 0.0001 ) ) );
				half ObjectData20_g84870 = Final_InteractionRemap594_g84866;
				half WorldData19_g84870 = ( Final_InteractionRemap594_g84866 * Final_InteractionRemap594_g84866 * Input_BoundsHeight390_g84866 );
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84870 = WorldData19_g84870;
				#else
				float staticSwitch14_g84870 = ObjectData20_g84870;
				#endif
				half Final_InteractionMask373_g84866 = ( staticSwitch14_g84870 * 2.0 );
				half Interaction_Amplitude7501_g84806 = _InteractionAmplitude;
				half Input_InteractionAmplitude58_g84866 = Interaction_Amplitude7501_g84806;
				half2 Final_Interaction632_g84866 = ( Input_React_DirectionOS358_g84866 * Final_InteractionMask373_g84866 * Input_InteractionAmplitude58_g84866 );
				half Global_Interaction_Mask66_g84806 = ( break322_g84811.w * break322_g84811.w * break322_g84811.w * break322_g84811.w );
				float Input_InteractionGlobalMask330_g84866 = Global_Interaction_Mask66_g84806;
				half Final_InteractionValue525_g84866 = saturate( ( Input_InteractionAmplitude58_g84866 * Input_InteractionGlobalMask330_g84866 ) );
				float2 lerpResult551_g84866 = lerp( Final_Bending631_g84866 , Final_Interaction632_g84866 , Final_InteractionValue525_g84866);
				float2 break364_g84866 = lerpResult551_g84866;
				float3 appendResult638_g84866 = (float3(break364_g84866.x , 0.0 , break364_g84866.y));
				half3 Motion_10_Interaction7519_g84806 = appendResult638_g84866;
				float temp_output_84_0_g84835 = _LayerVertexValue;
				float temp_output_19_0_g84839 = TVE_VertexUsage[(int)temp_output_84_0_g84835];
				float4 temp_output_94_19_g84835 = TVE_VertexCoords;
				float3 lerpResult7575_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _VertexPositionMode);
				half2 UV97_g84835 = ( (temp_output_94_19_g84835).zw + ( (temp_output_94_19_g84835).xy * (lerpResult7575_g84806).xz ) );
				float4 tex2DArrayNode50_g84835 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_VertexTex, sampler_Linear_Clamp, float3(UV97_g84835,temp_output_84_0_g84835), 0.0 );
				float4 temp_output_17_0_g84839 = tex2DArrayNode50_g84835;
				float4 temp_output_111_19_g84835 = TVE_VertexParams;
				float4 temp_output_3_0_g84839 = temp_output_111_19_g84835;
				float4 ifLocalVar18_g84839 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84839 >= 0.5 )
				ifLocalVar18_g84839 = temp_output_17_0_g84839;
				else
				ifLocalVar18_g84839 = temp_output_3_0_g84839;
				float4 lerpResult22_g84839 = lerp( temp_output_3_0_g84839 , temp_output_17_0_g84839 , temp_output_19_0_g84839);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84839 = lerpResult22_g84839;
				#else
				float4 staticSwitch24_g84839 = ifLocalVar18_g84839;
				#endif
				half4 Global_Vertex_Params4173_g84806 = staticSwitch24_g84839;
				float4 break322_g84873 = Global_Vertex_Params4173_g84806;
				float2 appendResult355_g84873 = (float2(break322_g84873.x , break322_g84873.y));
				float2 temp_output_356_0_g84873 = (appendResult355_g84873*2.0 + -1.0);
				float2 break357_g84873 = temp_output_356_0_g84873;
				float3 appendResult361_g84873 = (float3(break357_g84873.x , 0.0 , break357_g84873.y));
				half2 Global_VertexOrientationOS7550_g84806 = (( mul( unity_WorldToObject, float4( appendResult361_g84873 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float2 lerpResult7535_g84806 = lerp( float2( 0,0 ) , Global_VertexOrientationOS7550_g84806 , _GlobalOrientation);
				float2 break7552_g84806 = lerpResult7535_g84806;
				float3 appendResult7553_g84806 = (float3(break7552_g84806.x , 0.0 , break7552_g84806.y));
				half3 Vertex_Orientation7542_g84806 = appendResult7553_g84806;
				half3 Angle44_g84886 = ( Motion_10_Interaction7519_g84806 + Vertex_Orientation7542_g84806 );
				half Angle44_g84887 = (Angle44_g84886).z;
				half3 VertexPos40_g84888 = ( VertexPosRotationAxis50_g84887 + ( VertexPosOtherAxis82_g84887 * cos( Angle44_g84887 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g84887 ) * sin( Angle44_g84887 ) ) );
				float3 appendResult74_g84888 = (float3(0.0 , 0.0 , VertexPos40_g84888.z));
				half3 VertexPosRotationAxis50_g84888 = appendResult74_g84888;
				float3 break84_g84888 = VertexPos40_g84888;
				float3 appendResult81_g84888 = (float3(break84_g84888.x , break84_g84888.y , 0.0));
				half3 VertexPosOtherAxis82_g84888 = appendResult81_g84888;
				half Angle44_g84888 = -(Angle44_g84886).x;
				half3 Input_Position419_g84859 = WorldPosition_Shifted7477_g84806;
				float3 break459_g84859 = Input_Position419_g84859;
				float Sum_Position446_g84859 = ( break459_g84859.x + break459_g84859.y + break459_g84859.z );
				half Input_MotionScale321_g84859 = ( _MotionScale_20 * 0.1 );
				half Input_MotionVariation330_g84859 = _MotionVariation_20;
				half Input_GlobalVariation400_g84859 = Global_MeshVariation5104_g84806;
				float lerpResult128_g84860 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84859 = _MotionSpeed_20;
				float temp_output_404_0_g84859 = ( lerpResult128_g84860 * Input_MotionSpeed62_g84859 );
				half Motion_SineA450_g84859 = sin( ( ( Sum_Position446_g84859 * Input_MotionScale321_g84859 ) + ( Input_MotionVariation330_g84859 * Input_GlobalVariation400_g84859 ) + temp_output_404_0_g84859 ) );
				half Motion_SineB395_g84859 = sin( ( ( temp_output_404_0_g84859 * 0.6842 ) + ( Sum_Position446_g84859 * Input_MotionScale321_g84859 ) ) );
				half3 Input_Position419_g84898 = VertexPosition3588_g84806;
				float3 normalizeResult518_g84898 = normalize( Input_Position419_g84898 );
				half2 Input_DirectionOS423_g84898 = Global_React_DirectionOS39_g84806;
				float2 break521_g84898 = -Input_DirectionOS423_g84898;
				float3 appendResult522_g84898 = (float3(break521_g84898.x , 0.0 , break521_g84898.y));
				float dotResult519_g84898 = dot( normalizeResult518_g84898 , appendResult522_g84898 );
				half Input_Value62_g84898 = _MotionFacingValue;
				float lerpResult524_g84898 = lerp( 1.0 , (dotResult519_g84898*0.5 + 0.5) , Input_Value62_g84898);
				half ObjectData20_g84899 = max( lerpResult524_g84898 , 0.001 );
				half WorldData19_g84899 = 1.0;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84899 = WorldData19_g84899;
				#else
				float staticSwitch14_g84899 = ObjectData20_g84899;
				#endif
				half Motion_FacingMask5214_g84806 = staticSwitch14_g84899;
				half Motion_20_Amplitude4381_g84806 = Motion_FacingMask5214_g84806;
				half Input_MotionAmplitude384_g84859 = Motion_20_Amplitude4381_g84806;
				half Input_GlobalWind407_g84859 = Global_Wind_Power2223_g84806;
				float4 break638_g84851 = abs( Noise_Complex703_g84851 );
				half Global_Noise_B5526_g84806 = break638_g84851.b;
				half Input_GlobalNoise411_g84859 = Global_Noise_B5526_g84806;
				float lerpResult413_g84859 = lerp( 1.8 , 0.4 , Input_GlobalWind407_g84859);
				half Motion_Amplitude418_g84859 = ( Input_MotionAmplitude384_g84859 * Input_GlobalWind407_g84859 * pow( Input_GlobalNoise411_g84859 , lerpResult413_g84859 ) );
				half Input_Squash58_g84859 = _MotionAmplitude_20;
				float enc59_g84861 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector259_g84861 = DecodeFloatToVector2( enc59_g84861 );
				float2 break61_g84861 = localDecodeFloatToVector259_g84861;
				half Mesh_Motion_2060_g84806 = break61_g84861.x;
				half Input_MeshMotion_20388_g84859 = Mesh_Motion_2060_g84806;
				float Bounds_Radius5231_g84806 = break63_g84861.y;
				half Input_BoundsRadius390_g84859 = Bounds_Radius5231_g84806;
				half Global_MotionValue462_g84859 = TVE_MotionValue_20;
				half2 Input_DirectionOS366_g84859 = Global_React_DirectionOS39_g84806;
				float2 break371_g84859 = Input_DirectionOS366_g84859;
				float3 appendResult372_g84859 = (float3(break371_g84859.x , ( Motion_SineA450_g84859 * 0.3 ) , break371_g84859.y));
				half3 Motion_20_Squash4418_g84806 = ( ( (max( Motion_SineA450_g84859 , Motion_SineB395_g84859 )*0.5 + 0.5) * Motion_Amplitude418_g84859 * Input_Squash58_g84859 * Input_MeshMotion_20388_g84859 * Input_BoundsRadius390_g84859 * Global_MotionValue462_g84859 ) * appendResult372_g84859 );
				half3 VertexPos40_g84876 = ( ( VertexPosRotationAxis50_g84888 + ( VertexPosOtherAxis82_g84888 * cos( Angle44_g84888 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g84888 ) * sin( Angle44_g84888 ) ) ) + Motion_20_Squash4418_g84806 );
				float3 appendResult74_g84876 = (float3(0.0 , VertexPos40_g84876.y , 0.0));
				float3 VertexPosRotationAxis50_g84876 = appendResult74_g84876;
				float3 break84_g84876 = VertexPos40_g84876;
				float3 appendResult81_g84876 = (float3(break84_g84876.x , 0.0 , break84_g84876.z));
				float3 VertexPosOtherAxis82_g84876 = appendResult81_g84876;
				half Input_Rolling379_g84859 = _MotionAmplitude_22;
				half Motion_20_Rolling5257_g84806 = ( Motion_SineA450_g84859 * Motion_Amplitude418_g84859 * Input_Rolling379_g84859 * Input_MeshMotion_20388_g84859 * Global_MotionValue462_g84859 );
				half Angle44_g84876 = Motion_20_Rolling5257_g84806;
				half3 Input_Position500_g84855 = WorldPosition_Shifted7477_g84806;
				half Input_MotionScale321_g84855 = _MotionScale_32;
				half Input_MotionVariation330_g84855 = _MotionVariation_32;
				half Input_GlobalVariation372_g84855 = Global_MeshVariation5104_g84806;
				float lerpResult128_g84856 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g84855 = _MotionSpeed_32;
				float4 tex2DNode460_g84855 = SAMPLE_TEXTURE2D_LOD( TVE_NoiseTex, sampler_Linear_Repeat, ( ( (Input_Position500_g84855).xz * Input_MotionScale321_g84855 * 0.03 ) + ( Input_MotionVariation330_g84855 * Input_GlobalVariation372_g84855 ) + ( lerpResult128_g84856 * Input_MotionSpeed62_g84855 * 0.02 ) ), 0.0 );
				float3 appendResult462_g84855 = (float3(tex2DNode460_g84855.r , tex2DNode460_g84855.g , tex2DNode460_g84855.b));
				half3 Flutter_Texture489_g84855 = (appendResult462_g84855*2.0 + -1.0);
				float temp_output_7_0_g84841 = TVE_MotionFadeEnd;
				float temp_output_10_0_g84841 = ( TVE_MotionFadeStart - temp_output_7_0_g84841 );
				half Motion_FadeOut4005_g84806 = saturate( ( ( distance( ase_worldPos , _WorldSpaceCameraPos ) - temp_output_7_0_g84841 ) / ( temp_output_10_0_g84841 + 0.0001 ) ) );
				half Motion_30_Amplitude4960_g84806 = ( _MotionAmplitude_32 * Motion_FacingMask5214_g84806 * Motion_FadeOut4005_g84806 );
				half Input_MotionAmplitude58_g84855 = Motion_30_Amplitude4960_g84806;
				half Mesh_Motion_30144_g84806 = break61_g84861.y;
				half Input_MeshMotion_30374_g84855 = Mesh_Motion_30144_g84806;
				half Input_GlobalWind471_g84855 = Global_Wind_Power2223_g84806;
				half Global_MotionValue503_g84855 = TVE_MotionValue_30;
				half Input_GlobalNoise472_g84855 = Global_Noise_B5526_g84806;
				float lerpResult466_g84855 = lerp( 2.4 , 0.6 , Input_GlobalWind471_g84855);
				half Flutter_Amplitude491_g84855 = ( Input_MotionAmplitude58_g84855 * Input_MeshMotion_30374_g84855 * Input_GlobalWind471_g84855 * Global_MotionValue503_g84855 * pow( Input_GlobalNoise472_g84855 , lerpResult466_g84855 ) );
				half3 Motion_30_Flutter263_g84806 = ( Flutter_Texture489_g84855 * Flutter_Amplitude491_g84855 );
				float3 Vertex_Motion_Object833_g84806 = ( ( VertexPosRotationAxis50_g84876 + ( VertexPosOtherAxis82_g84876 * cos( Angle44_g84876 ) ) + ( cross( float3(0,1,0) , VertexPosOtherAxis82_g84876 ) * sin( Angle44_g84876 ) ) ) + Motion_30_Flutter263_g84806 );
				half3 ObjectData20_g84877 = Vertex_Motion_Object833_g84806;
				float3 temp_output_3474_0_g84806 = ( VertexPosition3588_g84806 - Mesh_PivotsOS2291_g84806 );
				float3 Vertex_Motion_World1118_g84806 = ( ( ( temp_output_3474_0_g84806 + ( Motion_10_Interaction7519_g84806 + Vertex_Orientation7542_g84806 ) ) + Motion_20_Squash4418_g84806 ) + Motion_30_Flutter263_g84806 );
				half3 WorldData19_g84877 = Vertex_Motion_World1118_g84806;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84877 = WorldData19_g84877;
				#else
				float3 staticSwitch14_g84877 = ObjectData20_g84877;
				#endif
				float3 temp_output_7495_0_g84806 = staticSwitch14_g84877;
				float3 Vertex_Motion7493_g84806 = temp_output_7495_0_g84806;
				float3 ase_worldViewDir = UnityWorldSpaceViewDir(ase_worldPos);
				ase_worldViewDir = normalize(ase_worldViewDir);
				float3 normalizeResult2169_g84806 = normalize( ase_worldViewDir );
				float3 ViewDirection3963_g84806 = normalizeResult2169_g84806;
				float3 break2709_g84806 = cross( ViewDirection3963_g84806 , half3(0,1,0) );
				float3 appendResult2710_g84806 = (float3(-break2709_g84806.z , 0.0 , break2709_g84806.x));
				float3 appendResult2667_g84806 = (float3(Global_MeshVariation5104_g84806 , 0.5 , Global_MeshVariation5104_g84806));
				half Mesh_Height1524_g84806 = v.ase_color.a;
				float dotResult2212_g84806 = dot( ViewDirection3963_g84806 , float3(0,1,0) );
				half Mask_HView2656_g84806 = dotResult2212_g84806;
				float saferPower2652_g84806 = abs( Mask_HView2656_g84806 );
				half3 Grass_Perspective2661_g84806 = ( ( ( mul( unity_WorldToObject, float4( appendResult2710_g84806 , 0.0 ) ).xyz * _PerspectivePushValue ) + ( (appendResult2667_g84806*2.0 + -1.0) * _PerspectiveNoiseValue ) ) * Mesh_Height1524_g84806 * pow( saferPower2652_g84806 , _PerspectiveAngleValue ) );
				half Global_VertexSize174_g84806 = saturate( break322_g84873.w );
				float lerpResult346_g84806 = lerp( 1.0 , Global_VertexSize174_g84806 , _GlobalSize);
				float3 appendResult3480_g84806 = (float3(lerpResult346_g84806 , lerpResult346_g84806 , lerpResult346_g84806));
				half3 ObjectData20_g84880 = appendResult3480_g84806;
				half3 _Vector11 = half3(1,1,1);
				half3 WorldData19_g84880 = _Vector11;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84880 = WorldData19_g84880;
				#else
				float3 staticSwitch14_g84880 = ObjectData20_g84880;
				#endif
				half3 Vertex_Size1741_g84806 = staticSwitch14_g84880;
				float temp_output_7_0_g84881 = _SizeFadeEndValue;
				float temp_output_10_0_g84881 = ( _SizeFadeStartValue - temp_output_7_0_g84881 );
				float temp_output_7453_0_g84806 = saturate( ( ( ( distance( _WorldSpaceCameraPos , ObjectPosition4223_g84806 ) * ( 1.0 / TVE_DistanceFadeBias ) ) - temp_output_7_0_g84881 ) / ( temp_output_10_0_g84881 + 0.0001 ) ) );
				float3 appendResult3482_g84806 = (float3(temp_output_7453_0_g84806 , temp_output_7453_0_g84806 , temp_output_7453_0_g84806));
				half3 ObjectData20_g84879 = appendResult3482_g84806;
				half3 _Vector5 = half3(1,1,1);
				half3 WorldData19_g84879 = _Vector5;
				#ifdef TVE_FEATURE_BATCHING
				float3 staticSwitch14_g84879 = WorldData19_g84879;
				#else
				float3 staticSwitch14_g84879 = ObjectData20_g84879;
				#endif
				float3 Vertex_SizeFade1740_g84806 = staticSwitch14_g84879;
				half Global_VertexOffset7549_g84806 = break322_g84873.z;
				float3 ase_objectScale = float3( length( unity_ObjectToWorld[ 0 ].xyz ), length( unity_ObjectToWorld[ 1 ].xyz ), length( unity_ObjectToWorld[ 2 ].xyz ) );
				float3 appendResult7547_g84806 = (float3(0.0 , ( ( ( ( Global_VertexOffset7549_g84806 - ( (ObjectPosition_Shifted7481_g84806).y * _ConformOffsetMode ) ) + _ConformOffsetValue ) / ase_objectScale.y ) * _GlobalConform ) , 0.0));
				half3 Vertex_Offset7544_g84806 = appendResult7547_g84806;
				float3 lerpResult16_g84882 = lerp( VertexPosition3588_g84806 , ( ( ( Vertex_Motion7493_g84806 + Grass_Perspective2661_g84806 ) * Vertex_Size1741_g84806 * Vertex_SizeFade1740_g84806 ) + Mesh_PivotsOS2291_g84806 + Vertex_Offset7544_g84806 ) , TVE_IsEnabled);
				float3 temp_output_4912_0_g84806 = lerpResult16_g84882;
				float3 Final_VertexPosition890_g84806 = ( temp_output_4912_0_g84806 + _DisableSRPBatcher );
				
				half2 Global_VertexOrientationWS7551_g84806 = temp_output_356_0_g84873;
				float2 break7779_g84806 = Global_VertexOrientationWS7551_g84806;
				float dotResult8067_g84806 = dot( Global_VertexOrientationWS7551_g84806 , Global_VertexOrientationWS7551_g84806 );
				float3 appendResult7781_g84806 = (float3(break7779_g84806.x , sqrt( ( 1.0 - saturate( dotResult8067_g84806 ) ) ) , break7779_g84806.y));
				float3 normalizeResult8063_g84806 = normalize( appendResult7781_g84806 );
				float3 worldToObjDir7782_g84806 = ASESafeNormalize( mul( unity_WorldToObject, float4( normalizeResult8063_g84806, 0 ) ).xyz );
				half Terrain_Blend_Offset8086_g84806 = _TerrainBlendOffsetValue;
				half Terrain_Mask_Vertex8085_g84806 = saturate( ( ( Global_VertexOffset7549_g84806 + ( Terrain_Blend_Offset8086_g84806 * _TerrainBlendNormalValue ) ) - (WorldPosition_Shifted7477_g84806).y ) );
				float3 lerpResult7784_g84806 = lerp( v.normal , worldToObjDir7782_g84806 , Terrain_Mask_Vertex8085_g84806);
				#ifdef TVE_TERRAIN
				float3 staticSwitch7896_g84806 = lerpResult7784_g84806;
				#else
				float3 staticSwitch7896_g84806 = v.normal;
				#endif
				
				float4 break33_g84872 = _second_uvs_mode;
				float2 temp_output_30_0_g84872 = ( v.ase_texcoord.xy * break33_g84872.x );
				float2 appendResult21_g84861 = (float2(v.texcoord1.xyzw.z , v.texcoord1.xyzw.w));
				float2 Mesh_DetailCoord3_g84806 = appendResult21_g84861;
				float2 temp_output_29_0_g84872 = ( Mesh_DetailCoord3_g84806 * break33_g84872.y );
				float2 temp_output_31_0_g84872 = ( (WorldPosition_Shifted7477_g84806).xz * break33_g84872.z );
				half2 Second_UVs_Tilling7656_g84806 = (_SecondUVs).xy;
				half2 Second_UVs_Scale7664_g84806 = ( 1.0 / Second_UVs_Tilling7656_g84806 );
				float2 lerpResult7660_g84806 = lerp( Second_UVs_Tilling7656_g84806 , Second_UVs_Scale7664_g84806 , _SecondUVsScaleMode);
				half2 Second_UVs_Offset7657_g84806 = (_SecondUVs).zw;
				float2 vertexToFrag11_g84871 = ( ( ( temp_output_30_0_g84872 + temp_output_29_0_g84872 + temp_output_31_0_g84872 ) * lerpResult7660_g84806 ) + Second_UVs_Offset7657_g84806 );
				o.ase_texcoord3.xy = vertexToFrag11_g84871;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord4.xyz = ase_worldTangent;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				o.ase_texcoord5.xyz = ase_worldNormal;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord6.xyz = ase_worldBitangent;
				o.ase_texcoord7.xyz = vertexToFrag3890_g84806;
				o.ase_texcoord8.xyz = vertexToFrag4224_g84806;
				
				o.ase_texcoord2 = v.ase_texcoord;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord3.zw = 0;
				o.ase_texcoord4.w = 0;
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = Final_VertexPosition890_g84806;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = staticSwitch7896_g84806;
				v.tangent = v.tangent;

				TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				#if !defined( CAN_SKIP_VPOS )
				, UNITY_VPOS_TYPE vpos : VPOS
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localCustomAlphaClip19_g84928 = ( 0.0 );
				half2 Main_UVs15_g84806 = ( ( IN.ase_texcoord2.xy * (_MainUVs).xy ) + (_MainUVs).zw );
				float4 tex2DNode29_g84806 = SAMPLE_TEXTURE2D( _MainAlbedoTex, sampler_MainAlbedoTex, Main_UVs15_g84806 );
				half Main_Alpha316_g84806 = tex2DNode29_g84806.a;
				float2 vertexToFrag11_g84871 = IN.ase_texcoord3.xy;
				half2 Second_UVs17_g84806 = vertexToFrag11_g84871;
				float4 tex2DNode89_g84806 = SAMPLE_TEXTURE2D( _SecondAlbedoTex, sampler_SecondAlbedoTex, Second_UVs17_g84806 );
				half Second_Alpha5007_g84806 = tex2DNode89_g84806.a;
				float4 tex2DNode35_g84806 = SAMPLE_TEXTURE2D( _MainMaskTex, sampler_Linear_Repeat, Main_UVs15_g84806 );
				half Main_Mask57_g84806 = tex2DNode35_g84806.b;
				float4 tex2DNode33_g84806 = SAMPLE_TEXTURE2D( _SecondMaskTex, sampler_Linear_Repeat, Second_UVs17_g84806 );
				half Second_Mask81_g84806 = tex2DNode33_g84806.b;
				float lerpResult6885_g84806 = lerp( Main_Mask57_g84806 , Second_Mask81_g84806 , _DetailMaskMode);
				float clampResult17_g84911 = clamp( lerpResult6885_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84910 = _DetailMaskMinValue;
				float temp_output_10_0_g84910 = ( _DetailMaskMaxValue - temp_output_7_0_g84910 );
				half Detail_Mask_Texture6794_g84806 = saturate( ( ( clampResult17_g84911 - temp_output_7_0_g84910 ) / ( temp_output_10_0_g84910 + 0.0001 ) ) );
				half Mesh_DetailMask90_g84806 = IN.ase_color.b;
				half4 Normal_Packed45_g84891 = SAMPLE_TEXTURE2D( _MainNormalTex, sampler_Linear_Repeat, Main_UVs15_g84806 );
				float2 appendResult58_g84891 = (float2(( (Normal_Packed45_g84891).x * (Normal_Packed45_g84891).w ) , (Normal_Packed45_g84891).y));
				half2 Normal_Default50_g84891 = appendResult58_g84891;
				half2 Normal_ASTC41_g84891 = (Normal_Packed45_g84891).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g84891 = Normal_ASTC41_g84891;
				#else
				float2 staticSwitch38_g84891 = Normal_Default50_g84891;
				#endif
				half2 Normal_NO_DTX544_g84891 = (Normal_Packed45_g84891).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g84891 = Normal_NO_DTX544_g84891;
				#else
				float2 staticSwitch37_g84891 = staticSwitch38_g84891;
				#endif
				float2 temp_output_6555_0_g84806 = ( (staticSwitch37_g84891*2.0 + -1.0) * _MainNormalValue );
				float3 appendResult7388_g84806 = (float3(temp_output_6555_0_g84806 , 1.0));
				float3 ase_worldTangent = IN.ase_texcoord4.xyz;
				float3 ase_worldNormal = IN.ase_texcoord5.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord6.xyz;
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal7389_g84806 = appendResult7388_g84806;
				float3 worldNormal7389_g84806 = float3(dot(tanToWorld0,tanNormal7389_g84806), dot(tanToWorld1,tanNormal7389_g84806), dot(tanToWorld2,tanNormal7389_g84806));
				half3 Main_NormalWS7390_g84806 = worldNormal7389_g84806;
				float lerpResult6884_g84806 = lerp( Mesh_DetailMask90_g84806 , ((Main_NormalWS7390_g84806).y*0.5 + 0.5) , _DetailMeshMode);
				float clampResult17_g84909 = clamp( lerpResult6884_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84908 = _DetailMeshMinValue;
				float temp_output_10_0_g84908 = ( _DetailMeshMaxValue - temp_output_7_0_g84908 );
				half Detail_Mask_Surface1540_g84806 = saturate( ( ( clampResult17_g84909 - temp_output_7_0_g84908 ) / ( temp_output_10_0_g84908 + 0.0001 ) ) );
				float clampResult17_g84912 = clamp( ( Detail_Mask_Texture6794_g84806 * Detail_Mask_Surface1540_g84806 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g84913 = _DetailBlendMinValue;
				float temp_output_10_0_g84913 = ( _DetailBlendMaxValue - temp_output_7_0_g84913 );
				half Detail_Mask147_g84806 = ( saturate( ( ( clampResult17_g84912 - temp_output_7_0_g84913 ) / ( temp_output_10_0_g84913 + 0.0001 ) ) ) * _DetailMode * _DetailValue );
				float lerpResult6153_g84806 = lerp( Main_Alpha316_g84806 , Second_Alpha5007_g84806 , Detail_Mask147_g84806);
				float lerpResult6785_g84806 = lerp( ( Main_Alpha316_g84806 * Second_Alpha5007_g84806 ) , lerpResult6153_g84806 , _DetailAlphaMode);
				#ifdef TVE_DETAIL
				float staticSwitch6158_g84806 = lerpResult6785_g84806;
				#else
				float staticSwitch6158_g84806 = Main_Alpha316_g84806;
				#endif
				half Blend_Alpha_Detail6157_g84806 = staticSwitch6158_g84806;
				half AlphaTreshold2132_g84806 = _AlphaClipValue;
				float temp_output_84_0_g84820 = _LayerExtrasValue;
				float temp_output_19_0_g84824 = TVE_ExtrasUsage[(int)temp_output_84_0_g84820];
				float4 temp_output_93_19_g84820 = TVE_ExtrasCoords;
				float3 vertexToFrag3890_g84806 = IN.ase_texcoord7.xyz;
				float3 WorldPosition3905_g84806 = vertexToFrag3890_g84806;
				float3 vertexToFrag4224_g84806 = IN.ase_texcoord8.xyz;
				float3 ObjectPosition4223_g84806 = vertexToFrag4224_g84806;
				float3 lerpResult4827_g84806 = lerp( WorldPosition3905_g84806 , ObjectPosition4223_g84806 , _ExtrasPositionMode);
				half2 UV96_g84820 = ( (temp_output_93_19_g84820).zw + ( (temp_output_93_19_g84820).xy * (lerpResult4827_g84806).xz ) );
				float4 tex2DArrayNode48_g84820 = SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_ExtrasTex, sampler_Linear_Clamp, float3(UV96_g84820,temp_output_84_0_g84820), 0.0 );
				float4 temp_output_17_0_g84824 = tex2DArrayNode48_g84820;
				float4 temp_output_94_85_g84820 = TVE_ExtrasParams;
				float4 temp_output_3_0_g84824 = temp_output_94_85_g84820;
				float4 ifLocalVar18_g84824 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g84824 >= 0.5 )
				ifLocalVar18_g84824 = temp_output_17_0_g84824;
				else
				ifLocalVar18_g84824 = temp_output_3_0_g84824;
				float4 lerpResult22_g84824 = lerp( temp_output_3_0_g84824 , temp_output_17_0_g84824 , temp_output_19_0_g84824);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g84824 = lerpResult22_g84824;
				#else
				float4 staticSwitch24_g84824 = ifLocalVar18_g84824;
				#endif
				half4 Global_Extras_Params5440_g84806 = staticSwitch24_g84824;
				float4 break456_g84833 = Global_Extras_Params5440_g84806;
				half Global_Extras_Alpha1033_g84806 = saturate( break456_g84833.w );
				float3 ObjectPosition_Shifted7481_g84806 = ( ObjectPosition4223_g84806 - TVE_WorldOrigin );
				half3 Input_Position167_g84900 = ObjectPosition_Shifted7481_g84806;
				float dotResult156_g84900 = dot( (Input_Position167_g84900).xz , float2( 12.9898,78.233 ) );
				half Vertex_DynamicMode5112_g84806 = _VertexDynamicMode;
				half Input_DynamicMode120_g84900 = Vertex_DynamicMode5112_g84806;
				float Postion_Random162_g84900 = ( sin( dotResult156_g84900 ) * ( 1.0 - Input_DynamicMode120_g84900 ) );
				float Mesh_Variation16_g84806 = IN.ase_color.r;
				half Input_Variation124_g84900 = Mesh_Variation16_g84806;
				half ObjectData20_g84902 = frac( ( Postion_Random162_g84900 + Input_Variation124_g84900 ) );
				half WorldData19_g84902 = Input_Variation124_g84900;
				#ifdef TVE_FEATURE_BATCHING
				float staticSwitch14_g84902 = WorldData19_g84902;
				#else
				float staticSwitch14_g84902 = ObjectData20_g84902;
				#endif
				float temp_output_112_0_g84900 = staticSwitch14_g84902;
				float clampResult171_g84900 = clamp( temp_output_112_0_g84900 , 0.01 , 0.99 );
				float Global_MeshVariation5104_g84806 = clampResult171_g84900;
				float lerpResult5154_g84806 = lerp( 0.0 , Global_MeshVariation5104_g84806 , _AlphaVariationValue);
				half Global_Alpha_Variation5158_g84806 = lerpResult5154_g84806;
				float Emissive_Alpha7942_g84806 = 0.0;
				float lerpResult6866_g84806 = lerp( ( 1.0 - Detail_Mask147_g84806 ) , 1.0 , _DetailFadeMode);
				#ifdef TVE_DETAIL
				float staticSwitch6612_g84806 = lerpResult6866_g84806;
				#else
				float staticSwitch6612_g84806 = 1.0;
				#endif
				half Detail_Mask_Invert6260_g84806 = staticSwitch6612_g84806;
				half Alpha_Mask6234_g84806 = ( 1.0 * Detail_Mask_Invert6260_g84806 );
				float lerpResult5203_g84806 = lerp( 1.0 , saturate( ( ( Global_Extras_Alpha1033_g84806 - saturate( ( Global_Alpha_Variation5158_g84806 + Emissive_Alpha7942_g84806 ) ) ) + ( Global_Extras_Alpha1033_g84806 * 0.1 ) ) ) , ( Alpha_Mask6234_g84806 * _GlobalAlpha ));
				float lerpResult16_g84925 = lerp( 1.0 , lerpResult5203_g84806 , TVE_IsEnabled);
				half Global_Alpha315_g84806 = lerpResult16_g84925;
				half Fade_Alpha3727_g84806 = 1.0;
				half Final_Alpha7344_g84806 = min( ( ( Blend_Alpha_Detail6157_g84806 - AlphaTreshold2132_g84806 ) * Global_Alpha315_g84806 ) , Fade_Alpha3727_g84806 );
				float temp_output_3_0_g84928 = Final_Alpha7344_g84806;
				float Alpha19_g84928 = temp_output_3_0_g84928;
				float temp_output_15_0_g84928 = 0.01;
				float Treshold19_g84928 = temp_output_15_0_g84928;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_ALPHA_FADE) || defined (TVE_ALPHA_GLOBAL)
				#if defined (TVE_IS_HD_PIPELINE)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g84928 - Treshold19_g84928);
				#endif
				#else
				clip(Alpha19_g84928 - Treshold19_g84928);
				#endif
				#endif
				}
				float clampResult17_g84892 = clamp( Main_Mask57_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84893 = _MainMaskMinValue;
				float temp_output_10_0_g84893 = ( _MainMaskMaxValue - temp_output_7_0_g84893 );
				half Main_Mask_Remap5765_g84806 = saturate( ( ( clampResult17_g84892 - temp_output_7_0_g84893 ) / ( temp_output_10_0_g84893 + 0.0001 ) ) );
				float lerpResult8007_g84806 = lerp( 1.0 , Main_Mask_Remap5765_g84806 , _MainColorMode);
				float4 lerpResult7986_g84806 = lerp( _MainColorTwo , _MainColor , lerpResult8007_g84806);
				half Main_Color_Alpha6121_g84806 = (lerpResult7986_g84806).a;
				float clampResult17_g84895 = clamp( Second_Mask81_g84806 , 0.0001 , 0.9999 );
				float temp_output_7_0_g84896 = _SecondMaskMinValue;
				float temp_output_10_0_g84896 = ( _SecondMaskMaxValue - temp_output_7_0_g84896 );
				half Second_Mask_Remap6130_g84806 = saturate( ( ( clampResult17_g84895 - temp_output_7_0_g84896 ) / ( temp_output_10_0_g84896 + 0.0001 ) ) );
				float lerpResult8008_g84806 = lerp( 1.0 , Second_Mask_Remap6130_g84806 , _SecondColorMode);
				float4 lerpResult7997_g84806 = lerp( _SecondColorTwo , _SecondColor , lerpResult8008_g84806);
				half Second_Color_Alpha6152_g84806 = (lerpResult7997_g84806).a;
				float lerpResult6168_g84806 = lerp( Main_Color_Alpha6121_g84806 , Second_Color_Alpha6152_g84806 , Detail_Mask147_g84806);
				#ifdef TVE_DETAIL
				float staticSwitch6174_g84806 = lerpResult6168_g84806;
				#else
				float staticSwitch6174_g84806 = Main_Color_Alpha6121_g84806;
				#endif
				half Blend_ColorAlpha_Detail6167_g84806 = staticSwitch6174_g84806;
				half Final_Clip914_g84806 = saturate( ( Alpha19_g84928 * Blend_ColorAlpha_Detail6167_g84806 ) );
				
				o.Normal = fixed3( 0, 0, 1 );
				#if !defined(ASE_LIGHTING_SIMPLE)
					o.Occlusion = 1;
				#endif
				o.Alpha = Final_Clip914_g84806;
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;

				#ifdef _ALPHATEST_SHADOW_ON
					if (unity_LightShadowBias.z != 0.0)
						clip(o.Alpha - AlphaClipThresholdShadow);
					#ifdef _ALPHATEST_ON
					else
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#else
					#ifdef _ALPHATEST_ON
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#endif

				#if defined( CAN_SKIP_VPOS )
				float2 vpos = IN.pos;
				#endif

				#ifdef UNITY_STANDARD_USE_DITHER_MASK
					half alphaRef = tex3D(_DitherMaskLOD, float3(vpos.xy*0.25,o.Alpha*0.9375)).a;
					clip(alphaRef - 0.01);
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				SHADOW_CASTER_FRAGMENT(IN)
			}
			ENDCG
		}
		
	}
	CustomEditor "TVEShaderCoreGUI"
	
	Fallback "Hidden/BOXOPHOBIC/The Vegetation Engine/Fallback"
}
/*ASEBEGIN
Version=19202
Node;AmplifyShaderEditor.RangedFloatNode;10;-2176,-768;Half;False;Property;_render_cull;_render_cull;427;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.CommentaryNode;33;-2176,-512;Inherit;False;1277.803;100;Final;0;;0,1,0.5,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;408;-2176,384;Inherit;False;1282.438;100;Features;0;;0,1,0.5,1;0;0
Node;AmplifyShaderEditor.CommentaryNode;37;-2176,-896;Inherit;False;1282.837;100;Internal;0;;1,0.252,0,1;0;0
Node;AmplifyShaderEditor.RangedFloatNode;641;-1408,-768;Half;False;Property;_render_coverage;_render_coverage;431;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;17;-1595,-771;Half;False;Property;_render_zw;_render_zw;430;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;20;-1984,-768;Half;False;Property;_render_src;_render_src;428;1;[HideInInspector];Create;True;0;0;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;7;-1792,-768;Half;False;Property;_render_dst;_render_dst;429;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;638;-2176,512;Inherit;False;Define Pipeline Standard;-1;;76876;9af03ae8defe78d448ef2a4ef3601e12;0;0;1;FLOAT;529
Node;AmplifyShaderEditor.FunctionNode;639;-1088,512;Inherit;False;Compile All Shaders;-1;;76880;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;673;-1920,512;Inherit;False;Define Lighting Standard;432;;77004;116a5c57ec750cb4896f729a6748c509;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;610;-1664,512;Inherit;False;Define ShaderType Plant;434;;77005;b458122dd75182d488380bd0f592b9e6;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;674;-1280,512;Inherit;False;Compile Blanket;-1;;79914;bff24eccb6f21f7419015d541a074b70;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;675;-1152,-384;Float;False;False;-1;2;ASEMaterialInspector;0;15;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ExtraPrePass;0;0;ExtraPrePass;6;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;676;-1152,-384;Float;False;True;-1;2;TVEShaderCoreGUI;0;18;BOXOPHOBIC/The Vegetation Engine/Geometry/Plant Standard Lit (Blanket);28cd5599e02859647ae1798e4fcaef6c;True;ForwardBase;0;1;ForwardBase;20;True;True;0;0;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;True;_render_coverage;False;True;2;False;_render_cull;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;True;True;1;True;_render_zw;True;0;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;5;False;0;True;True;1;1;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=ForwardBase;False;False;0;Hidden/BOXOPHOBIC/The Vegetation Engine/Fallback;0;0;Standard;41;Category;0;0;Workflow;1;0;Surface;0;0;  Blend;0;0;  Refraction Model;0;0;  Dither Shadows;1;0;Two Sided;0;638375491637613060;Deferred Pass;1;0;Transmission;0;0;  Transmission Shadow;0.5,False,;0;Translucency;0;0;  Translucency Strength;1,False,;0;  Normal Distortion;0.5,False,;0;  Scattering;2,False,;0;  Direct;0.9,False,;0;  Ambient;0.1,False,;0;  Shadow;0.5,False,;0;Cast Shadows;1;0;  Use Shadow Threshold;0;0;Receive Shadows;1;0;GPU Instancing;1;0;LOD CrossFade;1;0;Built-in Fog;1;0;Ambient Light;1;0;Meta Pass;1;0;Add Pass;1;0;Override Baked GI;0;0;Extra Pre Pass;0;0;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Fwd Specular Highlights Toggle;0;0;Fwd Reflections Toggle;0;0;Disable Batching;0;0;Vertex Position,InvertActionOnDeselection;0;638375438096297548;0;6;False;True;True;True;True;True;False;;True;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;677;-1152,-384;Float;False;False;-1;2;ASEMaterialInspector;0;15;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ForwardAdd;0;2;ForwardAdd;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;4;1;False;;1;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;True;1;LightMode=ForwardAdd;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;678;-1152,-384;Float;False;False;-1;2;ASEMaterialInspector;0;15;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Deferred;0;3;Deferred;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Deferred;True;2;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;679;-1152,-384;Float;False;False;-1;2;ASEMaterialInspector;0;15;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Meta;0;4;Meta;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;680;-1152,-384;Float;False;False;-1;2;ASEMaterialInspector;0;15;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;5;ShadowCaster;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.FunctionNode;698;-2176,-384;Inherit;False;Base Blanket;0;;84806;ec9d184f5c74f2c41b1d23a5abd72b0a;105,7343,0,3880,1,4028,1,3900,1,3908,1,4172,1,8021,1,8022,1,4179,1,1298,1,6791,1,6792,1,1300,1,3586,0,4499,1,1708,1,6056,1,3509,1,3873,1,893,1,6230,0,5156,1,5345,0,1715,1,1714,1,1718,1,1717,1,6116,1,5075,1,7607,1,6076,1,6592,1,6068,1,6692,0,6729,1,1776,1,6378,1,3475,1,6352,1,6655,1,4210,1,1745,1,3479,0,1646,1,3501,1,2807,1,6206,1,7606,1,4999,0,6194,1,3887,0,7321,0,7332,0,3957,0,6647,0,6257,0,5357,0,2172,1,3883,0,3728,1,5350,0,2658,1,7669,0,1742,1,3484,0,6320,1,1734,1,4837,1,6848,1,6161,1,6166,1,1735,1,1736,1,6622,1,1737,1,7817,1,7913,1,7923,1,7810,1,7803,1,7791,1,7795,1,7897,1,7429,0,7941,0,6721,1,860,1,2260,1,2261,1,2054,1,2032,1,5258,1,2062,1,2039,1,7588,1,7586,1,3243,1,5220,1,4217,1,6699,1,5339,0,8019,1,7492,0,5090,1,4242,1;9;7333;FLOAT3;1,1,1;False;6196;FLOAT;1;False;6693;FLOAT;1;False;6201;FLOAT;1;False;6205;FLOAT;1;False;5143;FLOAT;1;False;6231;FLOAT;1;False;6198;FLOAT;1;False;5340;FLOAT3;0,0,0;False;24;FLOAT3;0;FLOAT3;528;FLOAT3;2489;FLOAT;531;FLOAT;4842;FLOAT;529;FLOAT;3678;FLOAT;530;FLOAT;4122;FLOAT;4134;FLOAT;1235;FLOAT;532;FLOAT;5389;FLOAT;721;FLOAT3;1230;FLOAT;5296;FLOAT;1461;FLOAT;1290;FLOAT;629;FLOAT3;534;FLOAT3;7780;FLOAT;4867;FLOAT4;5246;FLOAT4;4841
WireConnection;676;0;698;0
WireConnection;676;1;698;528
WireConnection;676;2;698;2489
WireConnection;676;3;698;3678
WireConnection;676;6;698;531
WireConnection;676;5;698;530
WireConnection;676;7;698;532
WireConnection;676;15;698;534
WireConnection;676;16;698;7780
ASEEND*/
//CHKSM=EC72D0844C679F494CB104EBA42B1FA48246A25D